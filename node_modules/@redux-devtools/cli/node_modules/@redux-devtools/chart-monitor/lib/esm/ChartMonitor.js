import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import * as themes from 'redux-devtools-themes';
import { ActionCreators } from '@redux-devtools/core';
import deepmerge from 'deepmerge';
import reducer from './reducers';
import Chart from './Chart'; // eslint-disable-next-line @typescript-eslint/unbound-method

var reset = ActionCreators.reset,
    rollback = ActionCreators.rollback,
    commit = ActionCreators.commit,
    sweep = ActionCreators.sweep,
    toggleAction = ActionCreators.toggleAction;
var styles = {
  container: {
    fontFamily: 'monaco, Consolas, Lucida Console, monospace',
    position: 'relative',
    overflowY: 'hidden',
    width: '100%',
    height: '100%',
    minWidth: 300
  }
};

function invertColors(theme) {
  return _objectSpread(_objectSpread({}, theme), {}, {
    base00: theme.base07,
    base01: theme.base06,
    base02: theme.base05,
    base03: theme.base04,
    base04: theme.base03,
    base05: theme.base02,
    base06: theme.base01,
    base07: theme.base00
  });
}

var ChartMonitor = /*#__PURE__*/function (_PureComponent) {
  _inherits(ChartMonitor, _PureComponent);

  var _super = _createSuper(ChartMonitor);

  function ChartMonitor() {
    var _this;

    _classCallCheck(this, ChartMonitor);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "handleRollback", function () {
      _this.props.dispatch(rollback());
    });

    _defineProperty(_assertThisInitialized(_this), "handleSweep", function () {
      _this.props.dispatch(sweep());
    });

    _defineProperty(_assertThisInitialized(_this), "handleCommit", function () {
      _this.props.dispatch(commit());
    });

    _defineProperty(_assertThisInitialized(_this), "handleToggleAction", function (id) {
      _this.props.dispatch(toggleAction(id));
    });

    _defineProperty(_assertThisInitialized(_this), "handleReset", function () {
      _this.props.dispatch(reset());
    });

    return _this;
  }

  _createClass(ChartMonitor, [{
    key: "getTheme",
    value: function getTheme() {
      var _this$props = this.props,
          theme = _this$props.theme,
          invertTheme = _this$props.invertTheme;

      if (typeof theme !== 'string') {
        return invertTheme ? invertColors(theme) : theme;
      }

      if (typeof themes[theme] !== 'undefined') {
        return invertTheme ? invertColors(themes[theme]) : themes[theme];
      }

      console.warn('DevTools theme ' + theme + ' not found, defaulting to nicinabox');
      return invertTheme ? invertColors(themes.nicinabox) : themes.nicinabox;
    }
  }, {
    key: "getChartStyle",
    value: function getChartStyle() {
      var theme = this.getTheme();
      return {
        width: '100%',
        height: '100%',
        node: {
          colors: {
            default: theme.base0B,
            collapsed: theme.base0B,
            parent: theme.base0E
          },
          radius: 7
        },
        text: {
          colors: {
            default: theme.base0D,
            hover: theme.base06
          }
        }
      };
    }
  }, {
    key: "getChartOptions",
    value: function getChartOptions() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var computedStates = props.computedStates;
      var theme = this.getTheme();
      var tooltipOptions = {
        disabled: false,
        offset: {
          left: 30,
          top: 10
        },
        indentationSize: 2,
        style: {
          'background-color': theme.base06,
          opacity: '0.7',
          'border-radius': '5px',
          padding: '5px'
        }
      };
      var defaultOptions = {
        state: computedStates.length ? computedStates[props.currentStateIndex].state : null,
        isSorted: false,
        heightBetweenNodesCoeff: 1,
        widthBetweenNodesCoeff: 1.3,
        tooltipOptions: tooltipOptions,
        style: this.getChartStyle()
      };
      return deepmerge(defaultOptions, props);
    }
  }, {
    key: "render",
    value: function render() {
      var theme = this.getTheme();
      var ChartAsAny = Chart;
      return /*#__PURE__*/React.createElement("div", {
        style: _objectSpread(_objectSpread({}, styles.container), {}, {
          backgroundColor: theme.base07
        })
      }, /*#__PURE__*/React.createElement(ChartAsAny, this.getChartOptions()));
    }
  }]);

  return ChartMonitor;
}(PureComponent);

_defineProperty(ChartMonitor, "update", reducer);

_defineProperty(ChartMonitor, "propTypes", {
  dispatch: PropTypes.func,
  computedStates: PropTypes.array,
  currentStateIndex: PropTypes.number,
  actionsById: PropTypes.object,
  stagedActionIds: PropTypes.array,
  skippedActionIds: PropTypes.array,
  monitorState: PropTypes.shape({
    initialScrollTop: PropTypes.number
  }),
  preserveScrollTop: PropTypes.bool,
  select: PropTypes.func.isRequired,
  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
  invertTheme: PropTypes.bool
});

_defineProperty(ChartMonitor, "defaultProps", {
  select: function select(state) {
    return state;
  },
  theme: 'nicinabox',
  preserveScrollTop: true,
  invertTheme: false
});

export default ChartMonitor;