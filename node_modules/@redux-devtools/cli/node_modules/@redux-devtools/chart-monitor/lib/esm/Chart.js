import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component, createRef } from 'react';
import PropTypes from 'prop-types';
import { tree } from 'd3-state-visualizer';
var wrapperStyle = {
  width: '100%',
  height: '100%'
};

var Chart = /*#__PURE__*/function (_Component) {
  _inherits(Chart, _Component);

  var _super = _createSuper(Chart);

  function Chart() {
    var _this;

    _classCallCheck(this, Chart);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "divRef", /*#__PURE__*/createRef());

    return _this;
  }

  _createClass(Chart, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          select = _this$props.select,
          state = _this$props.state,
          defaultIsVisible = _this$props.defaultIsVisible;
      this.renderChart = tree(this.divRef.current, this.props);

      if (defaultIsVisible) {
        // eslint-disable-next-line @typescript-eslint/ban-types
        this.renderChart(select(state));
      }
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var state = nextProps.state,
          select = nextProps.select,
          monitorState = nextProps.monitorState;

      if (monitorState.isVisible !== false) {
        // eslint-disable-next-line @typescript-eslint/ban-types
        this.renderChart(select(state));
      }
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement("div", {
        style: wrapperStyle,
        ref: this.divRef
      });
    }
  }]);

  return Chart;
}(Component);

_defineProperty(Chart, "propTypes", {
  state: PropTypes.object,
  rootKeyName: PropTypes.string,
  pushMethod: PropTypes.oneOf(['push', 'unshift']),
  tree: PropTypes.shape({
    name: PropTypes.string,
    children: PropTypes.array
  }),
  id: PropTypes.string,
  style: PropTypes.shape({
    node: PropTypes.shape({
      colors: PropTypes.shape({
        default: PropTypes.string,
        parent: PropTypes.string,
        collapsed: PropTypes.string
      }),
      radius: PropTypes.number
    }),
    text: PropTypes.shape({
      colors: PropTypes.shape({
        default: PropTypes.string,
        hover: PropTypes.string
      })
    }),
    link: PropTypes.object
  }),
  size: PropTypes.number,
  aspectRatio: PropTypes.number,
  margin: PropTypes.shape({
    top: PropTypes.number,
    right: PropTypes.number,
    bottom: PropTypes.number,
    left: PropTypes.number
  }),
  isSorted: PropTypes.bool,
  heightBetweenNodesCoeff: PropTypes.number,
  widthBetweenNodesCoeff: PropTypes.number,
  transitionDuration: PropTypes.number,
  onClickText: PropTypes.func,
  tooltipOptions: PropTypes.shape({
    disabled: PropTypes.bool,
    left: PropTypes.number,
    top: PropTypes.number,
    offset: PropTypes.shape({
      left: PropTypes.number,
      top: PropTypes.number
    }),
    indentationSize: PropTypes.number,
    style: PropTypes.object
  })
});

export default Chart;