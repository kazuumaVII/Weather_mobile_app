import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import * as themes from 'redux-devtools-themes';
import { LiftedAction, LiftedState } from '@redux-devtools/core';
import { Action, Dispatch } from 'redux';
import { NodeWithId } from 'd3-state-visualizer';
import reducer, { ChartMonitorState } from './reducers';
import { Props } from './Chart';
export interface ChartMonitorProps<S, A extends Action<unknown>> extends LiftedState<S, A, ChartMonitorState> {
    dispatch: Dispatch<LiftedAction<S, A, ChartMonitorState>>;
    preserveScrollTop: boolean;
    select: (state: S) => unknown;
    theme: keyof typeof themes | themes.Base16Theme;
    invertTheme: boolean;
    state: S | null;
    isSorted: boolean;
    heightBetweenNodesCoeff: number;
    widthBetweenNodesCoeff: number;
    onClickText: (datum: NodeWithId) => void;
    tooltipOptions: unknown;
    style: {
        width: number;
        height: number;
        node: {
            colors: {
                default: string;
                collapsed: string;
                parent: string;
            };
            radius: number;
        };
        text: {
            colors: {
                default: string;
                hover: string;
            };
        };
    };
    defaultIsVisible?: boolean;
}
declare class ChartMonitor<S, A extends Action<unknown>> extends PureComponent<ChartMonitorProps<S, A>> {
    static update: typeof reducer;
    static propTypes: {
        dispatch: PropTypes.Requireable<(...args: any[]) => any>;
        computedStates: PropTypes.Requireable<any[]>;
        currentStateIndex: PropTypes.Requireable<number>;
        actionsById: PropTypes.Requireable<object>;
        stagedActionIds: PropTypes.Requireable<any[]>;
        skippedActionIds: PropTypes.Requireable<any[]>;
        monitorState: PropTypes.Requireable<PropTypes.InferProps<{
            initialScrollTop: PropTypes.Requireable<number>;
        }>>;
        preserveScrollTop: PropTypes.Requireable<boolean>;
        select: PropTypes.Validator<(...args: any[]) => any>;
        theme: PropTypes.Requireable<string | object>;
        invertTheme: PropTypes.Requireable<boolean>;
    };
    static defaultProps: {
        select: (state: unknown) => unknown;
        theme: string;
        preserveScrollTop: boolean;
        invertTheme: boolean;
    };
    handleRollback: () => void;
    handleSweep: () => void;
    handleCommit: () => void;
    handleToggleAction: (id: number) => void;
    handleReset: () => void;
    getTheme(): themes.Base16Theme;
    getChartStyle(): {
        width: string;
        height: string;
        node: {
            colors: {
                default: string;
                collapsed: string;
                parent: string;
            };
            radius: number;
        };
        text: {
            colors: {
                default: string;
                hover: string;
            };
        };
    };
    getChartOptions(props?: Readonly<ChartMonitorProps<S, A>> & Readonly<{
        children?: React.ReactNode;
    }>): Props<S, A>;
    render(): JSX.Element;
}
export default ChartMonitor;
