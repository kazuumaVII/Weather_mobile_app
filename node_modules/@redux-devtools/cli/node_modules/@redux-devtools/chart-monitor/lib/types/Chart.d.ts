import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { NodeWithId, Primitive } from 'd3-state-visualizer';
import { Action, Dispatch } from 'redux';
import { LiftedAction, LiftedState } from '@redux-devtools/core';
import * as themes from 'redux-devtools-themes';
import { ChartMonitorState } from './reducers';
export interface Props<S, A extends Action<unknown>> extends LiftedState<S, A, ChartMonitorState> {
    dispatch: Dispatch<LiftedAction<S, A, ChartMonitorState>>;
    preserveScrollTop: boolean;
    select: (state: S) => unknown;
    theme: keyof typeof themes | themes.Base16Theme;
    invertTheme: boolean;
    state: S | null;
    isSorted: boolean;
    heightBetweenNodesCoeff: number;
    widthBetweenNodesCoeff: number;
    onClickText: (datum: NodeWithId) => void;
    tooltipOptions: {
        disabled: boolean;
        offset: {
            left: number;
            top: number;
        };
        indentationSize: number;
        style: {
            [key: string]: Primitive;
        } | undefined;
    };
    style: {
        [key: string]: Primitive;
    } | undefined;
    defaultIsVisible?: boolean;
}
declare class Chart<S, A extends Action<unknown>> extends Component<Props<S, A>> {
    static propTypes: {
        state: PropTypes.Requireable<object>;
        rootKeyName: PropTypes.Requireable<string>;
        pushMethod: PropTypes.Requireable<string>;
        tree: PropTypes.Requireable<PropTypes.InferProps<{
            name: PropTypes.Requireable<string>;
            children: PropTypes.Requireable<any[]>;
        }>>;
        id: PropTypes.Requireable<string>;
        style: PropTypes.Requireable<PropTypes.InferProps<{
            node: PropTypes.Requireable<PropTypes.InferProps<{
                colors: PropTypes.Requireable<PropTypes.InferProps<{
                    default: PropTypes.Requireable<string>;
                    parent: PropTypes.Requireable<string>;
                    collapsed: PropTypes.Requireable<string>;
                }>>;
                radius: PropTypes.Requireable<number>;
            }>>;
            text: PropTypes.Requireable<PropTypes.InferProps<{
                colors: PropTypes.Requireable<PropTypes.InferProps<{
                    default: PropTypes.Requireable<string>;
                    hover: PropTypes.Requireable<string>;
                }>>;
            }>>;
            link: PropTypes.Requireable<object>;
        }>>;
        size: PropTypes.Requireable<number>;
        aspectRatio: PropTypes.Requireable<number>;
        margin: PropTypes.Requireable<PropTypes.InferProps<{
            top: PropTypes.Requireable<number>;
            right: PropTypes.Requireable<number>;
            bottom: PropTypes.Requireable<number>;
            left: PropTypes.Requireable<number>;
        }>>;
        isSorted: PropTypes.Requireable<boolean>;
        heightBetweenNodesCoeff: PropTypes.Requireable<number>;
        widthBetweenNodesCoeff: PropTypes.Requireable<number>;
        transitionDuration: PropTypes.Requireable<number>;
        onClickText: PropTypes.Requireable<(...args: any[]) => any>;
        tooltipOptions: PropTypes.Requireable<PropTypes.InferProps<{
            disabled: PropTypes.Requireable<boolean>;
            left: PropTypes.Requireable<number>;
            top: PropTypes.Requireable<number>;
            offset: PropTypes.Requireable<PropTypes.InferProps<{
                left: PropTypes.Requireable<number>;
                top: PropTypes.Requireable<number>;
            }>>;
            indentationSize: PropTypes.Requireable<number>;
            style: PropTypes.Requireable<object>;
        }>>;
    };
    divRef: React.RefObject<HTMLDivElement>;
    renderChart?: (state?: {} | null | undefined) => void;
    componentDidMount(): void;
    UNSAFE_componentWillReceiveProps(nextProps: Props<S, A>): void;
    render(): JSX.Element;
}
export default Chart;
