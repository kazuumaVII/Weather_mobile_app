"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var themes = _interopRequireWildcard(require("redux-devtools-themes"));

var _core = require("@redux-devtools/core");

var _lodash = _interopRequireDefault(require("lodash.debounce"));

var _actions = require("./actions");

var _reducers = _interopRequireDefault(require("./reducers"));

var _LogMonitorButtonBar = _interopRequireDefault(require("./LogMonitorButtonBar"));

var _LogMonitorEntryList = _interopRequireDefault(require("./LogMonitorEntryList"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

// eslint-disable-next-line @typescript-eslint/unbound-method
var toggleAction = _core.ActionCreators.toggleAction,
    setActionsActive = _core.ActionCreators.setActionsActive;
var styles = {
  container: {
    fontFamily: 'monaco, Consolas, Lucida Console, monospace',
    position: 'relative',
    overflowY: 'hidden',
    width: '100%',
    height: '100%',
    minWidth: 300,
    direction: 'ltr'
  },
  elements: {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    overflowX: 'hidden',
    overflowY: 'auto'
  }
};

var LogMonitor = /*#__PURE__*/function (_PureComponent) {
  (0, _inherits2.default)(LogMonitor, _PureComponent);

  var _super = _createSuper(LogMonitor);

  function LogMonitor() {
    var _this;

    (0, _classCallCheck2.default)(this, LogMonitor);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateScrollTop", (0, _lodash.default)(function () {
      var node = _this.node;

      _this.props.dispatch((0, _actions.updateScrollTop)(node ? node.scrollTop : 0));
    }, 500));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleToggleAction", function (id) {
      _this.props.dispatch(toggleAction(id));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleToggleConsecutiveAction", function (id) {
      var _this$props = _this.props,
          monitorState = _this$props.monitorState,
          actionsById = _this$props.actionsById;
      var consecutiveToggleStartId = monitorState.consecutiveToggleStartId;

      if (consecutiveToggleStartId && actionsById[consecutiveToggleStartId]) {
        var skippedActionIds = _this.props.skippedActionIds;
        var start = Math.min(consecutiveToggleStartId, id);
        var end = Math.max(consecutiveToggleStartId, id);
        var active = skippedActionIds.indexOf(consecutiveToggleStartId) > -1;

        _this.props.dispatch(setActionsActive(start, end + 1, active));

        _this.props.dispatch((0, _actions.startConsecutiveToggle)(null));
      } else if (id > 0) {
        _this.props.dispatch((0, _actions.startConsecutiveToggle)(id));
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getRef", function (node) {
      _this.node = node;
    });
    return _this;
  }

  (0, _createClass2.default)(LogMonitor, [{
    key: "scroll",
    value: function scroll() {
      var node = this.node;

      if (!node) {
        return;
      }

      if (this.scrollDown) {
        var offsetHeight = node.offsetHeight,
            scrollHeight = node.scrollHeight;
        node.scrollTop = scrollHeight - offsetHeight;
        this.scrollDown = false;
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var node = this.node;

      if (!node || !this.props.monitorState) {
        return;
      }

      if (this.props.preserveScrollTop) {
        node.scrollTop = this.props.monitorState.initialScrollTop;
        node.addEventListener('scroll', this.updateScrollTop);
      } else {
        this.scrollDown = true;
        this.scroll();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var node = this.node;

      if (node && this.props.preserveScrollTop) {
        node.removeEventListener('scroll', this.updateScrollTop);
      }
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var node = this.node;

      if (!node) {
        this.scrollDown = true;
      } else if (this.props.stagedActionIds.length < nextProps.stagedActionIds.length) {
        var scrollTop = node.scrollTop,
            offsetHeight = node.offsetHeight,
            scrollHeight = node.scrollHeight;
        this.scrollDown = Math.abs(scrollHeight - (scrollTop + offsetHeight)) < 20;
      } else {
        this.scrollDown = false;
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.scroll();
    }
  }, {
    key: "getTheme",
    value: function getTheme() {
      var theme = this.props.theme;

      if (typeof theme !== 'string') {
        return theme;
      }

      if (typeof themes[theme] !== 'undefined') {
        return themes[theme];
      } // eslint-disable-next-line no-console


      console.warn('DevTools theme ' + theme + ' not found, defaulting to nicinabox');
      return themes.nicinabox;
    }
  }, {
    key: "render",
    value: function render() {
      var theme = this.getTheme();
      var consecutiveToggleStartId = this.props.monitorState.consecutiveToggleStartId;
      var _this$props2 = this.props,
          dispatch = _this$props2.dispatch,
          actionsById = _this$props2.actionsById,
          skippedActionIds = _this$props2.skippedActionIds,
          stagedActionIds = _this$props2.stagedActionIds,
          computedStates = _this$props2.computedStates,
          currentStateIndex = _this$props2.currentStateIndex,
          select = _this$props2.select,
          expandActionRoot = _this$props2.expandActionRoot,
          expandStateRoot = _this$props2.expandStateRoot,
          markStateDiff = _this$props2.markStateDiff;
      var entryListProps = {
        theme: theme,
        actionsById: actionsById,
        skippedActionIds: skippedActionIds,
        stagedActionIds: stagedActionIds,
        computedStates: computedStates,
        currentStateIndex: currentStateIndex,
        consecutiveToggleStartId: consecutiveToggleStartId,
        select: select,
        expandActionRoot: expandActionRoot,
        expandStateRoot: expandStateRoot,
        markStateDiff: markStateDiff,
        onActionClick: this.handleToggleAction,
        onActionShiftClick: this.handleToggleConsecutiveAction
      };
      return /*#__PURE__*/_react.default.createElement("div", {
        style: _objectSpread(_objectSpread({}, styles.container), {}, {
          backgroundColor: theme.base00
        })
      }, !this.props.hideMainButtons && /*#__PURE__*/_react.default.createElement(_LogMonitorButtonBar.default, {
        theme: theme,
        dispatch: dispatch,
        hasStates: computedStates.length > 1,
        hasSkippedActions: skippedActionIds.length > 0
      }), /*#__PURE__*/_react.default.createElement("div", {
        style: this.props.hideMainButtons ? styles.elements : _objectSpread(_objectSpread({}, styles.elements), {}, {
          top: 30
        }),
        ref: this.getRef
      }, /*#__PURE__*/_react.default.createElement(_LogMonitorEntryList.default, entryListProps)));
    }
  }]);
  return LogMonitor;
}(_react.PureComponent);

(0, _defineProperty2.default)(LogMonitor, "update", _reducers.default);
(0, _defineProperty2.default)(LogMonitor, "propTypes", {
  dispatch: _propTypes.default.func,
  computedStates: _propTypes.default.array,
  actionsById: _propTypes.default.object,
  stagedActionIds: _propTypes.default.array,
  skippedActionIds: _propTypes.default.array,
  monitorState: _propTypes.default.shape({
    initialScrollTop: _propTypes.default.number,
    consecutiveToggleStartId: _propTypes.default.number
  }),
  preserveScrollTop: _propTypes.default.bool,
  select: _propTypes.default.func,
  theme: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string]),
  expandActionRoot: _propTypes.default.bool,
  expandStateRoot: _propTypes.default.bool,
  markStateDiff: _propTypes.default.bool,
  hideMainButtons: _propTypes.default.bool
});
(0, _defineProperty2.default)(LogMonitor, "defaultProps", {
  select: function select(state) {
    return state;
  },
  theme: 'nicinabox',
  preserveScrollTop: true,
  expandActionRoot: true,
  expandStateRoot: true,
  markStateDiff: false
});
var _default = LogMonitor;
exports.default = _default;