import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
import brighten from './brighten';
var styles = {
  base: {
    cursor: 'pointer',
    fontWeight: 'bold',
    borderRadius: 3,
    padding: 4,
    marginLeft: 3,
    marginRight: 3,
    marginTop: 5,
    marginBottom: 5,
    flexGrow: 1,
    display: 'inline-block',
    fontSize: '0.8em',
    color: 'white',
    textDecoration: 'none'
  }
};

var LogMonitorButton = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(LogMonitorButton, _React$PureComponent);

  var _super = _createSuper(LogMonitorButton);

  function LogMonitorButton() {
    var _this;

    _classCallCheck(this, LogMonitorButton);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      hovered: false,
      active: false
    });

    _defineProperty(_assertThisInitialized(_this), "handleMouseEnter", function () {
      _this.setState({
        hovered: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleMouseLeave", function () {
      _this.setState({
        hovered: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleMouseDown", function () {
      _this.setState({
        active: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleMouseUp", function () {
      _this.setState({
        active: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onClick", function () {
      if (!_this.props.enabled) {
        return;
      }

      if (_this.props.onClick) {
        _this.props.onClick();
      }
    });

    return _this;
  }

  _createClass(LogMonitorButton, [{
    key: "render",
    value: function render() {
      var style = _objectSpread(_objectSpread({}, styles.base), {}, {
        backgroundColor: this.props.theme.base02
      });

      if (this.props.enabled && this.state.hovered) {
        style = _objectSpread(_objectSpread({}, style), {}, {
          backgroundColor: brighten(this.props.theme.base02, 0.2)
        });
      }

      if (!this.props.enabled) {
        style = _objectSpread(_objectSpread({}, style), {}, {
          opacity: 0.2,
          cursor: 'text',
          backgroundColor: 'transparent'
        });
      }

      return /*#__PURE__*/React.createElement("a", {
        onMouseEnter: this.handleMouseEnter,
        onMouseLeave: this.handleMouseLeave,
        onMouseDown: this.handleMouseDown,
        onMouseUp: this.handleMouseUp,
        onClick: this.onClick,
        style: style
      }, this.props.children);
    }
  }]);

  return LogMonitorButton;
}(React.PureComponent);

export { LogMonitorButton as default };