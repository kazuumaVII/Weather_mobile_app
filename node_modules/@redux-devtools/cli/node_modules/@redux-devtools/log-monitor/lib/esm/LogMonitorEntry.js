import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { JSONTree } from 'react-json-tree';
import LogMonitorEntryAction from './LogMonitorEntryAction';
var styles = {
  entry: {
    display: 'block',
    WebkitUserSelect: 'none'
  },
  root: {
    marginLeft: 0
  }
};

var getDeepItem = function getDeepItem(data, path) {
  return path.reduce(function (obj, key) {
    return obj && obj[key];
  }, data);
};

var dataIsEqual = function dataIsEqual(data, previousData, keyPath) {
  var path = _toConsumableArray(keyPath).reverse().slice(1);

  return getDeepItem(data, path) === getDeepItem(previousData, path);
};

var LogMonitorEntry = /*#__PURE__*/function (_PureComponent) {
  _inherits(LogMonitorEntry, _PureComponent);

  var _super = _createSuper(LogMonitorEntry);

  function LogMonitorEntry() {
    var _this;

    _classCallCheck(this, LogMonitorEntry);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "handleActionClick", function (e) {
      var _this$props = _this.props,
          actionId = _this$props.actionId,
          onActionClick = _this$props.onActionClick,
          onActionShiftClick = _this$props.onActionShiftClick;

      if (actionId > 0) {
        if (e.shiftKey) {
          onActionShiftClick(actionId);
        } else {
          onActionClick(actionId);
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "shouldExpandNode", function (keyPath, data, level) {
      return _this.props.expandStateRoot && level === 0;
    });

    return _this;
  }

  _createClass(LogMonitorEntry, [{
    key: "printState",
    value: function printState(state, error) {
      var _this2 = this;

      var errorText = error;

      if (!errorText) {
        try {
          var data = this.props.select(state);
          var theme;

          if (this.props.markStateDiff) {
            var previousData = typeof this.props.previousState !== 'undefined' ? this.props.select(this.props.previousState) : undefined;

            var getValueStyle = function getValueStyle(_ref, nodeType, keyPath) {
              var style = _ref.style;
              return {
                style: _objectSpread(_objectSpread({}, style), {}, {
                  backgroundColor: dataIsEqual(data, previousData, keyPath) ? 'transparent' : _this2.props.theme.base01
                })
              };
            };

            var getNestedNodeStyle = function getNestedNodeStyle(_ref2, keyPath) {
              var style = _ref2.style;
              return {
                style: _objectSpread(_objectSpread({}, style), keyPath.length > 1 ? {} : styles.root)
              };
            };

            theme = {
              extend: this.props.theme,
              value: getValueStyle,
              nestedNode: getNestedNodeStyle
            };
          } else {
            theme = this.props.theme;
          }

          return /*#__PURE__*/React.createElement(JSONTree, {
            theme: theme,
            data: data,
            invertTheme: false,
            keyPath: ['state'],
            shouldExpandNode: this.shouldExpandNode
          });
        } catch (err) {
          errorText = 'Error selecting state.';
        }
      }

      return /*#__PURE__*/React.createElement("div", {
        style: {
          color: this.props.theme.base08,
          paddingTop: 20,
          paddingLeft: 30,
          paddingRight: 30,
          paddingBottom: 35
        }
      }, errorText);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          actionId = _this$props2.actionId,
          error = _this$props2.error,
          action = _this$props2.action,
          state = _this$props2.state,
          collapsed = _this$props2.collapsed,
          selected = _this$props2.selected,
          inFuture = _this$props2.inFuture;
      var styleEntry = {
        opacity: collapsed ? 0.5 : 1,
        cursor: actionId > 0 ? 'pointer' : 'default'
      };
      return /*#__PURE__*/React.createElement("div", {
        style: {
          opacity: selected ? 0.4 : inFuture ? 0.6 : 1,
          // eslint-disable-line no-nested-ternary
          textDecoration: collapsed ? 'line-through' : 'none',
          color: this.props.theme.base06
        }
      }, /*#__PURE__*/React.createElement(LogMonitorEntryAction, {
        theme: this.props.theme,
        collapsed: collapsed,
        action: action,
        expandActionRoot: this.props.expandActionRoot,
        onClick: this.handleActionClick,
        style: _objectSpread(_objectSpread({}, styles.entry), styleEntry)
      }), !collapsed && /*#__PURE__*/React.createElement("div", {
        style: {
          paddingLeft: 16
        }
      }, this.printState(state, error)));
    }
  }]);

  return LogMonitorEntry;
}(PureComponent);

_defineProperty(LogMonitorEntry, "propTypes", {
  state: PropTypes.object.isRequired,
  action: PropTypes.object.isRequired,
  actionId: PropTypes.number.isRequired,
  select: PropTypes.func.isRequired,
  inFuture: PropTypes.bool,
  error: PropTypes.string,
  onActionClick: PropTypes.func.isRequired,
  onActionShiftClick: PropTypes.func.isRequired,
  collapsed: PropTypes.bool,
  selected: PropTypes.bool,
  expandActionRoot: PropTypes.bool,
  expandStateRoot: PropTypes.bool,
  previousState: PropTypes.object
});

export { LogMonitorEntry as default };