import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import * as themes from 'redux-devtools-themes';
import { ActionCreators } from '@redux-devtools/core';
import debounce from 'lodash.debounce';
import { updateScrollTop, startConsecutiveToggle } from './actions';
import reducer from './reducers';
import LogMonitorButtonBar from './LogMonitorButtonBar';
import LogMonitorEntryList from './LogMonitorEntryList'; // eslint-disable-next-line @typescript-eslint/unbound-method

var toggleAction = ActionCreators.toggleAction,
    setActionsActive = ActionCreators.setActionsActive;
var styles = {
  container: {
    fontFamily: 'monaco, Consolas, Lucida Console, monospace',
    position: 'relative',
    overflowY: 'hidden',
    width: '100%',
    height: '100%',
    minWidth: 300,
    direction: 'ltr'
  },
  elements: {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    overflowX: 'hidden',
    overflowY: 'auto'
  }
};

var LogMonitor = /*#__PURE__*/function (_PureComponent) {
  _inherits(LogMonitor, _PureComponent);

  var _super = _createSuper(LogMonitor);

  function LogMonitor() {
    var _this;

    _classCallCheck(this, LogMonitor);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "updateScrollTop", debounce(function () {
      var node = _this.node;

      _this.props.dispatch(updateScrollTop(node ? node.scrollTop : 0));
    }, 500));

    _defineProperty(_assertThisInitialized(_this), "handleToggleAction", function (id) {
      _this.props.dispatch(toggleAction(id));
    });

    _defineProperty(_assertThisInitialized(_this), "handleToggleConsecutiveAction", function (id) {
      var _this$props = _this.props,
          monitorState = _this$props.monitorState,
          actionsById = _this$props.actionsById;
      var consecutiveToggleStartId = monitorState.consecutiveToggleStartId;

      if (consecutiveToggleStartId && actionsById[consecutiveToggleStartId]) {
        var skippedActionIds = _this.props.skippedActionIds;
        var start = Math.min(consecutiveToggleStartId, id);
        var end = Math.max(consecutiveToggleStartId, id);
        var active = skippedActionIds.indexOf(consecutiveToggleStartId) > -1;

        _this.props.dispatch(setActionsActive(start, end + 1, active));

        _this.props.dispatch(startConsecutiveToggle(null));
      } else if (id > 0) {
        _this.props.dispatch(startConsecutiveToggle(id));
      }
    });

    _defineProperty(_assertThisInitialized(_this), "getRef", function (node) {
      _this.node = node;
    });

    return _this;
  }

  _createClass(LogMonitor, [{
    key: "scroll",
    value: function scroll() {
      var node = this.node;

      if (!node) {
        return;
      }

      if (this.scrollDown) {
        var offsetHeight = node.offsetHeight,
            scrollHeight = node.scrollHeight;
        node.scrollTop = scrollHeight - offsetHeight;
        this.scrollDown = false;
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var node = this.node;

      if (!node || !this.props.monitorState) {
        return;
      }

      if (this.props.preserveScrollTop) {
        node.scrollTop = this.props.monitorState.initialScrollTop;
        node.addEventListener('scroll', this.updateScrollTop);
      } else {
        this.scrollDown = true;
        this.scroll();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var node = this.node;

      if (node && this.props.preserveScrollTop) {
        node.removeEventListener('scroll', this.updateScrollTop);
      }
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var node = this.node;

      if (!node) {
        this.scrollDown = true;
      } else if (this.props.stagedActionIds.length < nextProps.stagedActionIds.length) {
        var scrollTop = node.scrollTop,
            offsetHeight = node.offsetHeight,
            scrollHeight = node.scrollHeight;
        this.scrollDown = Math.abs(scrollHeight - (scrollTop + offsetHeight)) < 20;
      } else {
        this.scrollDown = false;
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.scroll();
    }
  }, {
    key: "getTheme",
    value: function getTheme() {
      var theme = this.props.theme;

      if (typeof theme !== 'string') {
        return theme;
      }

      if (typeof themes[theme] !== 'undefined') {
        return themes[theme];
      } // eslint-disable-next-line no-console


      console.warn('DevTools theme ' + theme + ' not found, defaulting to nicinabox');
      return themes.nicinabox;
    }
  }, {
    key: "render",
    value: function render() {
      var theme = this.getTheme();
      var consecutiveToggleStartId = this.props.monitorState.consecutiveToggleStartId;
      var _this$props2 = this.props,
          dispatch = _this$props2.dispatch,
          actionsById = _this$props2.actionsById,
          skippedActionIds = _this$props2.skippedActionIds,
          stagedActionIds = _this$props2.stagedActionIds,
          computedStates = _this$props2.computedStates,
          currentStateIndex = _this$props2.currentStateIndex,
          select = _this$props2.select,
          expandActionRoot = _this$props2.expandActionRoot,
          expandStateRoot = _this$props2.expandStateRoot,
          markStateDiff = _this$props2.markStateDiff;
      var entryListProps = {
        theme: theme,
        actionsById: actionsById,
        skippedActionIds: skippedActionIds,
        stagedActionIds: stagedActionIds,
        computedStates: computedStates,
        currentStateIndex: currentStateIndex,
        consecutiveToggleStartId: consecutiveToggleStartId,
        select: select,
        expandActionRoot: expandActionRoot,
        expandStateRoot: expandStateRoot,
        markStateDiff: markStateDiff,
        onActionClick: this.handleToggleAction,
        onActionShiftClick: this.handleToggleConsecutiveAction
      };
      return /*#__PURE__*/React.createElement("div", {
        style: _objectSpread(_objectSpread({}, styles.container), {}, {
          backgroundColor: theme.base00
        })
      }, !this.props.hideMainButtons && /*#__PURE__*/React.createElement(LogMonitorButtonBar, {
        theme: theme,
        dispatch: dispatch,
        hasStates: computedStates.length > 1,
        hasSkippedActions: skippedActionIds.length > 0
      }), /*#__PURE__*/React.createElement("div", {
        style: this.props.hideMainButtons ? styles.elements : _objectSpread(_objectSpread({}, styles.elements), {}, {
          top: 30
        }),
        ref: this.getRef
      }, /*#__PURE__*/React.createElement(LogMonitorEntryList, entryListProps)));
    }
  }]);

  return LogMonitor;
}(PureComponent);

_defineProperty(LogMonitor, "update", reducer);

_defineProperty(LogMonitor, "propTypes", {
  dispatch: PropTypes.func,
  computedStates: PropTypes.array,
  actionsById: PropTypes.object,
  stagedActionIds: PropTypes.array,
  skippedActionIds: PropTypes.array,
  monitorState: PropTypes.shape({
    initialScrollTop: PropTypes.number,
    consecutiveToggleStartId: PropTypes.number
  }),
  preserveScrollTop: PropTypes.bool,
  select: PropTypes.func,
  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
  expandActionRoot: PropTypes.bool,
  expandStateRoot: PropTypes.bool,
  markStateDiff: PropTypes.bool,
  hideMainButtons: PropTypes.bool
});

_defineProperty(LogMonitor, "defaultProps", {
  select: function select(state) {
    return state;
  },
  theme: 'nicinabox',
  preserveScrollTop: true,
  expandActionRoot: true,
  expandStateRoot: true,
  markStateDiff: false
});

export default LogMonitor;