import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import LogMonitorEntry from './LogMonitorEntry';

var LogMonitorEntryList = /*#__PURE__*/function (_PureComponent) {
  _inherits(LogMonitorEntryList, _PureComponent);

  var _super = _createSuper(LogMonitorEntryList);

  function LogMonitorEntryList() {
    _classCallCheck(this, LogMonitorEntryList);

    return _super.apply(this, arguments);
  }

  _createClass(LogMonitorEntryList, [{
    key: "render",
    value: function render() {
      var elements = [];
      var _this$props = this.props,
          theme = _this$props.theme,
          actionsById = _this$props.actionsById,
          computedStates = _this$props.computedStates,
          currentStateIndex = _this$props.currentStateIndex,
          consecutiveToggleStartId = _this$props.consecutiveToggleStartId,
          select = _this$props.select,
          skippedActionIds = _this$props.skippedActionIds,
          stagedActionIds = _this$props.stagedActionIds,
          expandActionRoot = _this$props.expandActionRoot,
          expandStateRoot = _this$props.expandStateRoot,
          markStateDiff = _this$props.markStateDiff,
          onActionClick = _this$props.onActionClick,
          onActionShiftClick = _this$props.onActionShiftClick;

      for (var i = 0; i < stagedActionIds.length; i++) {
        var _actionId = stagedActionIds[i];
        var action = actionsById[_actionId].action;
        var _computedStates$i = computedStates[i],
            _state = _computedStates$i.state,
            error = _computedStates$i.error;
        var previousState = void 0;

        if (i > 0) {
          previousState = computedStates[i - 1].state;
        }

        elements.push( /*#__PURE__*/React.createElement(LogMonitorEntry, {
          key: _actionId,
          theme: theme,
          select: select,
          action: action,
          actionId: _actionId,
          state: _state,
          previousState: previousState,
          collapsed: skippedActionIds.indexOf(_actionId) > -1,
          inFuture: i > currentStateIndex,
          selected: consecutiveToggleStartId === i,
          error: error,
          expandActionRoot: expandActionRoot,
          expandStateRoot: expandStateRoot,
          markStateDiff: markStateDiff,
          onActionClick: onActionClick,
          onActionShiftClick: onActionShiftClick
        }));
      }

      return /*#__PURE__*/React.createElement("div", null, elements);
    }
  }]);

  return LogMonitorEntryList;
}(PureComponent);

_defineProperty(LogMonitorEntryList, "propTypes", {
  actionsById: PropTypes.object,
  computedStates: PropTypes.array,
  stagedActionIds: PropTypes.array,
  skippedActionIds: PropTypes.array,
  currentStateIndex: PropTypes.number,
  consecutiveToggleStartId: PropTypes.number,
  select: PropTypes.func.isRequired,
  onActionClick: PropTypes.func.isRequired,
  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
  expandActionRoot: PropTypes.bool,
  expandStateRoot: PropTypes.bool
});

export { LogMonitorEntryList as default };