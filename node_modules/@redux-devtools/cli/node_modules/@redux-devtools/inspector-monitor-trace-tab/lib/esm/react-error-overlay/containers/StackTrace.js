import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React, { Component } from 'react';
import StackFrame from './StackFrame';
import Collapsible from '../components/Collapsible';
import { isInternalFile } from '../utils/isInternalFile';
import { isBultinErrorName } from '../utils/isBultinErrorName';
var traceStyle = {
  fontSize: '1em',
  flex: '0 1 auto',
  minHeight: '0px',
  overflow: 'auto'
};

var StackTrace = /*#__PURE__*/function (_Component) {
  _inherits(StackTrace, _Component);

  var _super = _createSuper(StackTrace);

  function StackTrace() {
    _classCallCheck(this, StackTrace);

    return _super.apply(this, arguments);
  }

  _createClass(StackTrace, [{
    key: "renderFrames",
    value: function renderFrames() {
      var _this$props = this.props,
          stackFrames = _this$props.stackFrames,
          errorName = _this$props.errorName,
          contextSize = _this$props.contextSize,
          editorHandler = _this$props.editorHandler;
      var renderedFrames = [];
      var hasReachedAppCode = false,
          currentBundle = [],
          bundleCount = 0,
          anyNodeExpanded = false;
      stackFrames.forEach(function (frame, index) {
        var fileName = frame.fileName,
            sourceFileName = frame._originalFileName;
        var isInternalUrl = isInternalFile(sourceFileName, fileName);
        var isThrownIntentionally = !isBultinErrorName(errorName);
        var shouldCollapse = isInternalUrl && (isThrownIntentionally || hasReachedAppCode);

        if (!shouldCollapse) {
          anyNodeExpanded = true;
        }

        if (!isInternalUrl) {
          hasReachedAppCode = true;
        }

        var frameEle = /*#__PURE__*/React.createElement(StackFrame, {
          key: "frame-".concat(index),
          frame: frame,
          contextSize: contextSize,
          critical: index === 0,
          showCode: !shouldCollapse,
          editorHandler: editorHandler
        });
        var lastElement = index === stackFrames.length - 1;

        if (shouldCollapse) {
          currentBundle.push(frameEle);
        }

        if (!shouldCollapse || lastElement) {
          if (currentBundle.length === 1) {
            renderedFrames.push(currentBundle[0]);
          } else if (currentBundle.length > 1) {
            bundleCount++;
            renderedFrames.push( /*#__PURE__*/React.createElement(Collapsible, {
              collapsedByDefault: anyNodeExpanded,
              key: "bundle-".concat(bundleCount)
            }, currentBundle));
          }

          currentBundle = [];
        }

        if (!shouldCollapse) {
          renderedFrames.push(frameEle);
        }
      });
      return renderedFrames;
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement("div", {
        "data-testid": "stack-trace",
        style: traceStyle
      }, this.renderFrames());
    }
  }]);

  return StackTrace;
}(Component);

export default StackTrace;