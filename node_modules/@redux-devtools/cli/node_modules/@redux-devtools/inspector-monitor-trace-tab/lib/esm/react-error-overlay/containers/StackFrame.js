import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React, { Component } from 'react';
import CodeBlock from './StackFrameCodeBlock';
import { getPrettyURL } from '../utils/getPrettyURL';
import { nicinabox as theme } from 'redux-devtools-themes';
var linkStyle = {
  fontSize: '0.9em',
  marginBottom: '0.9em'
};
var anchorStyle = {
  textDecoration: 'none',
  color: theme.base05,
  cursor: 'pointer'
};
var codeAnchorStyle = {
  cursor: 'pointer'
};
var toggleStyle = {
  marginBottom: '1.5em',
  color: theme.base05,
  cursor: 'pointer',
  border: 'none',
  display: 'block',
  width: '100%',
  textAlign: 'left',
  background: 'transparent',
  fontFamily: 'Consolas, Menlo, monospace',
  fontSize: '1em',
  padding: '0px',
  lineHeight: '1.5'
};

var StackFrame = /*#__PURE__*/function (_Component) {
  _inherits(StackFrame, _Component);

  var _super = _createSuper(StackFrame);

  function StackFrame() {
    var _this;

    _classCallCheck(this, StackFrame);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      compiled: false
    });

    _defineProperty(_assertThisInitialized(_this), "toggleCompiled", function () {
      _this.setState(function (state) {
        return {
          compiled: !state.compiled
        };
      });
    });

    _defineProperty(_assertThisInitialized(_this), "editorHandler", function () {
      var errorLoc = _this.getErrorLocation();

      if (!errorLoc) {
        return;
      }

      _this.props.editorHandler(errorLoc);
    });

    _defineProperty(_assertThisInitialized(_this), "onKeyDown", function (e
    /* : SyntheticKeyboardEvent<> */
    ) {
      if (e.key === 'Enter') {
        _this.editorHandler();
      }
    });

    return _this;
  }

  _createClass(StackFrame, [{
    key: "getErrorLocation",
    value: function getErrorLocation() {
      var _this$props$frame = this.props.frame,
          fileName = _this$props$frame._originalFileName,
          lineNumber = _this$props$frame._originalLineNumber; // Unknown file

      if (!fileName) {
        return null;
      } // e.g. "/path-to-my-app/webpack/bootstrap eaddeb46b67d75e4dfc1"


      var isInternalWebpackBootstrapCode = fileName.trim().indexOf(' ') !== -1;

      if (isInternalWebpackBootstrapCode) {
        return null;
      } // Code is in a real file


      return {
        fileName: fileName,
        lineNumber: lineNumber || 1
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          frame = _this$props.frame,
          contextSize = _this$props.contextSize,
          critical = _this$props.critical,
          showCode = _this$props.showCode;
      var fileName = frame.fileName,
          lineNumber = frame.lineNumber,
          columnNumber = frame.columnNumber,
          scriptLines = frame._scriptCode,
          sourceFileName = frame._originalFileName,
          sourceLineNumber = frame._originalLineNumber,
          sourceColumnNumber = frame._originalColumnNumber,
          sourceLines = frame._originalScriptCode;
      var functionName = frame.getFunctionName();
      var compiled = this.state.compiled;
      var url = getPrettyURL(sourceFileName, sourceLineNumber, sourceColumnNumber, fileName, lineNumber, columnNumber, compiled);
      var codeBlockProps = null;

      if (showCode) {
        if (compiled && scriptLines && scriptLines.length !== 0 && lineNumber != null) {
          codeBlockProps = {
            lines: scriptLines,
            lineNum: lineNumber,
            columnNum: columnNumber,
            contextSize: contextSize,
            main: critical
          };
        } else if (!compiled && sourceLines && sourceLines.length !== 0 && sourceLineNumber != null) {
          codeBlockProps = {
            lines: sourceLines,
            lineNum: sourceLineNumber,
            columnNum: sourceColumnNumber,
            contextSize: contextSize,
            main: critical
          };
        }
      }

      var canOpenInEditor = this.getErrorLocation() !== null && this.props.editorHandler !== null;
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", null, functionName), /*#__PURE__*/React.createElement("div", {
        style: linkStyle
      }, /*#__PURE__*/React.createElement("span", {
        style: canOpenInEditor ? anchorStyle : undefined,
        onClick: canOpenInEditor ? this.editorHandler : undefined,
        onKeyDown: canOpenInEditor ? this.onKeyDown : undefined,
        tabIndex: canOpenInEditor ? 0 : undefined
      }, url)), codeBlockProps && /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("span", {
        onClick: canOpenInEditor ? this.editorHandler : undefined,
        style: canOpenInEditor ? codeAnchorStyle : undefined
      }, /*#__PURE__*/React.createElement(CodeBlock, codeBlockProps)), /*#__PURE__*/React.createElement("button", {
        style: toggleStyle,
        onClick: this.toggleCompiled
      }, 'View ' + (compiled ? 'source' : 'compiled'))));
    }
  }]);

  return StackFrame;
}(Component);

export default StackFrame;