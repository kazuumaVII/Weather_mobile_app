"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Themes = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _ui = require("@redux-devtools/ui");

var _actions = require("../../actions");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var Themes = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(Themes, _Component);

  var _super = _createSuper(Themes);

  function Themes() {
    (0, _classCallCheck2.default)(this, Themes);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(Themes, [{
    key: "render",
    value: function render() {
      var theme = this.props.theme;
      var formData = {
        theme: theme.theme,
        scheme: theme.scheme,
        colorPreference: theme.colorPreference
      };
      return /*#__PURE__*/_react.default.createElement(_ui.Container, null, /*#__PURE__*/_react.default.createElement(_ui.Form, {
        schema: {
          type: 'object',
          properties: {
            theme: {
              type: 'string',
              enum: (0, _ui.listThemes)()
            },
            scheme: {
              title: 'color scheme',
              type: 'string',
              enum: (0, _ui.listSchemes)()
            },
            colorPreference: {
              title: 'theme color',
              type: 'string',
              enum: ['auto', 'light', 'dark']
            }
          }
        },
        formData: formData,
        noSubmit: true,
        onChange: this.props.changeTheme
      }));
    }
  }]);
  return Themes;
}(_react.Component);

exports.Themes = Themes;

var mapStateToProps = function mapStateToProps(state) {
  return {
    theme: state.theme
  };
};

var actionCreators = {
  changeTheme: _actions.changeTheme
};

var _default = (0, _reactRedux.connect)(mapStateToProps, actionCreators)(Themes);

exports.default = _default;