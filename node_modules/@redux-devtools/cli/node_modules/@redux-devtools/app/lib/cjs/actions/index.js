"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.changeSection = changeSection;
exports.changeTheme = changeTheme;
exports.clearNotification = clearNotification;
exports.dispatchRemotely = dispatchRemotely;
exports.exportState = exportState;
exports.getReport = getReport;
exports.importState = importState;
exports.liftedDispatch = liftedDispatch;
exports.lockChanges = lockChanges;
exports.pauseRecording = pauseRecording;
exports.saveSocketSettings = saveSocketSettings;
exports.selectInstance = selectInstance;
exports.selectMonitor = selectMonitor;
exports.selectMonitorTab = selectMonitorTab;
exports.selectMonitorWithState = selectMonitorWithState;
exports.setPersist = setPersist;
exports.showNotification = showNotification;
exports.toggleDispatcher = toggleDispatcher;
exports.togglePersist = togglePersist;
exports.toggleSlider = toggleSlider;
exports.toggleSync = toggleSync;
exports.updateMonitorState = updateMonitorState;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _actionTypes = require("../constants/actionTypes");

var _socketActionTypes = require("../constants/socketActionTypes");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var monitorReducer;
var monitorProps = {};

function changeSection(section) {
  return {
    type: _actionTypes.CHANGE_SECTION,
    section: section
  };
}

function changeTheme(data) {
  return _objectSpread({
    type: _actionTypes.CHANGE_THEME
  }, data.formData);
}

function liftedDispatch(action) {
  if (action.type[0] === '@') {
    if (action.type === '@@INIT_MONITOR') {
      monitorReducer = action.update;
      monitorProps = action.monitorProps;
    }

    return {
      type: _actionTypes.MONITOR_ACTION,
      action: action,
      monitorReducer: monitorReducer,
      monitorProps: monitorProps
    };
  }

  return {
    type: _actionTypes.LIFTED_ACTION,
    message: 'DISPATCH',
    action: action
  };
}

function selectInstance(selected) {
  return {
    type: _actionTypes.SELECT_INSTANCE,
    selected: selected
  };
}

function selectMonitor(monitor) {
  return {
    type: _actionTypes.SELECT_MONITOR,
    monitor: monitor
  };
}

function selectMonitorWithState(value, monitorState) {
  return {
    type: _actionTypes.SELECT_MONITOR,
    monitor: value,
    monitorState: monitorState
  };
}

function selectMonitorTab(subTabName) {
  return {
    type: _actionTypes.UPDATE_MONITOR_STATE,
    nextState: {
      subTabName: subTabName
    }
  };
}

function updateMonitorState(nextState) {
  return {
    type: _actionTypes.UPDATE_MONITOR_STATE,
    nextState: nextState
  };
}

function importState(state, preloadedState) {
  return {
    type: _actionTypes.LIFTED_ACTION,
    message: 'IMPORT',
    state: state,
    preloadedState: preloadedState
  };
}

function exportState() {
  return {
    type: _actionTypes.EXPORT
  };
}

function lockChanges(status) {
  return {
    type: _actionTypes.LIFTED_ACTION,
    message: 'DISPATCH',
    action: {
      type: 'LOCK_CHANGES',
      status: status
    },
    toAll: true
  };
}

function pauseRecording(status) {
  return {
    type: _actionTypes.LIFTED_ACTION,
    message: 'DISPATCH',
    action: {
      type: 'PAUSE_RECORDING',
      status: status
    },
    toAll: true
  };
}

function dispatchRemotely(action) {
  return {
    type: _actionTypes.LIFTED_ACTION,
    message: 'ACTION',
    action: action
  };
}

function togglePersist() {
  return {
    type: _actionTypes.TOGGLE_PERSIST
  };
}

function setPersist(persist) {
  return {
    type: _actionTypes.SET_PERSIST,
    payload: persist
  };
}

function toggleSync() {
  return {
    type: _actionTypes.TOGGLE_SYNC
  };
}

function toggleSlider() {
  return {
    type: _actionTypes.TOGGLE_SLIDER
  };
}

function toggleDispatcher() {
  return {
    type: _actionTypes.TOGGLE_DISPATCHER
  };
}

function saveSocketSettings(options) {
  return {
    type: _socketActionTypes.RECONNECT,
    options: options
  };
}

function showNotification(message) {
  return {
    type: _actionTypes.SHOW_NOTIFICATION,
    notification: {
      type: 'error',
      message: message
    }
  };
}

function clearNotification() {
  return {
    type: _actionTypes.CLEAR_NOTIFICATION
  };
}

function getReport(report) {
  return {
    type: _actionTypes.GET_REPORT_REQUEST,
    report: report
  };
}