"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringifyJSON = stringifyJSON;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _jsan = _interopRequireDefault(require("jsan"));

var _dataTypes = require("../constants/dataTypes");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function replacer(key, value) {
  if ((0, _typeof2.default)(value) === 'object' && value !== null && _dataTypes.DATA_TYPE_KEY in value) {
    var __serializedType__ = value[_dataTypes.DATA_TYPE_KEY];

    var clone = _objectSpread({}, value);

    delete clone[_dataTypes.DATA_TYPE_KEY]; // eslint-disable-line no-param-reassign

    var r = {
      data: clone,
      __serializedType__: __serializedType__
    };
    if (_dataTypes.DATA_REF_KEY in value) r.__serializedRef__ = clone[_dataTypes.DATA_REF_KEY];
    return r;
  }

  return value;
}

function stringifyJSON(data, serialize) {
  return serialize ? _jsan.default.stringify(data, replacer, null, true) : _jsan.default.stringify(data);
}