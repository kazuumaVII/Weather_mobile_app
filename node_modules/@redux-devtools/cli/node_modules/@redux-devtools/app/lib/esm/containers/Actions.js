import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import { connect } from 'react-redux';
import { Container } from '@redux-devtools/ui';
import SliderMonitor from './monitors/Slider';
import { liftedDispatch, getReport } from '../actions';
import { getActiveInstance } from '../reducers/instances';
import DevTools from '../containers/DevTools';
import Dispatcher from './monitors/Dispatcher';
import TopButtons from '../components/TopButtons';
import BottomButtons from '../components/BottomButtons';

var Actions = /*#__PURE__*/function (_Component) {
  _inherits(Actions, _Component);

  var _super = _createSuper(Actions);

  function Actions() {
    _classCallCheck(this, Actions);

    return _super.apply(this, arguments);
  }

  _createClass(Actions, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          monitor = _this$props.monitor,
          dispatcherIsOpen = _this$props.dispatcherIsOpen,
          sliderIsOpen = _this$props.sliderIsOpen,
          options = _this$props.options,
          liftedState = _this$props.liftedState,
          liftedDispatch = _this$props.liftedDispatch;
      return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(TopButtons, {
        dispatch: liftedDispatch,
        liftedState: liftedState,
        options: options
      }), /*#__PURE__*/React.createElement(DevTools, {
        monitor: monitor,
        liftedState: liftedState,
        monitorState: this.props.monitorState,
        dispatch: liftedDispatch,
        features: options.features
      }), sliderIsOpen && options.connectionId && options.features.jump && /*#__PURE__*/React.createElement(SliderMonitor, {
        liftedState: liftedState,
        dispatch: liftedDispatch
      }), dispatcherIsOpen && options.connectionId && options.features.dispatch && /*#__PURE__*/React.createElement(Dispatcher, {
        options: options
      }), /*#__PURE__*/React.createElement(BottomButtons, {
        dispatcherIsOpen: dispatcherIsOpen,
        sliderIsOpen: sliderIsOpen,
        options: options
      }));
    }
  }]);

  return Actions;
}(Component);

var mapStateToProps = function mapStateToProps(state) {
  var instances = state.instances;
  var id = getActiveInstance(instances);
  return {
    liftedState: instances.states[id],
    monitorState: state.monitor.monitorState,
    options: instances.options[id],
    monitor: state.monitor.selected,
    dispatcherIsOpen: state.monitor.dispatcherIsOpen,
    sliderIsOpen: state.monitor.sliderIsOpen,
    reports: state.reports.data
  };
};

var actionCreators = {
  liftedDispatch: liftedDispatch,
  getReport: getReport
};
export default connect(mapStateToProps, actionCreators)(Actions);