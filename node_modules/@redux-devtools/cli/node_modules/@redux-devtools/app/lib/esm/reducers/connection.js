import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["type"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import { RECONNECT } from '../constants/socketActionTypes';
export function connection() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
    options: {
      hostname: 'localhost',
      port: 8000,
      secure: false
    },
    type: 'disabled'
  };
  var action = arguments.length > 1 ? arguments[1] : undefined;

  if (action.type === RECONNECT) {
    var _action$options = action.options,
        type = _action$options.type,
        options = _objectWithoutProperties(_action$options, _excluded);

    return _objectSpread(_objectSpread({}, state), {}, {
      type: type,
      options: options
    });
  }

  return state;
}