import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import { MONITOR_ACTION, SELECT_MONITOR, UPDATE_MONITOR_STATE, TOGGLE_SLIDER, TOGGLE_DISPATCHER } from '../constants/actionTypes';
var initialState = {
  selected: 'InspectorMonitor',
  monitorState: undefined,
  sliderIsOpen: true,
  dispatcherIsOpen: false
};
export function dispatchMonitorAction(state, action) {
  return _objectSpread(_objectSpread({}, state), {}, {
    monitorState: action.action.newMonitorState || action.monitorReducer(action.monitorProps, state.monitorState, action.action)
  });
}
export function monitor() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case MONITOR_ACTION:
      return dispatchMonitorAction(state, action);

    case SELECT_MONITOR:
      {
        var monitorState = state.monitorState;

        if (action.monitorState) {
          monitorState = _objectSpread(_objectSpread({}, action.monitorState), {}, {
            __overwritten__: action.monitor
          });
        }

        return _objectSpread(_objectSpread({}, state), {}, {
          monitorState: monitorState,
          selected: action.monitor
        });
      }

    case UPDATE_MONITOR_STATE:
      {
        var inspectedStatePath = state.monitorState.inspectedStatePath;

        if (action.nextState.inspectedStatePath) {
          inspectedStatePath = [].concat(_toConsumableArray(inspectedStatePath.slice(0, -1)), _toConsumableArray(action.nextState.inspectedStatePath));
        }

        return _objectSpread(_objectSpread({}, state), {}, {
          monitorState: _objectSpread(_objectSpread(_objectSpread({}, state.monitorState), action.nextState), {}, {
            inspectedStatePath: inspectedStatePath
          })
        });
      }

    case TOGGLE_SLIDER:
      return _objectSpread(_objectSpread({}, state), {}, {
        sliderIsOpen: !state.sliderIsOpen
      });

    case TOGGLE_DISPATCHER:
      return _objectSpread(_objectSpread({}, state), {}, {
        dispatcherIsOpen: !state.dispatcherIsOpen
      });

    default:
      return state;
  }
}