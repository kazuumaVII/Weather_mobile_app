import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import commitExcessActions from './commitExcessActions';
export function recompute(previousLiftedState, storeState, action) {
  var nextActionId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  var maxAge = arguments.length > 4 ? arguments[4] : undefined;
  var isExcess = arguments.length > 5 ? arguments[5] : undefined;
  var actionId = nextActionId - 1;

  var liftedState = _objectSpread({}, previousLiftedState);

  if (liftedState.currentStateIndex === liftedState.stagedActionIds.length - 1) {
    liftedState.currentStateIndex++;
  }

  liftedState.stagedActionIds = [].concat(_toConsumableArray(liftedState.stagedActionIds), [actionId]);
  liftedState.actionsById = _objectSpread({}, liftedState.actionsById);

  if (action.type === 'PERFORM_ACTION') {
    liftedState.actionsById[actionId] = action;
  } else {
    liftedState.actionsById[actionId] = {
      action: action.action || action,
      timestamp: action.timestamp || Date.now(),
      stack: action.stack,
      type: 'PERFORM_ACTION'
    };
  }

  liftedState.nextActionId = nextActionId;
  liftedState.computedStates = [].concat(_toConsumableArray(liftedState.computedStates), [{
    state: storeState
  }]);
  if (isExcess) commitExcessActions(liftedState);else if (maxAge) {
    var excess = liftedState.stagedActionIds.length - maxAge;
    if (excess > 0) commitExcessActions(liftedState, excess);
  }
  return liftedState;
}