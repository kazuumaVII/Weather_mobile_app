import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { ActionCreators } from '@redux-devtools/core';
import { Button, Toolbar, Divider } from '@redux-devtools/ui';
import RecordButton from './buttons/RecordButton';
import PersistButton from './buttons/PersistButton';
import LockButton from './buttons/LockButton';
import InstanceSelector from './InstanceSelector';
import SyncButton from './buttons/SyncButton';
// eslint-disable-next-line @typescript-eslint/unbound-method
var reset = ActionCreators.reset,
    rollback = ActionCreators.rollback,
    commit = ActionCreators.commit,
    sweep = ActionCreators.sweep;

var TopButtons = /*#__PURE__*/function (_Component) {
  _inherits(TopButtons, _Component);

  var _super = _createSuper(TopButtons);

  function TopButtons() {
    var _this;

    _classCallCheck(this, TopButtons);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "handleRollback", function () {
      _this.props.dispatch(rollback());
    });

    _defineProperty(_assertThisInitialized(_this), "handleSweep", function () {
      _this.props.dispatch(sweep());
    });

    _defineProperty(_assertThisInitialized(_this), "handleCommit", function () {
      _this.props.dispatch(commit());
    });

    _defineProperty(_assertThisInitialized(_this), "handleReset", function () {
      _this.props.dispatch(reset());
    });

    return _this;
  }

  _createClass(TopButtons, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return nextProps.options !== this.props.options || nextProps.liftedState !== this.props.liftedState;
    }
  }, {
    key: "render",
    value: function render() {
      var options = this.props.options;
      var features = options.features;
      var _this$props$liftedSta = this.props.liftedState,
          computedStates = _this$props$liftedSta.computedStates,
          skippedActionIds = _this$props$liftedSta.skippedActionIds,
          isPaused = _this$props$liftedSta.isPaused,
          isLocked = _this$props$liftedSta.isLocked;
      var noStates = computedStates.length < 2;
      return /*#__PURE__*/React.createElement(Toolbar, {
        borderPosition: "bottom"
      }, features.pause && /*#__PURE__*/React.createElement(RecordButton, {
        paused: isPaused
      }), features.persist && /*#__PURE__*/React.createElement(PersistButton, null), features.lock && /*#__PURE__*/React.createElement(LockButton, {
        locked: isLocked,
        disabled: options.lib !== 'redux'
      }), /*#__PURE__*/React.createElement(Divider, null), /*#__PURE__*/React.createElement(Button, {
        title: "Reset to the state you created the store with",
        tooltipPosition: "bottom",
        onClick: this.handleReset
      }, "Reset"), /*#__PURE__*/React.createElement(Button, {
        title: "Roll back to the last committed state",
        tooltipPosition: "bottom",
        onClick: this.handleRollback,
        disabled: noStates
      }, "Revert"), /*#__PURE__*/React.createElement(Button, {
        title: "Remove all currently disabled actions from the log",
        tooltipPosition: "bottom",
        onClick: this.handleSweep,
        disabled: skippedActionIds.length === 0
      }, "Sweep"), /*#__PURE__*/React.createElement(Button, {
        title: "Remove all actions from the log,\\a and make the current state your initial state",
        tooltipPosition: "bottom",
        onClick: this.handleCommit,
        disabled: noStates
      }, "Commit"), /*#__PURE__*/React.createElement(Divider, null), /*#__PURE__*/React.createElement(InstanceSelector, null), features.sync && /*#__PURE__*/React.createElement(SyncButton, null));
    }
  }]);

  return TopButtons;
}(Component);

_defineProperty(TopButtons, "propTypes", {
  // shouldSync: PropTypes.bool,
  liftedState: PropTypes.object.isRequired,
  dispatch: PropTypes.func.isRequired,
  options: PropTypes.object.isRequired
});

export { TopButtons as default };