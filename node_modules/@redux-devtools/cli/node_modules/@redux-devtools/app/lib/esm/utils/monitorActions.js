import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import difference from 'lodash/difference';
import omit from 'lodash/omit';
import { stringifyJSON } from './stringifyJSON';
import { SET_STATE } from '../constants/actionTypes';
export function sweep(state) {
  return _objectSpread(_objectSpread({}, state), {}, {
    actionsById: omit(state.actionsById, state.skippedActionIds),
    stagedActionIds: difference(state.stagedActionIds, state.skippedActionIds),
    skippedActionIds: [],
    currentStateIndex: Math.min(state.currentStateIndex, state.stagedActionIds.length - 1)
  });
}
export function nonReduxDispatch(store, message, instanceId, action, initialState, preInstances) {
  var instances = preInstances || store.getState().instances;
  var state = instances.states[instanceId];
  var options = instances.options[instanceId];

  if (message !== 'DISPATCH') {
    if (message === 'IMPORT') {
      if (options.features.import === true) {
        return stringifyJSON(state.computedStates[state.currentStateIndex].state, true);
      }

      return initialState;
    }

    return undefined;
  }

  if (options.lib === 'redux') return undefined;

  switch (action.type) {
    case 'TOGGLE_ACTION':
      return stringifyJSON(state, true);

    case 'JUMP_TO_STATE':
      return stringifyJSON(state.computedStates[action.index].state, true);

    case 'JUMP_TO_ACTION':
      return stringifyJSON(state.computedStates[state.stagedActionIds.indexOf(action.actionId)].state, true);

    case 'ROLLBACK':
      return stringifyJSON(state.computedStates[0].state, true);

    case 'SWEEP':
      store.dispatch({
        type: SET_STATE,
        newState: sweep(state)
      });
      return undefined;

    default:
      return undefined;
  }
}