import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import { connect } from 'react-redux';
import { withTheme } from 'styled-components';
import { tree } from 'd3-state-visualizer';
import { getPath } from '../ChartMonitorWrapper';
import { updateMonitorState } from '../../../actions';
var style = {
  width: '100%',
  height: '100%'
};

var ChartTab = /*#__PURE__*/function (_Component) {
  _inherits(ChartTab, _Component);

  var _super = _createSuper(ChartTab);

  function ChartTab() {
    var _this;

    _classCallCheck(this, ChartTab);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "getRef", function (node) {
      _this.node = node;
    });

    _defineProperty(_assertThisInitialized(_this), "onClickText", function (data) {
      var inspectedStatePath = [];
      getPath(data, inspectedStatePath);

      _this.props.updateMonitorState({
        inspectedStatePath: inspectedStatePath,
        subTabName: data.children ? 'Chart' : 'Tree'
      });
    });

    return _this;
  }

  _createClass(ChartTab, [{
    key: "shouldComponentUpdate",
    value: // eslint-disable-next-line @typescript-eslint/ban-types
    function shouldComponentUpdate() {
      return false;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.createChart(this.props);
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (this.props.theme.scheme !== nextProps.theme.scheme || nextProps.theme.light !== this.props.theme.light) {
        this.node.innerHTML = '';
        this.createChart(nextProps);
      } else if (nextProps.data !== this.props.data) {
        // eslint-disable-next-line @typescript-eslint/ban-types
        this.renderChart(nextProps.data);
      }
    }
  }, {
    key: "createChart",
    value: function createChart(props) {
      this.renderChart = tree(this.node, this.getChartTheme(props.theme)); // eslint-disable-next-line @typescript-eslint/ban-types

      this.renderChart(props.data);
    }
  }, {
    key: "getChartTheme",
    value: function getChartTheme(theme) {
      return {
        heightBetweenNodesCoeff: 1,
        widthBetweenNodesCoeff: 1.3,
        tooltipOptions: {
          style: {
            color: theme.base06,
            'background-color': theme.base01,
            opacity: '0.9',
            'border-radius': '5px',
            padding: '5px'
          },
          offset: {
            left: 30,
            top: 10
          },
          indentationSize: 2
        },
        style: {
          width: '100%',
          height: '100%',
          node: {
            colors: {
              default: theme.base0B,
              collapsed: theme.base0B,
              parent: theme.base0E
            },
            radius: 7
          },
          text: {
            colors: {
              default: theme.base0D,
              hover: theme.base06
            }
          }
        },
        onClickText: this.onClickText
      };
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement("div", {
        style: style,
        ref: this.getRef
      });
    }
  }]);

  return ChartTab;
}(Component);

var actionCreators = {
  updateMonitorState: updateMonitorState
};
var ConnectedChartTab = connect(null, actionCreators)(ChartTab);
export default withTheme(ConnectedChartTab);