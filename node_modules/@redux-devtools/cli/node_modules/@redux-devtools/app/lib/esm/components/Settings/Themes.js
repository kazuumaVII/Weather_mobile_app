import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import { connect } from 'react-redux';
import { Container, Form } from '@redux-devtools/ui';
import { listSchemes, listThemes } from '@redux-devtools/ui';
import { changeTheme } from '../../actions';
export var Themes = /*#__PURE__*/function (_Component) {
  _inherits(Themes, _Component);

  var _super = _createSuper(Themes);

  function Themes() {
    _classCallCheck(this, Themes);

    return _super.apply(this, arguments);
  }

  _createClass(Themes, [{
    key: "render",
    value: function render() {
      var theme = this.props.theme;
      var formData = {
        theme: theme.theme,
        scheme: theme.scheme,
        colorPreference: theme.colorPreference
      };
      return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Form, {
        schema: {
          type: 'object',
          properties: {
            theme: {
              type: 'string',
              enum: listThemes()
            },
            scheme: {
              title: 'color scheme',
              type: 'string',
              enum: listSchemes()
            },
            colorPreference: {
              title: 'theme color',
              type: 'string',
              enum: ['auto', 'light', 'dark']
            }
          }
        },
        formData: formData,
        noSubmit: true,
        onChange: this.props.changeTheme
      }));
    }
  }]);

  return Themes;
}(Component);

var mapStateToProps = function mapStateToProps(state) {
  return {
    theme: state.theme
  };
};

var actionCreators = {
  changeTheme: changeTheme
};
export default connect(mapStateToProps, actionCreators)(Themes);