import { createStore, compose, applyMiddleware } from 'redux';
import localForage from 'localforage';
import { persistReducer, persistStore } from 'redux-persist';
import { api } from '../middlewares/api';
import { exportStateMiddleware } from '../middlewares/exportState';
import { rootReducer } from '../reducers';
var persistConfig = {
  key: 'redux-devtools',
  blacklist: ['instances', 'socket'],
  storage: localForage
};
var persistedReducer = persistReducer(persistConfig, rootReducer);
export default function configureStore(callback) {
  var composeEnhancers = compose;

  if (process.env.NODE_ENV !== 'production') {
    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {
      composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;
    }

    if (module.hot) {
      // Enable Webpack hot module replacement for reducers
      module.hot.accept('../reducers', function () {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        var nextReducer = require('../reducers'); // eslint-disable-line global-require


        store.replaceReducer(nextReducer);
      });
    }
  }

  var store = createStore(persistedReducer, composeEnhancers(applyMiddleware(exportStateMiddleware, api)));
  var persistor = persistStore(store, null, function () {
    callback(store);
  });
  return {
    store: store,
    persistor: persistor
  };
}