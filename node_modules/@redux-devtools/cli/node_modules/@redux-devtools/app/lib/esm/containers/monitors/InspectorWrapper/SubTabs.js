import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import { connect } from 'react-redux';
import { Tabs } from '@redux-devtools/ui';
import { StateTab, ActionTab, DiffTab } from '@redux-devtools/inspector-monitor';
import { selectMonitorTab } from '../../../actions';
import RawTab from './RawTab';
import ChartTab from './ChartTab';
import VisualDiffTab from './VisualDiffTab';

var SubTabs = /*#__PURE__*/function (_Component) {
  _inherits(SubTabs, _Component);

  var _super = _createSuper(SubTabs);

  function SubTabs(props) {
    var _this;

    _classCallCheck(this, SubTabs);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "selector", function () {
      switch (_this.props.parentTab) {
        case 'Action':
          return {
            data: _this.props.action
          };

        case 'Diff':
          return {
            data: _this.props.delta
          };

        default:
          return {
            data: _this.props.nextState
          };
      }
    });

    _this.updateTabs(props);

    return _this;
  }

  _createClass(SubTabs, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (nextProps.parentTab !== this.props.parentTab) {
        this.updateTabs(nextProps);
      }
    }
  }, {
    key: "updateTabs",
    value: function updateTabs(props) {
      var _this2 = this;

      var parentTab = props.parentTab;

      if (parentTab === 'Diff') {
        this.tabs = [{
          name: 'Tree',
          component: DiffTab,
          selector: function selector() {
            return _this2.props;
          }
        }, {
          name: 'Raw',
          component: VisualDiffTab,
          selector: this.selector
        }];
        return;
      }

      this.tabs = [{
        name: 'Tree',
        component: parentTab === 'Action' ? ActionTab : StateTab,
        selector: function selector() {
          return _this2.props;
        }
      }, {
        name: 'Chart',
        component: ChartTab,
        selector: this.selector
      }, {
        name: 'Raw',
        component: RawTab,
        selector: this.selector
      }];
    }
  }, {
    key: "render",
    value: function render() {
      var selected = this.props.selected;
      if (selected === 'Chart' && this.props.parentTab === 'Diff') selected = 'Tree';
      return /*#__PURE__*/React.createElement(Tabs, {
        tabs: this.tabs,
        selected: selected || 'Tree',
        onClick: this.props.selectMonitorTab
      });
    }
  }]);

  return SubTabs;
}(Component);

var mapStateToProps = function mapStateToProps(state) {
  return {
    parentTab: state.monitor.monitorState.tabName,
    selected: state.monitor.monitorState.subTabName
  };
};

var actionCreators = {
  selectMonitorTab: selectMonitorTab
};
export default connect(mapStateToProps, actionCreators)(SubTabs);