import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import { withTheme } from 'styled-components';
import _getMonitor from '../utils/getMonitor';

var DevTools = /*#__PURE__*/function (_Component) {
  _inherits(DevTools, _Component);

  var _super = _createSuper(DevTools);

  function DevTools(props) {
    var _this;

    _classCallCheck(this, DevTools);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "dispatch", function (action) {
      _this.props.dispatch(action);
    });

    _this.getMonitor(props, props.monitorState);

    return _this;
  }

  _createClass(DevTools, [{
    key: "getMonitor",
    value: function getMonitor(props, skipUpdate) {
      var monitorElement = _getMonitor(props);

      this.monitorProps = monitorElement.props;
      this.Monitor = monitorElement.type; // eslint-disable-next-line @typescript-eslint/unbound-method

      var update = this.Monitor.update;

      if (update) {
        var newMonitorState;
        var monitorState = props.monitorState;

        if (skipUpdate || monitorState && monitorState.__overwritten__ === props.monitor) {
          newMonitorState = monitorState;
        } else {
          newMonitorState = update(this.monitorProps, undefined, {});

          if (newMonitorState !== monitorState) {
            this.preventRender = true;
          }
        }

        this.dispatch({
          type: '@@INIT_MONITOR',
          newMonitorState: newMonitorState,
          update: update,
          monitorProps: this.monitorProps
        });
      }
    }
  }, {
    key: "UNSAFE_componentWillUpdate",
    value: function UNSAFE_componentWillUpdate(nextProps) {
      if (nextProps.monitor !== this.props.monitor) this.getMonitor(nextProps);
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return nextProps.monitor !== this.props.monitor || nextProps.liftedState !== this.props.liftedState || nextProps.monitorState !== this.props.monitorState || nextProps.features !== this.props.features || nextProps.theme.scheme !== this.props.theme.scheme;
    }
  }, {
    key: "render",
    value: function render() {
      if (this.preventRender) {
        this.preventRender = false;
        return null;
      }

      var liftedState = _objectSpread(_objectSpread({}, this.props.liftedState), {}, {
        monitorState: this.props.monitorState
      });

      var MonitorAsAny = this.Monitor;
      return /*#__PURE__*/React.createElement("div", {
        className: "monitor monitor-".concat(this.props.monitor)
      }, /*#__PURE__*/React.createElement(MonitorAsAny, _extends({}, liftedState, this.monitorProps, {
        features: this.props.features,
        dispatch: this.dispatch,
        theme: this.props.theme
      })));
    }
  }]);

  return DevTools;
}(Component);

export default withTheme(DevTools);