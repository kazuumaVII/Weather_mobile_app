import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import * as actions from '../constants/socketActionTypes';
var initialState = {
  id: null,
  channels: [],
  socketState: actions.CLOSED,
  authState: actions.PENDING,
  error: undefined
};
export function socket() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case actions.CONNECT_REQUEST:
      {
        return _objectSpread(_objectSpread({}, state), {}, {
          socketState: actions.CONNECTING
        });
      }

    case actions.CONNECT_ERROR:
      return _objectSpread(_objectSpread({}, state), {}, {
        error: action.error
      });

    case actions.CONNECT_SUCCESS:
      return _objectSpread(_objectSpread({}, state), {}, {
        id: action.payload.id,
        socketState: action.payload.socketState,
        authState: action.payload.authState,
        error: action.error
      });

    case actions.AUTH_REQUEST:
      return _objectSpread(_objectSpread({}, state), {}, {
        authState: actions.PENDING
      });

    case actions.AUTH_SUCCESS:
      return _objectSpread(_objectSpread({}, state), {}, {
        authState: actions.AUTHENTICATED,
        baseChannel: action.baseChannel
      });

    case actions.AUTH_ERROR:
      return _objectSpread(_objectSpread({}, state), {}, {
        authState: actions.UNAUTHENTICATED,
        error: action.error
      });

    case actions.DEAUTHENTICATE:
      return _objectSpread(_objectSpread({}, state), {}, {
        authState: actions.UNAUTHENTICATED,
        authToken: null
      });

    case actions.SUBSCRIBE_SUCCESS:
      return _objectSpread(_objectSpread({}, state), {}, {
        channels: [].concat(_toConsumableArray(state.channels), [action.channel])
      });

    case actions.UNSUBSCRIBE:
      return _objectSpread(_objectSpread({}, state), {}, {
        channels: state.channels.filter(function (channel) {
          return channel !== action.channel;
        })
      });

    case actions.DISCONNECTED:
      return initialState;

    default:
      return state;
  }
}