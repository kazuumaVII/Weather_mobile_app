import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Toolbar, Divider } from '@redux-devtools/ui';
import ExportButton from './buttons/ExportButton';
import ImportButton from './buttons/ImportButton';
import PrintButton from './buttons/PrintButton';
import DispatcherButton from './buttons/DispatcherButton';
import SliderButton from './buttons/SliderButton';
import MonitorSelector from './MonitorSelector';

var BottomButtons = /*#__PURE__*/function (_Component) {
  _inherits(BottomButtons, _Component);

  var _super = _createSuper(BottomButtons);

  function BottomButtons() {
    _classCallCheck(this, BottomButtons);

    return _super.apply(this, arguments);
  }

  _createClass(BottomButtons, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return nextProps.dispatcherIsOpen !== this.props.dispatcherIsOpen || nextProps.sliderIsOpen !== this.props.sliderIsOpen || nextProps.options !== this.props.options;
    }
  }, {
    key: "render",
    value: function render() {
      var features = this.props.options.features;
      return /*#__PURE__*/React.createElement(Toolbar, {
        borderPosition: "top"
      }, features.export && /*#__PURE__*/React.createElement(ExportButton, null), features.import && /*#__PURE__*/React.createElement(ImportButton, null), /*#__PURE__*/React.createElement(PrintButton, null), /*#__PURE__*/React.createElement(Divider, null), /*#__PURE__*/React.createElement(MonitorSelector, null), /*#__PURE__*/React.createElement(Divider, null), features.jump && /*#__PURE__*/React.createElement(SliderButton, {
        isOpen: this.props.sliderIsOpen
      }), features.dispatch && /*#__PURE__*/React.createElement(DispatcherButton, {
        dispatcherIsOpen: this.props.dispatcherIsOpen
      }));
    }
  }]);

  return BottomButtons;
}(Component);

_defineProperty(BottomButtons, "propTypes", {
  dispatcherIsOpen: PropTypes.bool,
  sliderIsOpen: PropTypes.bool,
  options: PropTypes.object.isRequired
});

export { BottomButtons as default };