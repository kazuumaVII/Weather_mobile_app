import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import { connect } from 'react-redux';
import { Tabs } from '@redux-devtools/ui';
import { monitors } from '../utils/getMonitor';
import { selectMonitor } from '../actions';

var MonitorSelector = /*#__PURE__*/function (_Component) {
  _inherits(MonitorSelector, _Component);

  var _super = _createSuper(MonitorSelector);

  function MonitorSelector() {
    _classCallCheck(this, MonitorSelector);

    return _super.apply(this, arguments);
  }

  _createClass(MonitorSelector, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return nextProps.selected !== this.props.selected;
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(Tabs, {
        main: true,
        collapsible: true,
        position: "center",
        tabs: monitors,
        onClick: this.props.selectMonitor,
        selected: this.props.selected || 'InspectorMonitor'
      });
    }
  }]);

  return MonitorSelector;
}(Component);

var mapStateToProps = function mapStateToProps(state) {
  return {
    selected: state.monitor.selected
  };
};

var actionCreators = {
  selectMonitor: selectMonitor
};
export default connect(mapStateToProps, actionCreators)(MonitorSelector);