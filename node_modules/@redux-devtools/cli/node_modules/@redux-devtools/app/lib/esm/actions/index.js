import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import { CHANGE_SECTION, CHANGE_THEME, SELECT_INSTANCE, SELECT_MONITOR, UPDATE_MONITOR_STATE, LIFTED_ACTION, MONITOR_ACTION, EXPORT, TOGGLE_SYNC, TOGGLE_SLIDER, TOGGLE_DISPATCHER, TOGGLE_PERSIST, GET_REPORT_REQUEST, SHOW_NOTIFICATION, CLEAR_NOTIFICATION, SET_PERSIST } from '../constants/actionTypes';
import { RECONNECT } from '../constants/socketActionTypes';
var monitorReducer;
var monitorProps = {};
export function changeSection(section) {
  return {
    type: CHANGE_SECTION,
    section: section
  };
}
export function changeTheme(data) {
  return _objectSpread({
    type: CHANGE_THEME
  }, data.formData);
}
export function liftedDispatch(action) {
  if (action.type[0] === '@') {
    if (action.type === '@@INIT_MONITOR') {
      monitorReducer = action.update;
      monitorProps = action.monitorProps;
    }

    return {
      type: MONITOR_ACTION,
      action: action,
      monitorReducer: monitorReducer,
      monitorProps: monitorProps
    };
  }

  return {
    type: LIFTED_ACTION,
    message: 'DISPATCH',
    action: action
  };
}
export function selectInstance(selected) {
  return {
    type: SELECT_INSTANCE,
    selected: selected
  };
}
export function selectMonitor(monitor) {
  return {
    type: SELECT_MONITOR,
    monitor: monitor
  };
}
export function selectMonitorWithState(value, monitorState) {
  return {
    type: SELECT_MONITOR,
    monitor: value,
    monitorState: monitorState
  };
}
export function selectMonitorTab(subTabName) {
  return {
    type: UPDATE_MONITOR_STATE,
    nextState: {
      subTabName: subTabName
    }
  };
}
export function updateMonitorState(nextState) {
  return {
    type: UPDATE_MONITOR_STATE,
    nextState: nextState
  };
}
export function importState(state, preloadedState) {
  return {
    type: LIFTED_ACTION,
    message: 'IMPORT',
    state: state,
    preloadedState: preloadedState
  };
}
export function exportState() {
  return {
    type: EXPORT
  };
}
export function lockChanges(status) {
  return {
    type: LIFTED_ACTION,
    message: 'DISPATCH',
    action: {
      type: 'LOCK_CHANGES',
      status: status
    },
    toAll: true
  };
}
export function pauseRecording(status) {
  return {
    type: LIFTED_ACTION,
    message: 'DISPATCH',
    action: {
      type: 'PAUSE_RECORDING',
      status: status
    },
    toAll: true
  };
}
export function dispatchRemotely(action) {
  return {
    type: LIFTED_ACTION,
    message: 'ACTION',
    action: action
  };
}
export function togglePersist() {
  return {
    type: TOGGLE_PERSIST
  };
}
export function setPersist(persist) {
  return {
    type: SET_PERSIST,
    payload: persist
  };
}
export function toggleSync() {
  return {
    type: TOGGLE_SYNC
  };
}
export function toggleSlider() {
  return {
    type: TOGGLE_SLIDER
  };
}
export function toggleDispatcher() {
  return {
    type: TOGGLE_DISPATCHER
  };
}
export function saveSocketSettings(options) {
  return {
    type: RECONNECT,
    options: options
  };
}
export function showNotification(message) {
  return {
    type: SHOW_NOTIFICATION,
    notification: {
      type: 'error',
      message: message
    }
  };
}
export function clearNotification() {
  return {
    type: CLEAR_NOTIFICATION
  };
}
export function getReport(report) {
  return {
    type: GET_REPORT_REQUEST,
    report: report
  };
}