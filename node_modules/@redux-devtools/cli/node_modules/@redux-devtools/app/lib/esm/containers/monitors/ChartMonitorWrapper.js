import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import { connect } from 'react-redux';
import { ChartMonitor } from '@redux-devtools/chart-monitor';
import { selectMonitorWithState } from '../../actions';
export function getPath(obj, inspectedStatePath) {
  var parent = obj.parent;
  if (!parent) return;
  getPath(parent, inspectedStatePath);
  var name = obj.name;
  var item = /.+\[(\d+)]/.exec(name);
  if (item) name = item[1];
  inspectedStatePath.push(name);
}

var ChartMonitorWrapper = /*#__PURE__*/function (_Component) {
  _inherits(ChartMonitorWrapper, _Component);

  var _super = _createSuper(ChartMonitorWrapper);

  function ChartMonitorWrapper() {
    var _this;

    _classCallCheck(this, ChartMonitorWrapper);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "onClickText", function (data) {
      var inspectedStatePath = [];
      getPath(data, inspectedStatePath);

      _this.props.selectMonitorWithState('InspectorMonitor', {
        inspectedStatePath: inspectedStatePath,
        tabName: 'State',
        subTabName: data.children ? 'Chart' : 'Tree',
        selectedActionId: null,
        startActionId: null,
        inspectedActionPath: []
      });
    });

    return _this;
  }

  _createClass(ChartMonitorWrapper, [{
    key: "render",
    value: function render() {
      return (
        /*#__PURE__*/
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        React.createElement(ChartMonitor, _extends({
          defaultIsVisible: true,
          invertTheme: true,
          onClickText: this.onClickText
        }, this.props))
      );
    }
  }]);

  return ChartMonitorWrapper;
}(Component);

_defineProperty(ChartMonitorWrapper, "update", ChartMonitor.update);

var actionCreators = {
  selectMonitorWithState: selectMonitorWithState
};
export default connect(null, actionCreators)(ChartMonitorWrapper);