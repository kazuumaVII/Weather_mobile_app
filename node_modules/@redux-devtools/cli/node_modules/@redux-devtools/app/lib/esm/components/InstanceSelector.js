import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import { connect } from 'react-redux';
import { Select } from '@redux-devtools/ui';
import { selectInstance } from '../actions';

var InstanceSelector = /*#__PURE__*/function (_Component) {
  _inherits(InstanceSelector, _Component);

  var _super = _createSuper(InstanceSelector);

  function InstanceSelector() {
    _classCallCheck(this, InstanceSelector);

    return _super.apply(this, arguments);
  }

  _createClass(InstanceSelector, [{
    key: "render",
    value: function render() {
      var _this = this;

      this.select = [{
        value: '',
        label: 'Autoselect instances'
      }];
      var instances = this.props.instances;
      var name;
      Object.keys(instances).forEach(function (key) {
        name = instances[key].name;
        if (name !== undefined) _this.select.push({
          value: key,
          label: name
        });
      });
      return /*#__PURE__*/React.createElement(Select, {
        options: this.select,
        onChange: function onChange(option) {
          return _this.props.onSelect(option.value);
        },
        value: this.select.find(function (option) {
          return option.value === _this.props.selected;
        })
      });
    }
  }]);

  return InstanceSelector;
}(Component);

var mapStateToProps = function mapStateToProps(state) {
  return {
    selected: state.instances.selected,
    instances: state.instances.options
  };
};

var actionCreators = {
  onSelect: selectInstance
};
export default connect(mapStateToProps, actionCreators)(InstanceSelector);