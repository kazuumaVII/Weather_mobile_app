import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import { connect } from 'react-redux';
import { Container, Notification } from '@redux-devtools/ui';
import { clearNotification } from '../actions';
import Header from '../components/Header';
import Actions from '../containers/Actions';
import Settings from '../components/Settings';

var App = /*#__PURE__*/function (_Component) {
  _inherits(App, _Component);

  var _super = _createSuper(App);

  function App() {
    _classCallCheck(this, App);

    return _super.apply(this, arguments);
  }

  _createClass(App, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          section = _this$props.section,
          theme = _this$props.theme,
          notification = _this$props.notification;
      var body;

      switch (section) {
        case 'Settings':
          body = /*#__PURE__*/React.createElement(Settings, null);
          break;

        default:
          body = /*#__PURE__*/React.createElement(Actions, null);
      }

      return /*#__PURE__*/React.createElement(Container, {
        themeData: theme
      }, /*#__PURE__*/React.createElement(Header, {
        section: section
      }), body, notification && /*#__PURE__*/React.createElement(Notification, {
        type: notification.type,
        onClose: this.props.clearNotification
      }, notification.message));
    }
  }]);

  return App;
}(Component);

var mapStateToProps = function mapStateToProps(state) {
  return {
    section: state.section,
    theme: state.theme,
    notification: state.notification
  };
};

var actionCreators = {
  clearNotification: clearNotification
};
export default connect(mapStateToProps, actionCreators)(App);