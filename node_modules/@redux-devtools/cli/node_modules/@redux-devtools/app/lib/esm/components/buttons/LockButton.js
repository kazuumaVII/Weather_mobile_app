import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import { connect } from 'react-redux';
import { Button } from '@redux-devtools/ui';
import { IoIosLock } from 'react-icons/io';
import { lockChanges as _lockChanges } from '../../actions';

var LockButton = /*#__PURE__*/function (_Component) {
  _inherits(LockButton, _Component);

  var _super = _createSuper(LockButton);

  function LockButton() {
    _classCallCheck(this, LockButton);

    return _super.apply(this, arguments);
  }

  _createClass(LockButton, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return nextProps.locked !== this.props.locked;
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(Button, {
        tooltipPosition: "bottom",
        disabled: this.props.disabled,
        mark: this.props.locked && 'base0D',
        title: this.props.locked ? 'Unlock changes' : 'Lock changes',
        onClick: this.props.lockChanges
      }, /*#__PURE__*/React.createElement(IoIosLock, null));
    }
  }]);

  return LockButton;
}(Component);

function mapDispatchToProps(dispatch, ownProps) {
  return {
    lockChanges: function lockChanges() {
      return dispatch(_lockChanges(!ownProps.locked));
    }
  };
}

export default connect(null, mapDispatchToProps)(LockButton);