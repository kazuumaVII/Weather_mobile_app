import React, { Component } from 'react';
import { LiftedAction, LiftedState } from '@redux-devtools/core';
import { Action } from 'redux';
import { InitMonitorAction } from '../actions';
import { Features, State } from '../reducers/instances';
import { MonitorStateMonitorState } from '../reducers/monitor';
import { ThemeFromProvider } from '@redux-devtools/ui';
interface Props {
    monitor: string;
    liftedState: State;
    monitorState: MonitorStateMonitorState | undefined;
    dispatch: (action: LiftedAction<unknown, Action<unknown>, unknown> | InitMonitorAction) => void;
    features: Features | undefined;
    theme: ThemeFromProvider;
}
declare class DevTools extends Component<Props> {
    monitorProps: unknown;
    Monitor?: React.ComponentType<LiftedState<unknown, Action<unknown>, unknown>> & {
        update(monitorProps: unknown, state: unknown | undefined, action: Action<unknown>): unknown;
    };
    preventRender?: boolean;
    constructor(props: Props);
    getMonitor(props: Props, skipUpdate?: unknown): void;
    UNSAFE_componentWillUpdate(nextProps: Props): void;
    shouldComponentUpdate(nextProps: Props): boolean;
    dispatch: (action: LiftedAction<unknown, Action<unknown>, unknown> | InitMonitorAction) => void;
    render(): JSX.Element | null;
}
declare const _default: React.ForwardRefExoticComponent<{
    key?: React.Key | null | undefined;
    monitor: string;
    ref?: React.Ref<DevTools> | undefined;
    monitorState: MonitorStateMonitorState | undefined;
    liftedState: State;
    dispatch: (action: InitMonitorAction | LiftedAction<unknown, Action<unknown>, unknown>) => void;
    features: Features | undefined;
} & {
    theme?: any;
}>;
export default _default;
