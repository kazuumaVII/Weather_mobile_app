import React, { Component } from 'react';
import { ResolveThunks } from 'react-redux';
import { dispatchRemotely } from '../../actions';
import { Options } from '../../reducers/instances';
export declare const DispatcherContainer: import("styled-components").StyledComponent<"div", any, {}, never>;
export declare const CodeContainer: import("styled-components").StyledComponent<"div", any, {}, never>;
export declare const ActionContainer: import("styled-components").StyledComponent<"div", any, {}, never>;
declare type DispatchProps = ResolveThunks<typeof actionCreators>;
interface OwnProps {
    options: Options;
}
declare type Props = DispatchProps & OwnProps;
interface State {
    selected: 'default' | number;
    customAction: string;
    args: string[];
    rest: string;
    changed: boolean;
}
declare class Dispatcher extends Component<Props, State> {
    state: State;
    UNSAFE_componentWillReceiveProps(nextProps: Props): void;
    shouldComponentUpdate(nextProps: Props, nextState: State): boolean;
    selectActionCreator: (selected: 'default' | 'actions-help' | number) => void;
    handleArg: (argIndex: number) => (value: string) => void;
    handleRest: (rest: string) => void;
    handleCustomAction: (customAction: string) => void;
    dispatchAction: () => void;
    render(): JSX.Element;
}
declare const actionCreators: {
    dispatch: typeof dispatchRemotely;
};
declare const _default: import("react-redux").ConnectedComponent<typeof Dispatcher, import("react-redux").Omit<React.ClassAttributes<Dispatcher> & {
    dispatch: typeof dispatchRemotely;
} & OwnProps, "dispatch">>;
export default _default;
