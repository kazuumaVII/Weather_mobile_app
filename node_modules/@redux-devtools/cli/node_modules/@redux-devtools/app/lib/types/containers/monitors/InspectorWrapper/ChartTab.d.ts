import React, { Component, RefCallback } from 'react';
import { ResolveThunks } from 'react-redux';
import { InputOptions, NodeWithId } from 'd3-state-visualizer';
import { updateMonitorState } from '../../../actions';
import { ThemeFromProvider } from '@redux-devtools/ui';
declare type DispatchProps = ResolveThunks<typeof actionCreators>;
interface OwnProps {
    data: unknown;
    theme: ThemeFromProvider;
}
declare type Props = DispatchProps & OwnProps;
declare class ChartTab extends Component<Props> {
    node?: HTMLDivElement | null;
    renderChart?: (nextState?: {} | null | undefined) => void;
    shouldComponentUpdate(): boolean;
    componentDidMount(): void;
    UNSAFE_componentWillReceiveProps(nextProps: Props): void;
    getRef: RefCallback<HTMLDivElement>;
    createChart(props: Props): void;
    getChartTheme(theme: ThemeFromProvider): Partial<InputOptions>;
    onClickText: (data: NodeWithId) => void;
    render(): JSX.Element;
}
declare const actionCreators: {
    updateMonitorState: typeof updateMonitorState;
};
declare const _default: React.ForwardRefExoticComponent<{
    data: unknown;
    key?: React.Key | null | undefined;
    ref?: ((instance: ChartTab | null) => void) | React.RefObject<ChartTab> | null | undefined;
} & {
    theme?: any;
}>;
export default _default;
