import React, { Component } from 'react';
import { ResolveThunks } from 'react-redux';
import { liftedDispatch, getReport } from '../actions';
import { StoreState } from '../reducers';
declare type StateProps = ReturnType<typeof mapStateToProps>;
declare type DispatchProps = ResolveThunks<typeof actionCreators>;
declare type Props = StateProps & DispatchProps;
declare class Actions extends Component<Props> {
    render(): JSX.Element;
}
declare const mapStateToProps: (state: StoreState) => {
    liftedState: import("../reducers/instances").State;
    monitorState: import("..").MonitorStateMonitorState | undefined;
    options: import("../reducers/instances").Options;
    monitor: string;
    dispatcherIsOpen: boolean;
    sliderIsOpen: boolean;
    reports: import("..").Data[];
};
declare const actionCreators: {
    liftedDispatch: typeof liftedDispatch;
    getReport: typeof getReport;
};
declare const _default: import("react-redux").ConnectedComponent<typeof Actions, import("react-redux").Omit<React.ClassAttributes<Actions> & {
    liftedState: import("../reducers/instances").State;
    monitorState: import("..").MonitorStateMonitorState | undefined;
    options: import("../reducers/instances").Options;
    monitor: string;
    dispatcherIsOpen: boolean;
    sliderIsOpen: boolean;
    reports: import("..").Data[];
} & {
    liftedDispatch: typeof liftedDispatch;
    getReport: typeof getReport;
}, "options" | "monitor" | "monitorState" | "reports" | "getReport" | "liftedState" | "dispatcherIsOpen" | "sliderIsOpen" | "liftedDispatch">>;
export default _default;
