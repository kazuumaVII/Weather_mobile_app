import React, { Component } from 'react';
import { ResolveThunks } from 'react-redux';
import { togglePersist } from '../../actions';
import { StoreState } from '../../reducers';
declare type StateProps = ReturnType<typeof mapStateToProps>;
declare type DispatchProps = ResolveThunks<typeof actionCreators>;
interface OwnProps {
    disabled?: boolean;
}
declare type Props = StateProps & DispatchProps & OwnProps;
declare class LockButton extends Component<Props> {
    shouldComponentUpdate(nextProps: Props): boolean;
    render(): JSX.Element;
}
declare const mapStateToProps: (state: StoreState) => {
    persisted: boolean | undefined;
};
declare const actionCreators: {
    onClick: typeof togglePersist;
};
declare const _default: import("react-redux").ConnectedComponent<typeof LockButton, import("react-redux").Omit<React.ClassAttributes<LockButton> & {
    persisted: boolean | undefined;
} & {
    onClick: typeof togglePersist;
} & OwnProps, "persisted" | "onClick">>;
export default _default;
