import React, { Component } from 'react';
import { ResolveThunks } from 'react-redux';
import { Tab } from '@redux-devtools/ui';
import { TabComponentProps } from '@redux-devtools/inspector-monitor';
import { Action } from 'redux';
import { selectMonitorTab } from '../../../actions';
import { StoreState } from '../../../reducers';
import { Delta } from 'jsondiffpatch';
declare type StateProps = ReturnType<typeof mapStateToProps>;
declare type DispatchProps = ResolveThunks<typeof actionCreators>;
declare type Props = StateProps & DispatchProps & TabComponentProps<unknown, Action<unknown>>;
declare class SubTabs extends Component<Props> {
    tabs?: (Tab<Props> | Tab<{
        data: unknown;
    }> | Tab<{
        data?: Delta;
    }>)[];
    constructor(props: Props);
    UNSAFE_componentWillReceiveProps(nextProps: Props): void;
    selector: () => {
        data: unknown;
    };
    updateTabs(props: Props): void;
    render(): JSX.Element;
}
declare const mapStateToProps: (state: StoreState) => {
    parentTab: string | undefined;
    selected: string | undefined;
};
declare const actionCreators: {
    selectMonitorTab: typeof selectMonitorTab;
};
declare const _default: import("react-redux").ConnectedComponent<typeof SubTabs, import("react-redux").Omit<React.ClassAttributes<SubTabs> & {
    parentTab: string | undefined;
    selected: string | undefined;
} & {
    selectMonitorTab: typeof selectMonitorTab;
} & TabComponentProps<unknown, Action<unknown>>, "selected" | "selectMonitorTab" | "parentTab">>;
export default _default;
