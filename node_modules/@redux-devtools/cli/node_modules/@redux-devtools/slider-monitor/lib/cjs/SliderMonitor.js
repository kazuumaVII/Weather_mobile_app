"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var themes = _interopRequireWildcard(require("redux-devtools-themes"));

var _core = require("@redux-devtools/core");

var _ui = require("@redux-devtools/ui");

var _reducers = _interopRequireDefault(require("./reducers"));

var _SliderButton = _interopRequireDefault(require("./SliderButton"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

// eslint-disable-next-line @typescript-eslint/unbound-method
var reset = _core.ActionCreators.reset,
    jumpToAction = _core.ActionCreators.jumpToAction;

var SliderMonitor = /*#__PURE__*/function (_ref) {
  (0, _inherits2.default)(SliderMonitor, _ref);

  var _super = _createSuper(SliderMonitor);

  function SliderMonitor() {
    var _this;

    (0, _classCallCheck2.default)(this, SliderMonitor);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      timer: undefined,
      replaySpeed: '1x'
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setUpTheme", function () {
      var theme;

      if (typeof _this.props.theme === 'string') {
        if (typeof themes[_this.props.theme] !== 'undefined') {
          theme = themes[_this.props.theme];
        } else {
          theme = themes.nicinabox;
        }
      } else {
        theme = _this.props.theme;
      }

      return theme;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleReset", function () {
      _this.pauseReplay();

      _this.props.dispatch(reset());
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleKeyPress", function (event) {
      if (!_this.props.keyboardEnabled) {
        return null;
      }

      if (event.ctrlKey && event.keyCode === 74) {
        // ctrl+j
        event.preventDefault();

        if (_this.state.timer) {
          return _this.pauseReplay();
        }

        if (_this.state.replaySpeed === 'Live') {
          _this.startRealtimeReplay();
        } else {
          _this.startReplay();
        }
      } else if (event.ctrlKey && event.keyCode === 219) {
        // ctrl+[
        event.preventDefault();

        _this.stepLeft();
      } else if (event.ctrlKey && event.keyCode === 221) {
        // ctrl+]
        event.preventDefault();

        _this.stepRight();
      }

      return null;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleSliderChange", function (value) {
      if (_this.state.timer) {
        _this.pauseReplay();
      }

      _this.props.dispatch(jumpToAction(_this.props.stagedActionIds[value]));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "startReplay", function () {
      var _this$props = _this.props,
          computedStates = _this$props.computedStates,
          currentStateIndex = _this$props.currentStateIndex,
          dispatch = _this$props.dispatch,
          stagedActionIds = _this$props.stagedActionIds;

      if (computedStates.length < 2) {
        return;
      }

      var speed = _this.state.replaySpeed === '1x' ? 500 : 200;
      var stateIndex;

      if (currentStateIndex === computedStates.length - 1) {
        dispatch(jumpToAction(stagedActionIds[0]));
        stateIndex = 0;
      } else if (currentStateIndex === computedStates.length - 2) {
        dispatch(jumpToAction(stagedActionIds[currentStateIndex + 1]));
        return;
      } else {
        stateIndex = currentStateIndex + 1;
        dispatch(jumpToAction(stagedActionIds[currentStateIndex + 1]));
      }

      var counter = stateIndex;
      var timer = window.setInterval(function () {
        if (counter + 1 <= computedStates.length - 1) {
          dispatch(jumpToAction(stagedActionIds[counter + 1]));
        }

        counter += 1;

        if (counter >= computedStates.length - 1) {
          clearInterval(_this.state.timer);

          _this.setState({
            timer: undefined
          });
        }
      }, speed);

      _this.setState({
        timer: timer
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "startRealtimeReplay", function () {
      if (_this.props.computedStates.length < 2) {
        return;
      }

      if (_this.props.currentStateIndex === _this.props.computedStates.length - 1) {
        _this.props.dispatch(jumpToAction(_this.props.stagedActionIds[0]));

        _this.loop(0);
      } else {
        _this.loop(_this.props.currentStateIndex);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "loop", function (index) {
      var currentTimestamp = Date.now();

      var timestampDiff = _this.getLatestTimestampDiff(index);

      var aLoop = function aLoop() {
        var replayDiff = Date.now() - currentTimestamp;

        if (replayDiff >= timestampDiff) {
          _this.props.dispatch(jumpToAction(_this.props.stagedActionIds[_this.props.currentStateIndex + 1]));

          if (_this.props.currentStateIndex >= _this.props.computedStates.length - 1) {
            _this.pauseReplay();

            return;
          }

          timestampDiff = _this.getLatestTimestampDiff(_this.props.currentStateIndex);
          currentTimestamp = Date.now();

          _this.setState({
            timer: requestAnimationFrame(aLoop)
          });
        } else {
          _this.setState({
            timer: requestAnimationFrame(aLoop)
          });
        }
      };

      if (index !== _this.props.computedStates.length - 1) {
        _this.setState({
          timer: requestAnimationFrame(aLoop)
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getLatestTimestampDiff", function (index) {
      return _this.getTimestampOfStateIndex(index + 1) - _this.getTimestampOfStateIndex(index);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getTimestampOfStateIndex", function (stateIndex) {
      var id = _this.props.stagedActionIds[stateIndex];
      return _this.props.actionsById[id].timestamp;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "pauseReplay", function (cb) {
      if (_this.state.timer) {
        cancelAnimationFrame(_this.state.timer);
        clearInterval(_this.state.timer);

        _this.setState({
          timer: undefined
        }, function () {
          if (typeof cb === 'function') {
            cb();
          }
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "stepLeft", function () {
      _this.pauseReplay();

      if (_this.props.currentStateIndex !== 0) {
        _this.props.dispatch(jumpToAction(_this.props.stagedActionIds[_this.props.currentStateIndex - 1]));
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "stepRight", function () {
      _this.pauseReplay();

      if (_this.props.currentStateIndex !== _this.props.computedStates.length - 1) {
        _this.props.dispatch(jumpToAction(_this.props.stagedActionIds[_this.props.currentStateIndex + 1]));
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "changeReplaySpeed", function (replaySpeed) {
      _this.setState({
        replaySpeed: replaySpeed
      });

      if (_this.state.timer) {
        _this.pauseReplay(function () {
          if (replaySpeed === 'Live') {
            _this.startRealtimeReplay();
          } else {
            _this.startReplay();
          }
        });
      }
    });
    return _this;
  }

  (0, _createClass2.default)(SliderMonitor, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (typeof window !== 'undefined') {
        window.addEventListener('keydown', this.handleKeyPress);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (typeof window !== 'undefined') {
        window.removeEventListener('keydown', this.handleKeyPress);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          currentStateIndex = _this$props2.currentStateIndex,
          computedStates = _this$props2.computedStates,
          actionsById = _this$props2.actionsById,
          stagedActionIds = _this$props2.stagedActionIds,
          hideResetButton = _this$props2.hideResetButton;
      var replaySpeed = this.state.replaySpeed;
      var theme = this.setUpTheme();
      var max = computedStates.length - 1;
      var actionId = stagedActionIds[currentStateIndex];
      var actionType = actionsById[actionId].action.type;
      if (actionType === undefined) actionType = '<UNDEFINED>';else if (actionType === null) actionType = '<NULL>';else actionType = actionType.toString() || '<EMPTY>';
      var onPlayClick = replaySpeed === 'Live' ? this.startRealtimeReplay : this.startReplay;
      var playPause = this.state.timer ? /*#__PURE__*/_react.default.createElement(_SliderButton.default, {
        theme: theme,
        type: "pause",
        onClick: this.pauseReplay
      }) : /*#__PURE__*/_react.default.createElement(_SliderButton.default, {
        theme: theme,
        type: "play",
        disabled: max <= 0,
        onClick: onPlayClick
      });
      return /*#__PURE__*/_react.default.createElement(_ui.Toolbar, {
        noBorder: true,
        compact: true,
        fullHeight: true,
        theme: theme
      }, playPause, /*#__PURE__*/_react.default.createElement(_ui.Slider, {
        label: actionType,
        sublabel: "(".concat(actionId, ")"),
        min: 0,
        max: max,
        value: currentStateIndex,
        onChange: this.handleSliderChange,
        theme: theme
      }), /*#__PURE__*/_react.default.createElement(_SliderButton.default, {
        theme: theme,
        type: "stepLeft",
        disabled: currentStateIndex <= 0,
        onClick: this.stepLeft
      }), /*#__PURE__*/_react.default.createElement(_SliderButton.default, {
        theme: theme,
        type: "stepRight",
        disabled: currentStateIndex === max,
        onClick: this.stepRight
      }), /*#__PURE__*/_react.default.createElement(_ui.Divider, {
        theme: theme
      }), /*#__PURE__*/_react.default.createElement(_ui.SegmentedControl, {
        theme: theme,
        values: ['Live', '1x', '2x'],
        selected: replaySpeed,
        onClick: this.changeReplaySpeed
      }), !hideResetButton && [/*#__PURE__*/_react.default.createElement(_ui.Divider, {
        key: "divider",
        theme: theme
      }), /*#__PURE__*/_react.default.createElement(_ui.Button, {
        key: "reset",
        theme: theme,
        onClick: this.handleReset
      }, "Reset")]);
    }
  }]);
  return SliderMonitor;
}(_react.PureComponent || _react.Component);

(0, _defineProperty2.default)(SliderMonitor, "update", _reducers.default);
(0, _defineProperty2.default)(SliderMonitor, "propTypes", {
  dispatch: _propTypes.default.func,
  computedStates: _propTypes.default.array,
  stagedActionIds: _propTypes.default.array,
  actionsById: _propTypes.default.object,
  currentStateIndex: _propTypes.default.number,
  monitorState: _propTypes.default.shape({
    initialScrollTop: _propTypes.default.number
  }),
  preserveScrollTop: _propTypes.default.bool,
  // stagedActions: PropTypes.array,
  select: _propTypes.default.func.isRequired,
  hideResetButton: _propTypes.default.bool,
  theme: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string]),
  keyboardEnabled: _propTypes.default.bool
});
(0, _defineProperty2.default)(SliderMonitor, "defaultProps", {
  select: function select(state) {
    return state;
  },
  theme: 'nicinabox',
  preserveScrollTop: true,
  keyboardEnabled: true
});
var _default = SliderMonitor;
exports.default = _default;