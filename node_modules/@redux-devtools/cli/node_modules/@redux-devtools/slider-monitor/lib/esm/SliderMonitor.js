import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component, PureComponent } from 'react';
import PropTypes from 'prop-types';
import * as themes from 'redux-devtools-themes';
import { ActionCreators } from '@redux-devtools/core';
import { Button, Divider, SegmentedControl, Slider, Toolbar } from '@redux-devtools/ui';
import reducer from './reducers';
import SliderButton from './SliderButton'; // eslint-disable-next-line @typescript-eslint/unbound-method

var reset = ActionCreators.reset,
    jumpToAction = ActionCreators.jumpToAction;

var SliderMonitor = /*#__PURE__*/function (_ref) {
  _inherits(SliderMonitor, _ref);

  var _super = _createSuper(SliderMonitor);

  function SliderMonitor() {
    var _this;

    _classCallCheck(this, SliderMonitor);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      timer: undefined,
      replaySpeed: '1x'
    });

    _defineProperty(_assertThisInitialized(_this), "setUpTheme", function () {
      var theme;

      if (typeof _this.props.theme === 'string') {
        if (typeof themes[_this.props.theme] !== 'undefined') {
          theme = themes[_this.props.theme];
        } else {
          theme = themes.nicinabox;
        }
      } else {
        theme = _this.props.theme;
      }

      return theme;
    });

    _defineProperty(_assertThisInitialized(_this), "handleReset", function () {
      _this.pauseReplay();

      _this.props.dispatch(reset());
    });

    _defineProperty(_assertThisInitialized(_this), "handleKeyPress", function (event) {
      if (!_this.props.keyboardEnabled) {
        return null;
      }

      if (event.ctrlKey && event.keyCode === 74) {
        // ctrl+j
        event.preventDefault();

        if (_this.state.timer) {
          return _this.pauseReplay();
        }

        if (_this.state.replaySpeed === 'Live') {
          _this.startRealtimeReplay();
        } else {
          _this.startReplay();
        }
      } else if (event.ctrlKey && event.keyCode === 219) {
        // ctrl+[
        event.preventDefault();

        _this.stepLeft();
      } else if (event.ctrlKey && event.keyCode === 221) {
        // ctrl+]
        event.preventDefault();

        _this.stepRight();
      }

      return null;
    });

    _defineProperty(_assertThisInitialized(_this), "handleSliderChange", function (value) {
      if (_this.state.timer) {
        _this.pauseReplay();
      }

      _this.props.dispatch(jumpToAction(_this.props.stagedActionIds[value]));
    });

    _defineProperty(_assertThisInitialized(_this), "startReplay", function () {
      var _this$props = _this.props,
          computedStates = _this$props.computedStates,
          currentStateIndex = _this$props.currentStateIndex,
          dispatch = _this$props.dispatch,
          stagedActionIds = _this$props.stagedActionIds;

      if (computedStates.length < 2) {
        return;
      }

      var speed = _this.state.replaySpeed === '1x' ? 500 : 200;
      var stateIndex;

      if (currentStateIndex === computedStates.length - 1) {
        dispatch(jumpToAction(stagedActionIds[0]));
        stateIndex = 0;
      } else if (currentStateIndex === computedStates.length - 2) {
        dispatch(jumpToAction(stagedActionIds[currentStateIndex + 1]));
        return;
      } else {
        stateIndex = currentStateIndex + 1;
        dispatch(jumpToAction(stagedActionIds[currentStateIndex + 1]));
      }

      var counter = stateIndex;
      var timer = window.setInterval(function () {
        if (counter + 1 <= computedStates.length - 1) {
          dispatch(jumpToAction(stagedActionIds[counter + 1]));
        }

        counter += 1;

        if (counter >= computedStates.length - 1) {
          clearInterval(_this.state.timer);

          _this.setState({
            timer: undefined
          });
        }
      }, speed);

      _this.setState({
        timer: timer
      });
    });

    _defineProperty(_assertThisInitialized(_this), "startRealtimeReplay", function () {
      if (_this.props.computedStates.length < 2) {
        return;
      }

      if (_this.props.currentStateIndex === _this.props.computedStates.length - 1) {
        _this.props.dispatch(jumpToAction(_this.props.stagedActionIds[0]));

        _this.loop(0);
      } else {
        _this.loop(_this.props.currentStateIndex);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "loop", function (index) {
      var currentTimestamp = Date.now();

      var timestampDiff = _this.getLatestTimestampDiff(index);

      var aLoop = function aLoop() {
        var replayDiff = Date.now() - currentTimestamp;

        if (replayDiff >= timestampDiff) {
          _this.props.dispatch(jumpToAction(_this.props.stagedActionIds[_this.props.currentStateIndex + 1]));

          if (_this.props.currentStateIndex >= _this.props.computedStates.length - 1) {
            _this.pauseReplay();

            return;
          }

          timestampDiff = _this.getLatestTimestampDiff(_this.props.currentStateIndex);
          currentTimestamp = Date.now();

          _this.setState({
            timer: requestAnimationFrame(aLoop)
          });
        } else {
          _this.setState({
            timer: requestAnimationFrame(aLoop)
          });
        }
      };

      if (index !== _this.props.computedStates.length - 1) {
        _this.setState({
          timer: requestAnimationFrame(aLoop)
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "getLatestTimestampDiff", function (index) {
      return _this.getTimestampOfStateIndex(index + 1) - _this.getTimestampOfStateIndex(index);
    });

    _defineProperty(_assertThisInitialized(_this), "getTimestampOfStateIndex", function (stateIndex) {
      var id = _this.props.stagedActionIds[stateIndex];
      return _this.props.actionsById[id].timestamp;
    });

    _defineProperty(_assertThisInitialized(_this), "pauseReplay", function (cb) {
      if (_this.state.timer) {
        cancelAnimationFrame(_this.state.timer);
        clearInterval(_this.state.timer);

        _this.setState({
          timer: undefined
        }, function () {
          if (typeof cb === 'function') {
            cb();
          }
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "stepLeft", function () {
      _this.pauseReplay();

      if (_this.props.currentStateIndex !== 0) {
        _this.props.dispatch(jumpToAction(_this.props.stagedActionIds[_this.props.currentStateIndex - 1]));
      }
    });

    _defineProperty(_assertThisInitialized(_this), "stepRight", function () {
      _this.pauseReplay();

      if (_this.props.currentStateIndex !== _this.props.computedStates.length - 1) {
        _this.props.dispatch(jumpToAction(_this.props.stagedActionIds[_this.props.currentStateIndex + 1]));
      }
    });

    _defineProperty(_assertThisInitialized(_this), "changeReplaySpeed", function (replaySpeed) {
      _this.setState({
        replaySpeed: replaySpeed
      });

      if (_this.state.timer) {
        _this.pauseReplay(function () {
          if (replaySpeed === 'Live') {
            _this.startRealtimeReplay();
          } else {
            _this.startReplay();
          }
        });
      }
    });

    return _this;
  }

  _createClass(SliderMonitor, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (typeof window !== 'undefined') {
        window.addEventListener('keydown', this.handleKeyPress);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (typeof window !== 'undefined') {
        window.removeEventListener('keydown', this.handleKeyPress);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          currentStateIndex = _this$props2.currentStateIndex,
          computedStates = _this$props2.computedStates,
          actionsById = _this$props2.actionsById,
          stagedActionIds = _this$props2.stagedActionIds,
          hideResetButton = _this$props2.hideResetButton;
      var replaySpeed = this.state.replaySpeed;
      var theme = this.setUpTheme();
      var max = computedStates.length - 1;
      var actionId = stagedActionIds[currentStateIndex];
      var actionType = actionsById[actionId].action.type;
      if (actionType === undefined) actionType = '<UNDEFINED>';else if (actionType === null) actionType = '<NULL>';else actionType = actionType.toString() || '<EMPTY>';
      var onPlayClick = replaySpeed === 'Live' ? this.startRealtimeReplay : this.startReplay;
      var playPause = this.state.timer ? /*#__PURE__*/React.createElement(SliderButton, {
        theme: theme,
        type: "pause",
        onClick: this.pauseReplay
      }) : /*#__PURE__*/React.createElement(SliderButton, {
        theme: theme,
        type: "play",
        disabled: max <= 0,
        onClick: onPlayClick
      });
      return /*#__PURE__*/React.createElement(Toolbar, {
        noBorder: true,
        compact: true,
        fullHeight: true,
        theme: theme
      }, playPause, /*#__PURE__*/React.createElement(Slider, {
        label: actionType,
        sublabel: "(".concat(actionId, ")"),
        min: 0,
        max: max,
        value: currentStateIndex,
        onChange: this.handleSliderChange,
        theme: theme
      }), /*#__PURE__*/React.createElement(SliderButton, {
        theme: theme,
        type: "stepLeft",
        disabled: currentStateIndex <= 0,
        onClick: this.stepLeft
      }), /*#__PURE__*/React.createElement(SliderButton, {
        theme: theme,
        type: "stepRight",
        disabled: currentStateIndex === max,
        onClick: this.stepRight
      }), /*#__PURE__*/React.createElement(Divider, {
        theme: theme
      }), /*#__PURE__*/React.createElement(SegmentedControl, {
        theme: theme,
        values: ['Live', '1x', '2x'],
        selected: replaySpeed,
        onClick: this.changeReplaySpeed
      }), !hideResetButton && [/*#__PURE__*/React.createElement(Divider, {
        key: "divider",
        theme: theme
      }), /*#__PURE__*/React.createElement(Button, {
        key: "reset",
        theme: theme,
        onClick: this.handleReset
      }, "Reset")]);
    }
  }]);

  return SliderMonitor;
}(PureComponent || Component);

_defineProperty(SliderMonitor, "update", reducer);

_defineProperty(SliderMonitor, "propTypes", {
  dispatch: PropTypes.func,
  computedStates: PropTypes.array,
  stagedActionIds: PropTypes.array,
  actionsById: PropTypes.object,
  currentStateIndex: PropTypes.number,
  monitorState: PropTypes.shape({
    initialScrollTop: PropTypes.number
  }),
  preserveScrollTop: PropTypes.bool,
  // stagedActions: PropTypes.array,
  select: PropTypes.func.isRequired,
  hideResetButton: PropTypes.bool,
  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
  keyboardEnabled: PropTypes.bool
});

_defineProperty(SliderMonitor, "defaultProps", {
  select: function select(state) {
    return state;
  },
  theme: 'nicinabox',
  preserveScrollTop: true,
  keyboardEnabled: true
});

export default SliderMonitor;