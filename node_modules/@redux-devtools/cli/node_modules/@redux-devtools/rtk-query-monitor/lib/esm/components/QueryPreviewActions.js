import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import { createSelector } from '@reduxjs/toolkit';
import React, { PureComponent } from 'react';
import { emptyRecord, identity } from '../utils/object';
import { TreeView } from './TreeView';
var keySep = ' - ';
export var QueryPreviewActions = /*#__PURE__*/function (_PureComponent) {
  _inherits(QueryPreviewActions, _PureComponent);

  var _super = _createSuper(QueryPreviewActions);

  function QueryPreviewActions() {
    var _this;

    _classCallCheck(this, QueryPreviewActions);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "selectFormattedActions", createSelector(identity, function (actions) {
      var output = {};

      if (actions.length === 0) {
        return emptyRecord;
      }

      for (var i = 0, len = actions.length; i < len; i++) {
        var _type;

        var action = actions[i];
        var key = "".concat(i).concat(keySep).concat((_type = action === null || action === void 0 ? void 0 : action.type) !== null && _type !== void 0 ? _type : '');
        output[key] = action;
      }

      return output;
    }));

    _defineProperty(_assertThisInitialized(_this), "isLastActionNode", function (keyPath, layer) {
      if (layer >= 1) {
        var len = _this.props.actionsOfQuery.length;
        var actionKey = keyPath[keyPath.length - 1];

        if (typeof actionKey === 'string') {
          var index = Number(actionKey.split(keySep)[0]);
          return len > 0 && len - index < 2;
        }
      }

      return false;
    });

    _defineProperty(_assertThisInitialized(_this), "shouldExpandNode", function (keyPath, value, layer) {
      if (layer === 1) {
        return _this.isLastActionNode(keyPath, layer);
      }

      if (layer === 2) {
        return _this.isLastActionNode(keyPath, layer) && (keyPath[0] === 'meta' || keyPath[0] === 'error');
      }

      return layer <= 1;
    });

    return _this;
  }

  _createClass(QueryPreviewActions, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          isWideLayout = _this$props.isWideLayout,
          actionsOfQuery = _this$props.actionsOfQuery;
      return /*#__PURE__*/React.createElement(TreeView, {
        data: this.selectFormattedActions(actionsOfQuery),
        isWideLayout: isWideLayout,
        shouldExpandNode: this.shouldExpandNode
      });
    }
  }]);

  return QueryPreviewActions;
}(PureComponent);