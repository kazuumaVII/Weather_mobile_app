import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import { createSelector } from '@reduxjs/toolkit';
import React from 'react';
import { JSONTree } from 'react-json-tree';
import { DATA_TYPE_KEY } from '../monitor-config';
import { getJsonTreeTheme, StyleUtilsContext } from '../styles/createStylingFromTheme';
import { createTreeItemLabelRenderer, getItemString } from '../styles/tree';
import { identity } from '../utils/object';
export var TreeView = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(TreeView, _React$PureComponent);

  var _super = _createSuper(TreeView);

  function TreeView(props) {
    var _this;

    _classCallCheck(this, TreeView);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "selectLabelRenderer", createSelector(identity, createTreeItemLabelRenderer));

    _defineProperty(_assertThisInitialized(_this), "selectGetItemString", createSelector(identity, function (styling) {
      return function (type, data) {
        return getItemString(styling, type, data, DATA_TYPE_KEY, false);
      };
    }));

    _defineProperty(_assertThisInitialized(_this), "selectTheme", createSelector(identity, getJsonTreeTheme));

    return _this;
  }

  _createClass(TreeView, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          data = _this$props.data,
          before = _this$props.before,
          after = _this$props.after,
          children = _this$props.children,
          keyPath = _this$props.keyPath,
          shouldExpandNode = _this$props.shouldExpandNode,
          hideRoot = _this$props.hideRoot;
      return /*#__PURE__*/React.createElement(StyleUtilsContext.Consumer, null, function (_ref) {
        var styling = _ref.styling,
            invertTheme = _ref.invertTheme,
            base16Theme = _ref.base16Theme;
        return /*#__PURE__*/React.createElement("div", styling('treeWrapper'), before, /*#__PURE__*/React.createElement(JSONTree, {
          keyPath: keyPath,
          shouldExpandNode: shouldExpandNode,
          data: data,
          labelRenderer: _this2.selectLabelRenderer(styling),
          theme: _this2.selectTheme(base16Theme),
          invertTheme: invertTheme,
          getItemString: _this2.selectGetItemString(styling),
          hideRoot: hideRoot
        }), after, children);
      });
    }
  }]);

  return TreeView;
}(React.PureComponent);

_defineProperty(TreeView, "defaultProps", {
  hideRoot: true,
  shouldExpandNode: function shouldExpandNode(keyPath, value, layer) {
    return layer < 2;
  }
});