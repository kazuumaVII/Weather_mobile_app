import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { createSelector } from '@reduxjs/toolkit';
import { QueryPreviewTabs } from './types';
import { queryComparators } from './utils/comparators';
import { queryListFilters } from './utils/filters';
import { emptyRecord } from './utils/object';
import { escapeRegExpSpecialCharacter } from './utils/regexp';
import { getApiStatesOf, extractAllApiQueries, flipComparator, getQueryTagsOf, generateApiStatsOfCurrentQuery, getActionsOfCurrentQuery, extractAllApiMutations } from './utils/rtk-query';
export function computeSelectorSource(props) {
  var previous = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var computedStates = props.computedStates,
      currentStateIndex = props.currentStateIndex,
      monitorState = props.monitorState,
      actionsById = props.actionsById;
  var userState = computedStates.length > 0 ? computedStates[currentStateIndex].state : null;

  if (!previous || previous.userState !== userState || previous.monitorState !== monitorState || previous.actionsById !== actionsById) {
    return {
      userState: userState,
      monitorState: monitorState,
      currentStateIndex: currentStateIndex,
      actionsById: actionsById
    };
  }

  return previous;
}
export function createInspectorSelectors() {
  var selectQueryComparator = function selectQueryComparator(_ref) {
    var monitorState = _ref.monitorState;
    return queryComparators[monitorState.queryForm.values.queryComparator];
  };

  var selectQueryListFilter = function selectQueryListFilter(_ref2) {
    var monitorState = _ref2.monitorState;
    return queryListFilters[monitorState.queryForm.values.queryFilter];
  };

  var selectActionsById = function selectActionsById(_ref3) {
    var actionsById = _ref3.actionsById;
    return actionsById;
  };

  var selectApiStates = createSelector(function (_ref4) {
    var userState = _ref4.userState;
    return userState;
  }, getApiStatesOf);
  var selectAllQueries = createSelector(selectApiStates, extractAllApiQueries);
  var selectAllMutations = createSelector(selectApiStates, extractAllApiMutations);
  var selectSearchQueryRegex = createSelector(function (_ref5) {
    var monitorState = _ref5.monitorState;
    return monitorState.queryForm.values.searchValue;
  }, function (_ref6) {
    var monitorState = _ref6.monitorState;
    return monitorState.queryForm.values.isRegexSearch;
  }, function (searchValue, isRegexSearch) {
    if (searchValue) {
      try {
        var regexPattern = isRegexSearch ? searchValue : escapeRegExpSpecialCharacter(searchValue);
        return new RegExp(regexPattern, 'i');
      } catch (err) {// We notify that the search regex provided is not valid
      }
    }

    return null;
  });

  var selectComparatorOrder = function selectComparatorOrder(_ref7) {
    var monitorState = _ref7.monitorState;
    return monitorState.queryForm.values.isAscendingQueryComparatorOrder;
  };

  var selectAllVisbileQueries = createSelector([selectQueryComparator, selectQueryListFilter, selectAllQueries, selectAllMutations, selectComparatorOrder, selectSearchQueryRegex], function (comparator, queryListFilter, queryList, mutationsList, isAscending, searchRegex) {
    var filteredList = queryListFilter(searchRegex, queryList.concat(mutationsList));
    var computedComparator = isAscending ? comparator : flipComparator(comparator);
    return filteredList.slice().sort(computedComparator);
  });
  var selectCurrentQueryInfo = createSelector(selectAllQueries, selectAllMutations, function (_ref8) {
    var monitorState = _ref8.monitorState;
    return monitorState.selectedQueryKey;
  }, function (allQueries, allMutations, selectedQueryKey) {
    if (!selectedQueryKey) {
      return null;
    }

    var currentQueryInfo = allQueries.find(function (query) {
      return query.queryKey === selectedQueryKey.queryKey && selectedQueryKey.reducerPath === query.reducerPath;
    }) || null;

    if (!currentQueryInfo) {
      currentQueryInfo = allMutations.find(function (mutation) {
        return mutation.queryKey === selectedQueryKey.queryKey && selectedQueryKey.reducerPath === mutation.reducerPath;
      }) || null;
    }

    return currentQueryInfo;
  });

  var selectApiOfCurrentQuery = function selectApiOfCurrentQuery(selectorsSource) {
    var _apiStates$currentQue;

    var apiStates = selectApiStates(selectorsSource);
    var currentQueryInfo = selectCurrentQueryInfo(selectorsSource);

    if (!apiStates || !currentQueryInfo) {
      return null;
    }

    return (_apiStates$currentQue = apiStates[currentQueryInfo.reducerPath]) !== null && _apiStates$currentQue !== void 0 ? _apiStates$currentQue : null;
  };

  var selectProvidedOfCurrentQuery = function selectProvidedOfCurrentQuery(selectorsSource) {
    var _selectApiOfCurrentQu, _selectApiOfCurrentQu2;

    return (_selectApiOfCurrentQu = (_selectApiOfCurrentQu2 = selectApiOfCurrentQuery(selectorsSource)) === null || _selectApiOfCurrentQu2 === void 0 ? void 0 : _selectApiOfCurrentQu2.provided) !== null && _selectApiOfCurrentQu !== void 0 ? _selectApiOfCurrentQu : null;
  };

  var selectSubscriptionsOfCurrentQuery = createSelector([selectApiOfCurrentQuery, selectCurrentQueryInfo], function (apiState, queryInfo) {
    if (!queryInfo || !apiState) {
      return emptyRecord;
    }

    return apiState.subscriptions[queryInfo.queryKey];
  });
  var selectCurrentQueryTags = createSelector([selectCurrentQueryInfo, selectProvidedOfCurrentQuery], getQueryTagsOf);
  var selectApiStatsOfCurrentQuery = createSelector(selectApiOfCurrentQuery, function (selectorsSource) {
    return selectorsSource.actionsById;
  }, function (selectorsSource) {
    return selectorsSource.currentStateIndex;
  }, generateApiStatsOfCurrentQuery);
  var selectActionsOfCurrentQuery = createSelector(selectCurrentQueryInfo, selectActionsById, getActionsOfCurrentQuery);
  var selectTabCounters = createSelector([selectSubscriptionsOfCurrentQuery, selectActionsOfCurrentQuery, selectCurrentQueryTags], function (subscriptions, actions, tags) {
    var _ref9;

    return _ref9 = {}, _defineProperty(_ref9, QueryPreviewTabs.queryTags, tags.length), _defineProperty(_ref9, QueryPreviewTabs.querySubscriptions, Object.keys(subscriptions !== null && subscriptions !== void 0 ? subscriptions : {}).length), _defineProperty(_ref9, QueryPreviewTabs.apiConfig, 0), _defineProperty(_ref9, QueryPreviewTabs.queryinfo, 0), _defineProperty(_ref9, QueryPreviewTabs.actions, actions.length), _ref9;
  });
  return {
    selectQueryComparator: selectQueryComparator,
    selectApiStates: selectApiStates,
    selectAllQueries: selectAllQueries,
    selectAllVisbileQueries: selectAllVisbileQueries,
    selectSearchQueryRegex: selectSearchQueryRegex,
    selectCurrentQueryInfo: selectCurrentQueryInfo,
    selectCurrentQueryTags: selectCurrentQueryTags,
    selectApiStatsOfCurrentQuery: selectApiStatsOfCurrentQuery,
    selectSubscriptionsOfCurrentQuery: selectSubscriptionsOfCurrentQuery,
    selectApiOfCurrentQuery: selectApiOfCurrentQuery,
    selectTabCounters: selectTabCounters,
    selectActionsOfCurrentQuery: selectActionsOfCurrentQuery
  };
}