import _defineProperty from "@babel/runtime/helpers/defineProperty";

var _mapStatusToFactor, _queryComparators;

import { QueryStatus } from '@reduxjs/toolkit/query';
export var QueryComparators;

(function (QueryComparators) {
  QueryComparators["fulfilledTimeStamp"] = "timestamp";
  QueryComparators["queryKey"] = "key";
  QueryComparators["status"] = "status";
  QueryComparators["endpointName"] = "endpointName";
  QueryComparators["apiReducerPath"] = "apiReducerPath";
})(QueryComparators || (QueryComparators = {}));

export var sortQueryOptions = [{
  label: 'last updated',
  value: QueryComparators.fulfilledTimeStamp
}, {
  label: 'query key',
  value: QueryComparators.queryKey
}, {
  label: 'status',
  value: QueryComparators.status
}, {
  label: 'endpoint',
  value: QueryComparators.endpointName
}, {
  label: 'reducerPath',
  value: QueryComparators.apiReducerPath
}];

function sortQueryByFulfilled(thisQueryInfo, thatQueryInfo) {
  var _thisQueryInfo$state$, _thatQueryInfo$state$;

  var thisFulfilled = (_thisQueryInfo$state$ = thisQueryInfo.state.fulfilledTimeStamp) !== null && _thisQueryInfo$state$ !== void 0 ? _thisQueryInfo$state$ : -1;
  var thatFulfilled = (_thatQueryInfo$state$ = thatQueryInfo.state.fulfilledTimeStamp) !== null && _thatQueryInfo$state$ !== void 0 ? _thatQueryInfo$state$ : -1;
  return thisFulfilled - thatFulfilled;
}

var mapStatusToFactor = (_mapStatusToFactor = {}, _defineProperty(_mapStatusToFactor, QueryStatus.uninitialized, 1), _defineProperty(_mapStatusToFactor, QueryStatus.pending, 2), _defineProperty(_mapStatusToFactor, QueryStatus.rejected, 3), _defineProperty(_mapStatusToFactor, QueryStatus.fulfilled, 4), _mapStatusToFactor);

function sortQueryByStatus(thisQueryInfo, thatQueryInfo) {
  var thisTerm = mapStatusToFactor[thisQueryInfo.state.status] || -1;
  var thatTerm = mapStatusToFactor[thatQueryInfo.state.status] || -1;
  return thisTerm - thatTerm;
}

export function compareJSONPrimitive(a, b) {
  if (a === b) {
    return 0;
  }

  return a > b ? 1 : -1;
}

function sortByQueryKey(thisQueryInfo, thatQueryInfo) {
  return compareJSONPrimitive(thisQueryInfo.queryKey, thatQueryInfo.queryKey);
}

function sortQueryByEndpointName(thisQueryInfo, thatQueryInfo) {
  var _thisQueryInfo$state$2, _thatQueryInfo$state$2;

  var thisEndpointName = (_thisQueryInfo$state$2 = thisQueryInfo.state.endpointName) !== null && _thisQueryInfo$state$2 !== void 0 ? _thisQueryInfo$state$2 : '';
  var thatEndpointName = (_thatQueryInfo$state$2 = thatQueryInfo.state.endpointName) !== null && _thatQueryInfo$state$2 !== void 0 ? _thatQueryInfo$state$2 : '';
  return compareJSONPrimitive(thisEndpointName, thatEndpointName);
}

function sortByApiReducerPath(thisQueryInfo, thatQueryInfo) {
  return compareJSONPrimitive(thisQueryInfo.reducerPath, thatQueryInfo.reducerPath);
}

export var queryComparators = (_queryComparators = {}, _defineProperty(_queryComparators, QueryComparators.fulfilledTimeStamp, sortQueryByFulfilled), _defineProperty(_queryComparators, QueryComparators.status, sortQueryByStatus), _defineProperty(_queryComparators, QueryComparators.endpointName, sortQueryByEndpointName), _defineProperty(_queryComparators, QueryComparators.queryKey, sortByQueryKey), _defineProperty(_queryComparators, QueryComparators.apiReducerPath, sortByApiReducerPath), _queryComparators);