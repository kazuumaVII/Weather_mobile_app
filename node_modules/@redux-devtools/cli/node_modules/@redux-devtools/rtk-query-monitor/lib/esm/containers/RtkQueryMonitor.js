import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import RtkQueryInspector from './RtkQueryInspector';
import { reducer } from '../reducers';
import { createThemeState, StyleUtilsContext } from '../styles/createStylingFromTheme';

var RtkQueryMonitor = /*#__PURE__*/function (_Component) {
  _inherits(RtkQueryMonitor, _Component);

  var _super = _createSuper(RtkQueryMonitor);

  function RtkQueryMonitor(props) {
    var _this;

    _classCallCheck(this, RtkQueryMonitor);

    _this = _super.call(this, props);
    _this.state = {
      styleUtils: createThemeState(props)
    };
    return _this;
  }

  _createClass(RtkQueryMonitor, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          currentStateIndex = _this$props.currentStateIndex,
          computedStates = _this$props.computedStates,
          monitorState = _this$props.monitorState,
          dispatch = _this$props.dispatch,
          actionsById = _this$props.actionsById;
      return /*#__PURE__*/React.createElement(StyleUtilsContext.Provider, {
        value: this.state.styleUtils
      }, /*#__PURE__*/React.createElement(RtkQueryInspector, {
        computedStates: computedStates,
        currentStateIndex: currentStateIndex,
        monitorState: monitorState,
        dispatch: dispatch,
        styleUtils: this.state.styleUtils,
        actionsById: actionsById
      }));
    }
  }]);

  return RtkQueryMonitor;
}(Component);

_defineProperty(RtkQueryMonitor, "update", reducer);

_defineProperty(RtkQueryMonitor, "propTypes", {
  dispatch: PropTypes.func,
  computedStates: PropTypes.array,
  currentStateIndex: PropTypes.number,
  actionsById: PropTypes.object,
  stagedActionIds: PropTypes.array,
  skippedActionIds: PropTypes.array,
  monitorState: PropTypes.object,
  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
  invertTheme: PropTypes.bool
});

_defineProperty(RtkQueryMonitor, "defaultProps", {
  theme: 'nicinabox',
  invertTheme: false
});

export default RtkQueryMonitor;