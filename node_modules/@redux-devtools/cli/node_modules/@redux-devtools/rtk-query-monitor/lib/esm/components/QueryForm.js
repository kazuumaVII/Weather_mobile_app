import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
import { StyleUtilsContext } from '../styles/createStylingFromTheme';
import { Select } from '@redux-devtools/ui';
import debounce from 'lodash.debounce';
import { sortQueryOptions } from '../utils/comparators';
import { filterQueryOptions } from '../utils/filters';
import { SortOrderButton } from './SortOrderButton';
import { RegexIcon } from './RegexIcon';
var selectId = 'rtk-query-comp-select';
var searchId = 'rtk-query-search-query';
var filterSelectId = 'rtk-query-search-query-select';
var searchPlaceholder = 'filter query by...';
var labels = {
  regexToggle: {
    info: 'Use regular expression search',
    error: 'Invalid regular expression provided'
  }
};
export var QueryForm = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(QueryForm, _React$PureComponent);

  var _super = _createSuper(QueryForm);

  function QueryForm(props) {
    var _this;

    _classCallCheck(this, QueryForm);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "inputSearchRef", /*#__PURE__*/React.createRef());

    _defineProperty(_assertThisInitialized(_this), "handleSubmit", function (evt) {
      evt.preventDefault();
    });

    _defineProperty(_assertThisInitialized(_this), "handleButtonGroupClick", function (isAsc) {
      _this.props.onFormValuesChange({
        isAscendingQueryComparatorOrder: isAsc
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleSelectComparatorChange", function (option) {
      if (typeof (option === null || option === void 0 ? void 0 : option.value) === 'string') {
        _this.props.onFormValuesChange({
          queryComparator: option.value
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleSelectFilterChange", function (option) {
      if (typeof (option === null || option === void 0 ? void 0 : option.value) === 'string') {
        _this.props.onFormValuesChange({
          queryFilter: option.value
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleRegexSearchClick", function () {
      _this.props.onFormValuesChange({
        isRegexSearch: !_this.props.values.isRegexSearch
      });
    });

    _defineProperty(_assertThisInitialized(_this), "restoreCaretPosition", function (start, end) {
      window.requestAnimationFrame(function () {
        if (_this.inputSearchRef.current) {
          _this.inputSearchRef.current.selectionStart = start;
          _this.inputSearchRef.current.selectionEnd = end;
        }
      });
    });

    _defineProperty(_assertThisInitialized(_this), "invalidateSearchValueFromProps", debounce(function () {
      _this.props.onFormValuesChange({
        searchValue: _this.state.searchValue
      });
    }, 150));

    _defineProperty(_assertThisInitialized(_this), "handleSearchChange", function (evt) {
      var searchValue = evt.target.value.trim();

      _this.setState({
        searchValue: searchValue
      });

      _this.invalidateSearchValueFromProps();
    });

    _defineProperty(_assertThisInitialized(_this), "handleClearSearchClick", function (evt) {
      evt.preventDefault();

      if (_this.state.searchValue) {
        _this.setState({
          searchValue: ''
        });

        _this.invalidateSearchValueFromProps();
      }
    });

    _this.state = {
      searchValue: props.values.searchValue
    };
    return _this;
  }

  _createClass(QueryForm, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          searchQueryRegex = _this$props.searchQueryRegex,
          _this$props$values = _this$props.values,
          isAsc = _this$props$values.isAscendingQueryComparatorOrder,
          queryComparator = _this$props$values.queryComparator,
          searchValue = _this$props$values.searchValue,
          queryFilter = _this$props$values.queryFilter,
          isRegexSearch = _this$props$values.isRegexSearch;
      var isRegexInvalid = isRegexSearch && searchValue.length > 0 && searchQueryRegex == null;
      var regexToggleType = isRegexInvalid ? 'error' : 'info';
      var regexToggleLabel = labels.regexToggle[regexToggleType];
      return /*#__PURE__*/React.createElement(StyleUtilsContext.Consumer, null, function (_ref) {
        var styling = _ref.styling,
            base16Theme = _ref.base16Theme;
        return /*#__PURE__*/React.createElement("form", _extends({
          action: "#",
          onSubmit: _this2.handleSubmit
        }, styling('queryForm')), /*#__PURE__*/React.createElement("div", styling('queryListHeader'), /*#__PURE__*/React.createElement("label", _extends({
          htmlFor: searchId
        }, styling('srOnly')), "filter query"), /*#__PURE__*/React.createElement("div", styling('querySearch'), /*#__PURE__*/React.createElement("input", {
          ref: _this2.inputSearchRef,
          type: "search",
          value: _this2.state.searchValue,
          onChange: _this2.handleSearchChange,
          placeholder: searchPlaceholder
        }), /*#__PURE__*/React.createElement("button", _extends({
          type: "reset",
          "aria-label": "clear search",
          "data-invisible": +(_this2.state.searchValue.length === 0) || undefined,
          onClick: _this2.handleClearSearchClick
        }, styling('closeButton'))), /*#__PURE__*/React.createElement("button", _extends({
          type: "button",
          "aria-label": regexToggleLabel,
          title: regexToggleLabel,
          "data-type": regexToggleType,
          "aria-pressed": isRegexSearch,
          onClick: _this2.handleRegexSearchClick
        }, styling('toggleButton')), /*#__PURE__*/React.createElement(RegexIcon, null))), /*#__PURE__*/React.createElement("label", _extends({
          htmlFor: selectId
        }, styling('srOnly')), "filter by"), /*#__PURE__*/React.createElement(Select, {
          id: filterSelectId,
          isSearchable: false,
          options: filterQueryOptions,
          theme: base16Theme,
          value: filterQueryOptions.find(function (opt) {
            return (opt === null || opt === void 0 ? void 0 : opt.value) === queryFilter;
          }),
          onChange: _this2.handleSelectFilterChange
        })), /*#__PURE__*/React.createElement("div", styling('sortBySection'), /*#__PURE__*/React.createElement("label", {
          htmlFor: selectId
        }, "Sort by"), /*#__PURE__*/React.createElement(Select, {
          id: selectId,
          isSearchable: false,
          theme: base16Theme,
          value: sortQueryOptions.find(function (opt) {
            return (opt === null || opt === void 0 ? void 0 : opt.value) === queryComparator;
          }),
          options: sortQueryOptions,
          onChange: _this2.handleSelectComparatorChange
        }), /*#__PURE__*/React.createElement(SortOrderButton, {
          id: 'rtk-query-sort-order-button',
          isAsc: isAsc,
          onChange: _this2.handleButtonGroupClick
        })));
      });
    }
  }]);

  return QueryForm;
}(React.PureComponent);