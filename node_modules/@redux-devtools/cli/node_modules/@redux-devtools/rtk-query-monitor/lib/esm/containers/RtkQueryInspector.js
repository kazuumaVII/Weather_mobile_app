import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent, createRef } from 'react';
import { createInspectorSelectors, computeSelectorSource } from '../selectors';
import { changeQueryFormValues, selectedPreviewTab, selectQueryKey } from '../reducers';
import { QueryList } from '../components/QueryList';
import { QueryForm } from '../components/QueryForm';
import { QueryPreview } from './QueryPreview';

var RtkQueryInspector = /*#__PURE__*/function (_PureComponent) {
  _inherits(RtkQueryInspector, _PureComponent);

  var _super = _createSuper(RtkQueryInspector);

  function RtkQueryInspector(props) {
    var _this;

    _classCallCheck(this, RtkQueryInspector);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "inspectorRef", /*#__PURE__*/createRef());

    _defineProperty(_assertThisInitialized(_this), "isWideIntervalRef", null);

    _defineProperty(_assertThisInitialized(_this), "selectors", createInspectorSelectors());

    _defineProperty(_assertThisInitialized(_this), "updateSizeMode", function () {
      if (_this.inspectorRef.current) {
        var isWideLayout = _this.inspectorRef.current.offsetWidth >= RtkQueryInspector.wideLayout;

        if (isWideLayout !== _this.state.isWideLayout) {
          _this.setState({
            isWideLayout: isWideLayout
          });
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleQueryFormValuesChange", function (values) {
      _this.props.dispatch(changeQueryFormValues(values));
    });

    _defineProperty(_assertThisInitialized(_this), "handleSelectQuery", function (queryInfo) {
      _this.props.dispatch(selectQueryKey(queryInfo));
    });

    _defineProperty(_assertThisInitialized(_this), "handleTabChange", function (tab) {
      _this.props.dispatch(selectedPreviewTab(tab));
    });

    _this.state = {
      isWideLayout: true,
      selectorsSource: computeSelectorSource(props, null)
    };
    return _this;
  }

  _createClass(RtkQueryInspector, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.updateSizeMode();
      this.isWideIntervalRef = setInterval(this.updateSizeMode, 300);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.isWideIntervalRef) {
        clearTimeout(this.isWideIntervalRef);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
          selectorsSource = _this$state.selectorsSource,
          isWideLayout = _this$state.isWideLayout;
      var styling = this.props.styleUtils.styling;
      var allVisibleRtkResourceInfos = this.selectors.selectAllVisbileQueries(selectorsSource);
      var currentResInfo = this.selectors.selectCurrentQueryInfo(selectorsSource);
      var apiStates = this.selectors.selectApiStates(selectorsSource);
      var hasNoApi = apiStates == null;
      var searchQueryRegex = this.selectors.selectSearchQueryRegex(selectorsSource);
      return /*#__PURE__*/React.createElement("div", _extends({
        ref: this.inspectorRef,
        "data-wide-layout": +this.state.isWideLayout
      }, styling('inspector')), /*#__PURE__*/React.createElement("div", _extends({}, styling('querySectionWrapper'), {
        "data-wide-layout": +this.state.isWideLayout
      }), /*#__PURE__*/React.createElement(QueryForm, {
        searchQueryRegex: searchQueryRegex,
        values: selectorsSource.monitorState.queryForm.values,
        onFormValuesChange: this.handleQueryFormValuesChange
      }), /*#__PURE__*/React.createElement(QueryList, {
        onSelectQuery: this.handleSelectQuery,
        resInfos: allVisibleRtkResourceInfos,
        selectedQueryKey: selectorsSource.monitorState.selectedQueryKey
      })), /*#__PURE__*/React.createElement(QueryPreview, {
        selectorsSource: this.state.selectorsSource,
        selectors: this.selectors,
        resInfo: currentResInfo,
        selectedTab: selectorsSource.monitorState.selectedPreviewTab,
        onTabChange: this.handleTabChange,
        styling: styling,
        isWideLayout: isWideLayout,
        hasNoApis: hasNoApi
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      var selectorsSource = computeSelectorSource(props, state.selectorsSource);

      if (selectorsSource !== state.selectorsSource) {
        return {
          selectorsSource: selectorsSource
        };
      }

      return null;
    }
  }]);

  return RtkQueryInspector;
}(PureComponent);

_defineProperty(RtkQueryInspector, "wideLayout", 600);

export default RtkQueryInspector;