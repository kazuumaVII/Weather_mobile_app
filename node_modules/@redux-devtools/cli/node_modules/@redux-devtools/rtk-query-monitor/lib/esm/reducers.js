import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import { createSlice } from '@reduxjs/toolkit';
import { QueryPreviewTabs } from './types';
import { QueryComparators } from './utils/comparators';
import { QueryFilters } from './utils/filters';
var initialState = {
  queryForm: {
    values: {
      queryComparator: QueryComparators.fulfilledTimeStamp,
      isAscendingQueryComparatorOrder: false,
      searchValue: '',
      isRegexSearch: false,
      queryFilter: QueryFilters.queryKey
    }
  },
  selectedPreviewTab: QueryPreviewTabs.queryinfo,
  selectedQueryKey: null
};
var monitorSlice = createSlice({
  /**
   * `@@` prefix is mandatory.
   * @see lifedAction @ `packages/redux-devtools-app/src/actions/index.ts`
   */
  name: '@@rtk-query-monitor',
  initialState: initialState,
  reducers: {
    changeQueryFormValues: function changeQueryFormValues(state, action) {
      state.queryForm.values = _objectSpread(_objectSpread({}, state.queryForm.values), action.payload);
    },
    selectQueryKey: function selectQueryKey(state, action) {
      state.selectedQueryKey = {
        queryKey: action.payload.queryKey,
        reducerPath: action.payload.reducerPath
      };
    },
    selectedPreviewTab: function selectedPreviewTab(state, action) {
      state.selectedPreviewTab = action.payload;
    }
  }
});
export function reducer(props, state, action) {
  return monitorSlice.reducer(state, action);
}
var _monitorSlice$actions = monitorSlice.actions,
    selectQueryKey = _monitorSlice$actions.selectQueryKey,
    changeQueryFormValues = _monitorSlice$actions.changeQueryFormValues,
    selectedPreviewTab = _monitorSlice$actions.selectedPreviewTab;
export { selectQueryKey, changeQueryFormValues, selectedPreviewTab };