import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import { isAllOf, isPlainObject } from '@reduxjs/toolkit';
import { QueryStatus } from '@reduxjs/toolkit/query';
import { missingTagId } from '../monitor-config';
import { compareJSONPrimitive } from './comparators';
import { emptyArray } from './object';
import { formatMs } from './formatters';
import * as statistics from './statistics';
var rtkqueryApiStateKeys = ['queries', 'mutations', 'config', 'provided', 'subscriptions'];
/**
 * Type guard used to select apis from the user store state.
 * @param val
 * @returns {boolean}
 */

export function isApiSlice(val) {
  if (!isPlainObject(val)) {
    return false;
  }

  for (var i = 0, len = rtkqueryApiStateKeys.length; i < len; i++) {
    if (!isPlainObject(val[rtkqueryApiStateKeys[i]])) {
      return false;
    }
  }

  return true;
}
/**
 * Indexes api states by their `reducerPath`.
 *
 * Returns `null` if there are no api slice or `reduxStoreState`
 * is not an object.
 *
 * @param reduxStoreState
 * @returns
 */

export function getApiStatesOf(reduxStoreState) {
  if (!isPlainObject(reduxStoreState)) {
    return null;
  }

  var output = {};
  var keys = Object.keys(reduxStoreState);

  for (var i = 0, len = keys.length; i < len; i++) {
    var key = keys[i];
    var value = reduxStoreState[key];

    if (isApiSlice(value)) {
      output[key] = value;
    }
  }

  if (Object.keys(output).length === 0) {
    return null;
  }

  return output;
}
export function extractAllApiQueries(apiStatesByReducerPath) {
  if (!apiStatesByReducerPath) {
    return emptyArray;
  }

  var reducerPaths = Object.keys(apiStatesByReducerPath);
  var output = [];

  for (var i = 0, len = reducerPaths.length; i < len; i++) {
    var reducerPath = reducerPaths[i];
    var api = apiStatesByReducerPath[reducerPath];
    var queryKeys = Object.keys(api.queries);

    for (var j = 0, qKeysLen = queryKeys.length; j < qKeysLen; j++) {
      var queryKey = queryKeys[j];
      var state = api.queries[queryKey];

      if (state) {
        output.push({
          type: 'query',
          reducerPath: reducerPath,
          queryKey: queryKey,
          state: state
        });
      }
    }
  }

  return output;
}
export function extractAllApiMutations(apiStatesByReducerPath) {
  if (!apiStatesByReducerPath) {
    return emptyArray;
  }

  var reducerPaths = Object.keys(apiStatesByReducerPath);
  var output = [];

  for (var i = 0, len = reducerPaths.length; i < len; i++) {
    var reducerPath = reducerPaths[i];
    var api = apiStatesByReducerPath[reducerPath];
    var mutationKeys = Object.keys(api.mutations);

    for (var j = 0, mKeysLen = mutationKeys.length; j < mKeysLen; j++) {
      var queryKey = mutationKeys[j];
      var state = api.mutations[queryKey];

      if (state) {
        output.push({
          type: 'mutation',
          reducerPath: reducerPath,
          queryKey: queryKey,
          state: state
        });
      }
    }
  }

  return output;
}

function computeQueryTallyOf(queryState) {
  var queries = Object.values(queryState);
  var output = {
    count: 0
  };

  for (var i = 0, len = queries.length; i < len; i++) {
    var query = queries[i];

    if (query) {
      output.count++;

      if (!output[query.status]) {
        output[query.status] = 1;
      } else {
        output[query.status]++;
      }
    }
  }

  return output;
}

function tallySubscriptions(subsState) {
  var subsOfQueries = Object.values(subsState);
  var output = 0;

  for (var i = 0, len = subsOfQueries.length; i < len; i++) {
    var subsOfQuery = subsOfQueries[i];

    if (subsOfQuery) {
      output += Object.keys(subsOfQuery).length;
    }
  }

  return output;
}

function computeRtkQueryRequests(type, api, sortedActions, currentStateIndex) {
  var _api$type;

  var requestById = {};
  var matcher = type === 'queries' ? matchesExecuteQuery(api.config.reducerPath) : matchesExecuteMutation(api.config.reducerPath);

  for (var i = 0, len = sortedActions.length; i < len && i <= currentStateIndex; i++) {
    var action = sortedActions[i];

    if (matcher(action)) {
      var requestRecord = requestById[action.meta.requestId];

      if (!requestRecord) {
        var _action$meta, _action$meta$arg, _arg$endpointName, _action$meta2, _action$meta2$arg;

        var queryCacheKey = (_action$meta = action.meta) === null || _action$meta === void 0 ? void 0 : (_action$meta$arg = _action$meta.arg) === null || _action$meta$arg === void 0 ? void 0 : _action$meta$arg.queryCacheKey;
        var queryKey = typeof queryCacheKey === 'string' ? queryCacheKey : action.meta.requestId;
        var endpointName = (_arg$endpointName = (_action$meta2 = action.meta) === null || _action$meta2 === void 0 ? void 0 : (_action$meta2$arg = _action$meta2.arg) === null || _action$meta2$arg === void 0 ? void 0 : _action$meta2$arg.endpointName) !== null && _arg$endpointName !== void 0 ? _arg$endpointName : '-';
        requestById[action.meta.requestId] = requestRecord = {
          queryKey: queryKey,
          requestId: action.meta.requestId,
          endpointName: endpointName,
          status: action.meta.requestStatus
        };
      }

      requestRecord.status = action.meta.requestStatus;

      if (action.meta.requestStatus === QueryStatus.pending && typeof action.meta.startedTimeStamp === 'number') {
        requestRecord.startedTimeStamp = action.meta.startedTimeStamp;
      }

      if (action.meta.requestStatus === QueryStatus.fulfilled && typeof action.meta.fulfilledTimeStamp === 'number') {
        requestRecord.fulfilledTimeStamp = action.meta.fulfilledTimeStamp;
      }
    }
  }

  var requestIds = Object.keys(requestById); // Patch queries that have pending actions that are committed

  for (var _i = 0, _len = requestIds.length; _i < _len; _i++) {
    var requestId = requestIds[_i];
    var request = requestById[requestId];

    if (typeof request.startedTimeStamp === 'undefined' && typeof request.fulfilledTimeStamp === 'number') {
      var _api$type$request$que;

      var startedTimeStampFromCache = (_api$type$request$que = api[type][request.queryKey]) === null || _api$type$request$que === void 0 ? void 0 : _api$type$request$que.startedTimeStamp;

      if (typeof startedTimeStampFromCache === 'number') {
        request.startedTimeStamp = startedTimeStampFromCache;
      }
    }
  } // Add queries that have pending and fulfilled actions committed


  var queryCacheEntries = Object.entries((_api$type = api[type]) !== null && _api$type !== void 0 ? _api$type : {});

  for (var _i2 = 0, _len2 = queryCacheEntries.length; _i2 < _len2; _i2++) {
    var _requestId2;

    var _queryCacheEntries$_i = _slicedToArray(queryCacheEntries[_i2], 2),
        _queryCacheKey = _queryCacheEntries$_i[0],
        queryCache = _queryCacheEntries$_i[1];

    var _requestId = type === 'queries' ? (_requestId2 = queryCache === null || queryCache === void 0 ? void 0 : queryCache.requestId) !== null && _requestId2 !== void 0 ? _requestId2 : '' : _queryCacheKey;

    if (queryCache && !Object.prototype.hasOwnProperty.call(requestById, _requestId)) {
      var startedTimeStamp = queryCache === null || queryCache === void 0 ? void 0 : queryCache.startedTimeStamp;
      var fulfilledTimeStamp = queryCache === null || queryCache === void 0 ? void 0 : queryCache.fulfilledTimeStamp;

      if (typeof startedTimeStamp === 'number' && typeof fulfilledTimeStamp === 'number') {
        var _queryCache$endpointN;

        requestById[_requestId] = {
          queryKey: _queryCacheKey,
          requestId: _requestId,
          endpointName: (_queryCache$endpointN = queryCache.endpointName) !== null && _queryCache$endpointN !== void 0 ? _queryCache$endpointN : '',
          startedTimeStamp: startedTimeStamp,
          fulfilledTimeStamp: fulfilledTimeStamp,
          status: queryCache.status
        };
      }
    }
  }

  return requestById;
}

function formatRtkRequest(rtkRequest) {
  if (!rtkRequest) {
    return null;
  }

  var fulfilledTimeStamp = rtkRequest.fulfilledTimeStamp;
  var startedTimeStamp = rtkRequest.startedTimeStamp;
  var output = {
    queryKey: rtkRequest.queryKey,
    requestId: rtkRequest.requestId,
    endpointName: rtkRequest.endpointName,
    startedAt: '-',
    completedAt: '-',
    duration: '-'
  };

  if (typeof fulfilledTimeStamp === 'number' && typeof startedTimeStamp === 'number') {
    output.startedAt = new Date(startedTimeStamp).toISOString();
    output.completedAt = new Date(fulfilledTimeStamp).toISOString();
    output.duration = formatMs(fulfilledTimeStamp - startedTimeStamp);
  }

  return output;
}

function computeQueryApiTimings(requestById) {
  var requests = Object.values(requestById);
  var latestRequest = null;
  var oldestRequest = null;
  var slowestRequest = null;
  var fastestRequest = null;
  var slowestDuration = 0;
  var fastestDuration = Number.MAX_SAFE_INTEGER;
  var pendingDurations = [];

  for (var i = 0, len = requests.length; i < len; i++) {
    var request = requests[i];
    var fulfilledTimeStamp = request.fulfilledTimeStamp,
        startedTimeStamp = request.startedTimeStamp;

    if (typeof fulfilledTimeStamp === 'number') {
      var _latestRequest, _oldestRequest;

      var latestFulfilledTimeStamp = ((_latestRequest = latestRequest) === null || _latestRequest === void 0 ? void 0 : _latestRequest.fulfilledTimeStamp) || 0;
      var oldestFulfilledTimeStamp = ((_oldestRequest = oldestRequest) === null || _oldestRequest === void 0 ? void 0 : _oldestRequest.fulfilledTimeStamp) || Number.MAX_SAFE_INTEGER;

      if (fulfilledTimeStamp > latestFulfilledTimeStamp) {
        latestRequest = request;
      }

      if (fulfilledTimeStamp < oldestFulfilledTimeStamp) {
        oldestRequest = request;
      }

      if (typeof startedTimeStamp === 'number' && startedTimeStamp <= fulfilledTimeStamp) {
        var pendingDuration = fulfilledTimeStamp - startedTimeStamp;
        pendingDurations.push(pendingDuration);

        if (pendingDuration > slowestDuration) {
          slowestDuration = pendingDuration;
          slowestRequest = request;
        }

        if (pendingDuration < fastestDuration) {
          fastestDuration = pendingDuration;
          fastestRequest = request;
        }
      }
    }
  }

  var average = pendingDurations.length > 0 ? formatMs(statistics.mean(pendingDurations)) : '-';
  var median = pendingDurations.length > 0 ? formatMs(statistics.median(pendingDurations)) : '-';
  return {
    latest: formatRtkRequest(latestRequest),
    oldest: formatRtkRequest(oldestRequest),
    slowest: formatRtkRequest(slowestRequest),
    fastest: formatRtkRequest(fastestRequest),
    average: average,
    median: median
  };
}

function computeApiTimings(api, actionsById, currentStateIndex) {
  var sortedActions = Object.entries(actionsById).sort(function (thisAction, thatAction) {
    return compareJSONPrimitive(Number(thisAction[0]), Number(thatAction[0]));
  }).map(function (entry) {
    return entry[1].action;
  });
  var queryRequestsById = computeRtkQueryRequests('queries', api, sortedActions, currentStateIndex);
  var mutationRequestsById = computeRtkQueryRequests('mutations', api, sortedActions, currentStateIndex);
  return {
    queries: computeQueryApiTimings(queryRequestsById),
    mutations: computeQueryApiTimings(mutationRequestsById)
  };
}

export function generateApiStatsOfCurrentQuery(api, actionsById, currentStateIndex) {
  if (!api) {
    return null;
  }

  return {
    timings: computeApiTimings(api, actionsById, currentStateIndex),
    tally: {
      cachedQueries: computeQueryTallyOf(api.queries),
      cachedMutations: computeQueryTallyOf(api.mutations),
      tagTypes: Object.keys(api.provided).length,
      subscriptions: tallySubscriptions(api.subscriptions)
    }
  };
}
export function flipComparator(comparator) {
  return function flipped(a, b) {
    return comparator(b, a);
  };
}
export function isQuerySelected(selectedQueryKey, queryInfo) {
  return !!selectedQueryKey && selectedQueryKey.queryKey === queryInfo.queryKey && selectedQueryKey.reducerPath === queryInfo.reducerPath;
}
export function getApiStateOf(queryInfo, apiStates) {
  var _apiStates$queryInfo$;

  if (!apiStates || !queryInfo) {
    return null;
  }

  return (_apiStates$queryInfo$ = apiStates[queryInfo.reducerPath]) !== null && _apiStates$queryInfo$ !== void 0 ? _apiStates$queryInfo$ : null;
}
export function getQuerySubscriptionsOf(queryInfo, apiStates) {
  var _apiStates$queryInfo$2, _apiStates$queryInfo$3, _apiStates$queryInfo$4;

  if (!apiStates || !queryInfo) {
    return null;
  }

  return (_apiStates$queryInfo$2 = (_apiStates$queryInfo$3 = apiStates[queryInfo.reducerPath]) === null || _apiStates$queryInfo$3 === void 0 ? void 0 : (_apiStates$queryInfo$4 = _apiStates$queryInfo$3.subscriptions) === null || _apiStates$queryInfo$4 === void 0 ? void 0 : _apiStates$queryInfo$4[queryInfo.queryKey]) !== null && _apiStates$queryInfo$2 !== void 0 ? _apiStates$queryInfo$2 : null;
}
export function getProvidedOf(queryInfo, apiStates) {
  var _apiStates$queryInfo$5, _apiStates$queryInfo$6;

  if (!apiStates || !queryInfo) {
    return null;
  }

  return (_apiStates$queryInfo$5 = (_apiStates$queryInfo$6 = apiStates[queryInfo.reducerPath]) === null || _apiStates$queryInfo$6 === void 0 ? void 0 : _apiStates$queryInfo$6.provided) !== null && _apiStates$queryInfo$5 !== void 0 ? _apiStates$queryInfo$5 : null;
}
export function getQueryTagsOf(resInfo, provided) {
  if (!resInfo || resInfo.type === 'mutation' || !provided) {
    return emptyArray;
  }

  var tagTypes = Object.keys(provided);

  if (tagTypes.length < 1) {
    return emptyArray;
  }

  var output = [];

  for (var _i3 = 0, _Object$entries = Object.entries(provided); _i3 < _Object$entries.length; _i3++) {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i3], 2),
        type = _Object$entries$_i[0],
        tagIds = _Object$entries$_i[1];

    if (tagIds) {
      for (var _i4 = 0, _Object$entries2 = Object.entries(tagIds); _i4 < _Object$entries2.length; _i4++) {
        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i4], 2),
            id = _Object$entries2$_i[0],
            queryKeys = _Object$entries2$_i[1];

        if (queryKeys.includes(resInfo.queryKey)) {
          var tag = {
            type: type
          };

          if (id !== missingTagId) {
            tag.id = id;
          }

          output.push(tag);
        }
      }
    }
  }

  return output;
}
/**
 * Computes query status flags.
 * @param status
 * @see https://redux-toolkit.js.org/rtk-query/usage/queries#frequently-used-query-hook-return-values
 * @see https://github.com/reduxjs/redux-toolkit/blob/b718e01d323d3ab4b913e5d88c9b90aa790bb975/src/query/core/apiState.ts#L63
 */

export function getQueryStatusFlags(_ref) {
  var status = _ref.status,
      data = _ref.data;
  return {
    isUninitialized: status === QueryStatus.uninitialized,
    isFetching: status === QueryStatus.pending,
    isSuccess: status === QueryStatus.fulfilled && !!data,
    isError: status === QueryStatus.rejected
  };
}
/**
 * endpoint matcher
 * @param endpointName
 * @see https://github.com/reduxjs/redux-toolkit/blob/b718e01d323d3ab4b913e5d88c9b90aa790bb975/src/query/core/buildThunks.ts#L415
 */

export function matchesEndpoint(endpointName) {
  return function (action) {
    var _action$meta3, _action$meta3$arg;

    return endpointName != null && (action === null || action === void 0 ? void 0 : (_action$meta3 = action.meta) === null || _action$meta3 === void 0 ? void 0 : (_action$meta3$arg = _action$meta3.arg) === null || _action$meta3$arg === void 0 ? void 0 : _action$meta3$arg.endpointName) === endpointName;
  };
}

function matchesQueryKey(queryKey) {
  return function (action) {
    var _action$meta4, _action$meta4$arg;

    return (action === null || action === void 0 ? void 0 : (_action$meta4 = action.meta) === null || _action$meta4 === void 0 ? void 0 : (_action$meta4$arg = _action$meta4.arg) === null || _action$meta4$arg === void 0 ? void 0 : _action$meta4$arg.queryCacheKey) === queryKey;
  };
}

function macthesRequestId(requestId) {
  return function (action) {
    var _action$meta5;

    return (action === null || action === void 0 ? void 0 : (_action$meta5 = action.meta) === null || _action$meta5 === void 0 ? void 0 : _action$meta5.requestId) === requestId;
  };
}

function matchesReducerPath(reducerPath) {
  return function (action) {
    return typeof (action === null || action === void 0 ? void 0 : action.type) === 'string' && action.type.startsWith(reducerPath);
  };
}

function matchesExecuteQuery(reducerPath) {
  return function (action) {
    var _action$meta6, _action$meta7;

    return typeof (action === null || action === void 0 ? void 0 : action.type) === 'string' && action.type.startsWith("".concat(reducerPath, "/executeQuery")) && typeof ((_action$meta6 = action.meta) === null || _action$meta6 === void 0 ? void 0 : _action$meta6.requestId) === 'string' && typeof ((_action$meta7 = action.meta) === null || _action$meta7 === void 0 ? void 0 : _action$meta7.requestStatus) === 'string';
  };
}

function matchesExecuteMutation(reducerPath) {
  return function (action) {
    var _action$meta8, _action$meta9;

    return typeof (action === null || action === void 0 ? void 0 : action.type) === 'string' && action.type.startsWith("".concat(reducerPath, "/executeMutation")) && typeof ((_action$meta8 = action.meta) === null || _action$meta8 === void 0 ? void 0 : _action$meta8.requestId) === 'string' && typeof ((_action$meta9 = action.meta) === null || _action$meta9 === void 0 ? void 0 : _action$meta9.requestStatus) === 'string';
  };
}

export function getActionsOfCurrentQuery(currentQuery, actionById) {
  if (!currentQuery) {
    return emptyArray;
  }

  var matcher;

  if (currentQuery.type === 'mutation') {
    matcher = isAllOf(matchesReducerPath(currentQuery.reducerPath), macthesRequestId(currentQuery.queryKey));
  } else {
    matcher = isAllOf(matchesReducerPath(currentQuery.reducerPath), matchesQueryKey(currentQuery.queryKey));
  }

  var output = [];

  for (var _i5 = 0, _Object$entries3 = Object.entries(actionById); _i5 < _Object$entries3.length; _i5++) {
    var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i5], 2),
        liftedAction = _Object$entries3$_i[1];

    if (matcher(liftedAction === null || liftedAction === void 0 ? void 0 : liftedAction.action)) {
      output.push(liftedAction.action);
    }
  }

  return output.length === 0 ? emptyArray : output;
}