import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import { createSelector } from '@reduxjs/toolkit';
import { QueryStatus } from '@reduxjs/toolkit/dist/query';
import React, { PureComponent } from 'react';
import { formatMs } from '../utils/formatters';
import { identity } from '../utils/object';
import { getQueryStatusFlags } from '../utils/rtk-query';
import { TreeView } from './TreeView';
export var QueryPreviewInfo = /*#__PURE__*/function (_PureComponent) {
  _inherits(QueryPreviewInfo, _PureComponent);

  var _super = _createSuper(QueryPreviewInfo);

  function QueryPreviewInfo() {
    var _this;

    _classCallCheck(this, QueryPreviewInfo);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "shouldExpandNode", function (keyPath, value, layer) {
      var lastKey = keyPath[keyPath.length - 1];
      return layer <= 1 && lastKey !== 'query' && lastKey !== 'mutation';
    });

    _defineProperty(_assertThisInitialized(_this), "selectFormattedQuery", createSelector(identity, function (resInfo) {
      var state = resInfo.state,
          queryKey = resInfo.queryKey,
          reducerPath = resInfo.reducerPath;
      var startedAt = state.startedTimeStamp ? new Date(state.startedTimeStamp).toISOString() : '-';
      var loadedAt = state.fulfilledTimeStamp ? new Date(state.fulfilledTimeStamp).toISOString() : '-';
      var statusFlags = getQueryStatusFlags(state);
      var timings = {
        startedAt: startedAt,
        loadedAt: loadedAt,
        duration: '-'
      };

      if (state.fulfilledTimeStamp && state.startedTimeStamp && state.status !== QueryStatus.pending && state.startedTimeStamp <= state.fulfilledTimeStamp) {
        timings.duration = formatMs(state.fulfilledTimeStamp - state.startedTimeStamp);
      }

      if (resInfo.type === 'query') {
        return {
          key: queryKey,
          reducerPath: reducerPath,
          query: resInfo.state,
          statusFlags: statusFlags,
          timings: timings
        };
      }

      return {
        key: queryKey,
        reducerPath: reducerPath,
        mutation: resInfo.state,
        statusFlags: statusFlags,
        timings: timings
      };
    }));

    return _this;
  }

  _createClass(QueryPreviewInfo, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          resInfo = _this$props.resInfo,
          isWideLayout = _this$props.isWideLayout;
      var formattedQuery = this.selectFormattedQuery(resInfo);
      return /*#__PURE__*/React.createElement(TreeView, {
        data: formattedQuery,
        isWideLayout: isWideLayout,
        shouldExpandNode: this.shouldExpandNode
      });
    }
  }]);

  return QueryPreviewInfo;
}(PureComponent);