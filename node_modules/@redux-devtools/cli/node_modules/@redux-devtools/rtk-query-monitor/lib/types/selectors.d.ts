import { Action, Selector } from '@reduxjs/toolkit';
import { RtkQueryInspectorProps } from './containers/RtkQueryInspector';
import { ApiStats, QueryInfo, RtkQueryApiState, RtkQueryTag, SelectorsSource, QueryPreviewTabs, RtkResourceInfo } from './types';
import { Comparator } from './utils/comparators';
import { getApiStatesOf, extractAllApiQueries, getActionsOfCurrentQuery } from './utils/rtk-query';
declare type InspectorSelector<S, Output> = Selector<SelectorsSource<S>, Output>;
export declare function computeSelectorSource<S, A extends Action<unknown>>(props: RtkQueryInspectorProps<S, A>, previous?: SelectorsSource<S> | null): SelectorsSource<S>;
export interface InspectorSelectors<S> {
    readonly selectQueryComparator: InspectorSelector<S, Comparator<QueryInfo>>;
    readonly selectApiStates: InspectorSelector<S, ReturnType<typeof getApiStatesOf>>;
    readonly selectAllQueries: InspectorSelector<S, ReturnType<typeof extractAllApiQueries>>;
    readonly selectAllVisbileQueries: InspectorSelector<S, RtkResourceInfo[]>;
    readonly selectCurrentQueryInfo: InspectorSelector<S, RtkResourceInfo | null>;
    readonly selectSearchQueryRegex: InspectorSelector<S, RegExp | null>;
    readonly selectCurrentQueryTags: InspectorSelector<S, RtkQueryTag[]>;
    readonly selectApiStatsOfCurrentQuery: InspectorSelector<S, ApiStats | null>;
    readonly selectApiOfCurrentQuery: InspectorSelector<S, RtkQueryApiState | null>;
    readonly selectTabCounters: InspectorSelector<S, Record<QueryPreviewTabs, number>>;
    readonly selectSubscriptionsOfCurrentQuery: InspectorSelector<S, RtkQueryApiState['subscriptions'][string]>;
    readonly selectActionsOfCurrentQuery: InspectorSelector<S, ReturnType<typeof getActionsOfCurrentQuery>>;
}
export declare function createInspectorSelectors<S>(): InspectorSelectors<S>;
export {};
