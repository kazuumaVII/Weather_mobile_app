import React, { ReactNode, FormEvent, MouseEvent, ChangeEvent } from 'react';
import { QueryFormValues } from '../types';
import { SelectOption } from '../types';
import { QueryComparators } from '../utils/comparators';
import { QueryFilters } from '../utils/filters';
export interface QueryFormProps {
    values: QueryFormValues;
    searchQueryRegex: RegExp | null;
    onFormValuesChange: (values: Partial<QueryFormValues>) => void;
}
interface QueryFormState {
    searchValue: string;
}
export declare class QueryForm extends React.PureComponent<QueryFormProps, QueryFormState> {
    constructor(props: QueryFormProps);
    inputSearchRef: React.RefObject<HTMLInputElement>;
    handleSubmit: (evt: FormEvent<HTMLFormElement>) => void;
    handleButtonGroupClick: (isAsc: boolean) => void;
    handleSelectComparatorChange: (option: SelectOption<QueryComparators> | undefined | null) => void;
    handleSelectFilterChange: (option: SelectOption<QueryFilters> | undefined | null) => void;
    handleRegexSearchClick: () => void;
    restoreCaretPosition: (start: number | null, end: number | null) => void;
    invalidateSearchValueFromProps: import("lodash").DebouncedFunc<() => void>;
    handleSearchChange: (evt: ChangeEvent<HTMLInputElement>) => void;
    handleClearSearchClick: (evt: MouseEvent<HTMLButtonElement>) => void;
    render(): ReactNode;
}
export {};
