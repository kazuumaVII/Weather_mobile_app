import { Selector } from '@reduxjs/toolkit';
import React, { ComponentProps, ReactNode } from 'react';
import { JSONTree } from 'react-json-tree';
import { Base16Theme, StylingFunction } from 'react-base16-styling';
import { getJsonTreeTheme } from '../styles/createStylingFromTheme';
import { createTreeItemLabelRenderer } from '../styles/tree';
export interface TreeViewProps extends Partial<Pick<ComponentProps<typeof JSONTree>, 'keyPath' | 'shouldExpandNode' | 'hideRoot'>> {
    data: unknown;
    isWideLayout: boolean;
    before?: ReactNode;
    after?: ReactNode;
    children?: ReactNode;
}
export declare class TreeView extends React.PureComponent<TreeViewProps> {
    static defaultProps: {
        hideRoot: boolean;
        shouldExpandNode: (keyPath: (string | number)[], value: unknown, layer: number) => boolean;
    };
    readonly selectLabelRenderer: Selector<StylingFunction, ReturnType<typeof createTreeItemLabelRenderer>, never>;
    readonly selectGetItemString: Selector<StylingFunction, (type: string, data: unknown) => ReactNode, never>;
    readonly selectTheme: Selector<Base16Theme, ReturnType<typeof getJsonTreeTheme>, never>;
    constructor(props: TreeViewProps);
    render(): ReactNode;
}
