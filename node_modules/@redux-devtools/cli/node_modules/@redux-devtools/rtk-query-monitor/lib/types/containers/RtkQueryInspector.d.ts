import React, { PureComponent, ReactNode } from 'react';
import type { Dispatch, Action } from '@reduxjs/toolkit';
import type { LiftedAction, LiftedState } from '@redux-devtools/core';
import { QueryFormValues, QueryPreviewTabs, RtkQueryMonitorState, StyleUtils, SelectorsSource, RtkResourceInfo } from '../types';
declare type ForwardedMonitorProps<S, A extends Action<unknown>> = Pick<LiftedState<S, A, RtkQueryMonitorState>, 'monitorState' | 'currentStateIndex' | 'computedStates' | 'actionsById'>;
export interface RtkQueryInspectorProps<S, A extends Action<unknown>> extends ForwardedMonitorProps<S, A> {
    dispatch: Dispatch<LiftedAction<S, A, RtkQueryMonitorState>>;
    styleUtils: StyleUtils;
}
declare type RtkQueryInspectorState<S> = {
    selectorsSource: SelectorsSource<S>;
    isWideLayout: boolean;
};
declare class RtkQueryInspector<S, A extends Action<unknown>> extends PureComponent<RtkQueryInspectorProps<S, A>, RtkQueryInspectorState<S>> {
    inspectorRef: React.RefObject<HTMLDivElement>;
    isWideIntervalRef: ReturnType<typeof setInterval> | null;
    constructor(props: RtkQueryInspectorProps<S, A>);
    static wideLayout: number;
    static getDerivedStateFromProps(props: RtkQueryInspectorProps<unknown, Action<unknown>>, state: RtkQueryInspectorState<unknown>): null | Partial<RtkQueryInspectorState<unknown>>;
    selectors: import("../selectors").InspectorSelectors<S>;
    updateSizeMode: () => void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    handleQueryFormValuesChange: (values: Partial<QueryFormValues>) => void;
    handleSelectQuery: (queryInfo: RtkResourceInfo) => void;
    handleTabChange: (tab: QueryPreviewTabs) => void;
    render(): ReactNode;
}
export default RtkQueryInspector;
