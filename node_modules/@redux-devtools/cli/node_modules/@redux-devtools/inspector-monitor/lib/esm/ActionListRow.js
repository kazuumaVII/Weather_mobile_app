import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import dateformat from 'dateformat';
import debounce from 'lodash.debounce';
import RightSlider from './RightSlider';
var BUTTON_SKIP = 'Skip';
var BUTTON_JUMP = 'Jump';

var ActionListRow = /*#__PURE__*/function (_PureComponent) {
  _inherits(ActionListRow, _PureComponent);

  var _super = _createSuper(ActionListRow);

  function ActionListRow() {
    var _this;

    _classCallCheck(this, ActionListRow);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      hover: false
    });

    _defineProperty(_assertThisInitialized(_this), "handleMouseEnter", function (e) {
      if (_this.state.hover) return;

      _this.handleMouseLeave.cancel();

      _this.handleMouseEnterDebounced(e.buttons);
    });

    _defineProperty(_assertThisInitialized(_this), "handleMouseEnterDebounced", debounce(function (buttons) {
      if (buttons) return;

      _this.setState({
        hover: true
      });
    }, 150));

    _defineProperty(_assertThisInitialized(_this), "handleMouseLeave", debounce(function () {
      _this.handleMouseEnterDebounced.cancel();

      if (_this.state.hover) _this.setState({
        hover: false
      });
    }, 100));

    _defineProperty(_assertThisInitialized(_this), "handleMouseDown", function (e) {
      if (e.target.className.indexOf('selectorButton') === 0) return;

      _this.handleMouseLeave();
    });

    return _this;
  }

  _createClass(ActionListRow, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          styling = _this$props.styling,
          isSelected = _this$props.isSelected,
          action = _this$props.action,
          actionId = _this$props.actionId,
          isInitAction = _this$props.isInitAction,
          onSelect = _this$props.onSelect,
          timestamps = _this$props.timestamps,
          isSkipped = _this$props.isSkipped,
          isInFuture = _this$props.isInFuture,
          hideActionButtons = _this$props.hideActionButtons;
      var hover = this.state.hover;
      var timeDelta = timestamps.current - timestamps.previous;
      var showButtons = hover && !isInitAction || isSkipped;

      var isButtonSelected = function isButtonSelected(btn) {
        return btn === BUTTON_SKIP && isSkipped;
      };

      var actionType = action.type;
      if (typeof actionType === 'undefined') actionType = '<UNDEFINED>';else if (actionType === null) actionType = '<NULL>';else actionType = actionType.toString() || '<EMPTY>';
      return /*#__PURE__*/React.createElement("div", _extends({
        onClick: onSelect,
        onMouseEnter: !hideActionButtons && this.handleMouseEnter,
        onMouseLeave: !hideActionButtons && this.handleMouseLeave,
        onMouseDown: this.handleMouseDown,
        onMouseUp: this.handleMouseEnter,
        "data-id": actionId
      }, styling(['actionListItem', isSelected && 'actionListItemSelected', isSkipped && 'actionListItemSkipped', isInFuture && 'actionListFromFuture'], isSelected, action)), /*#__PURE__*/React.createElement("div", styling(['actionListItemName', isSkipped && 'actionListItemNameSkipped']), actionType), hideActionButtons ? /*#__PURE__*/React.createElement(RightSlider, {
        styling: styling,
        shown: true
      }, /*#__PURE__*/React.createElement("div", styling('actionListItemTime'), timeDelta === 0 ? '+00:00:00' : dateformat(timeDelta, timestamps.previous ? '+MM:ss.L' : 'h:MM:ss.L'))) : /*#__PURE__*/React.createElement("div", styling('actionListItemButtons'), /*#__PURE__*/React.createElement(RightSlider, {
        styling: styling,
        shown: !showButtons,
        rotate: true
      }, /*#__PURE__*/React.createElement("div", styling('actionListItemTime'), timeDelta === 0 ? '+00:00:00' : dateformat(timeDelta, timestamps.previous ? '+MM:ss.L' : 'h:MM:ss.L'))), /*#__PURE__*/React.createElement(RightSlider, {
        styling: styling,
        shown: showButtons,
        rotate: true
      }, /*#__PURE__*/React.createElement("div", styling('actionListItemSelector'), [BUTTON_JUMP, BUTTON_SKIP].map(function (btn) {
        return (!isInitAction || btn !== BUTTON_SKIP) && /*#__PURE__*/React.createElement("div", _extends({
          key: btn,
          onClick: function onClick(e) {
            return _this2.handleButtonClick(btn, e);
          }
        }, styling(['selectorButton', isButtonSelected(btn) && 'selectorButtonSelected', 'selectorButtonSmall'], isButtonSelected(btn), true)), btn);
      })))));
    }
  }, {
    key: "handleButtonClick",
    value: function handleButtonClick(btn, e) {
      e.stopPropagation();

      switch (btn) {
        case BUTTON_SKIP:
          this.props.onToggleClick();
          break;

        case BUTTON_JUMP:
          this.props.onJumpClick();
          break;
      }
    }
  }]);

  return ActionListRow;
}(PureComponent);

_defineProperty(ActionListRow, "propTypes", {
  styling: PropTypes.func.isRequired,
  isSelected: PropTypes.bool.isRequired,
  action: PropTypes.object.isRequired,
  isInFuture: PropTypes.bool.isRequired,
  isInitAction: PropTypes.bool.isRequired,
  onSelect: PropTypes.func.isRequired,
  timestamps: PropTypes.shape({
    current: PropTypes.number.isRequired,
    previous: PropTypes.number.isRequired
  }).isRequired,
  isSkipped: PropTypes.bool.isRequired
});

export { ActionListRow as default };