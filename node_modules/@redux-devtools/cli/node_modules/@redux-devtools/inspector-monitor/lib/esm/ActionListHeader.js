import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
import PropTypes from 'prop-types';
import RightSlider from './RightSlider';

var getActiveButtons = function getActiveButtons(hasSkippedActions) {
  return [hasSkippedActions && 'Sweep', 'Commit'].filter(function (a) {
    return !!a;
  });
};

var ActionListHeader = function ActionListHeader(_ref) {
  var styling = _ref.styling,
      onSearch = _ref.onSearch,
      hasSkippedActions = _ref.hasSkippedActions,
      hasStagedActions = _ref.hasStagedActions,
      onCommit = _ref.onCommit,
      onSweep = _ref.onSweep,
      hideMainButtons = _ref.hideMainButtons;
  return /*#__PURE__*/React.createElement("div", styling('actionListHeader'), /*#__PURE__*/React.createElement("input", _extends({}, styling('actionListHeaderSearch'), {
    onChange: function onChange(e) {
      return onSearch(e.target.value);
    },
    placeholder: "filter..."
  })), !hideMainButtons && /*#__PURE__*/React.createElement("div", styling('actionListHeaderWrapper'), /*#__PURE__*/React.createElement(RightSlider, {
    shown: hasStagedActions,
    styling: styling
  }, /*#__PURE__*/React.createElement("div", styling('actionListHeaderSelector'), getActiveButtons(hasSkippedActions).map(function (btn) {
    return /*#__PURE__*/React.createElement("div", _extends({
      key: btn,
      onClick: function onClick() {
        return {
          Commit: onCommit,
          Sweep: onSweep
        }[btn]();
      }
    }, styling(['selectorButton', 'selectorButtonSmall'], false, true)), btn);
  })))));
};

ActionListHeader.propTypes = {
  styling: PropTypes.func.isRequired,
  onSearch: PropTypes.func.isRequired,
  onCommit: PropTypes.func.isRequired,
  onSweep: PropTypes.func.isRequired,
  hideMainButtons: PropTypes.bool,
  hasSkippedActions: PropTypes.bool.isRequired,
  hasStagedActions: PropTypes.bool.isRequired
};
export default ActionListHeader;