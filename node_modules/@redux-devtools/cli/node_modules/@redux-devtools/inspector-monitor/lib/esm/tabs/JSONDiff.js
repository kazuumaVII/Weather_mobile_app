import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _excluded = ["styling", "base16Theme"];

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import { JSONTree } from 'react-json-tree';
import { stringify } from 'javascript-stringify';
import getItemString from './getItemString';
import getJsonTreeTheme from './getJsonTreeTheme';

function stringifyAndShrink(val, isWideLayout) {
  if (val === null) {
    return 'null';
  }

  var str = stringify(val);

  if (typeof str === 'undefined') {
    return 'undefined';
  }

  if (isWideLayout) return str.length > 42 ? str.substr(0, 30) + 'â€¦' + str.substr(-10) : str;
  return str.length > 22 ? "".concat(str.substr(0, 15), "\u2026").concat(str.substr(-5)) : str;
}

var expandFirstLevel = function expandFirstLevel(keyName, data, level) {
  return level <= 1;
};

function prepareDelta(value) {
  if (value && value._t === 'a') {
    var res = {};

    for (var _key in value) {
      if (_key !== '_t') {
        if (_key[0] === '_' && !value[_key.substr(1)]) {
          res[_key.substr(1)] = value[_key];
        } else if (value['_' + _key]) {
          res[_key] = [value['_' + _key][0], value[_key][0]];
        } else if (!value['_' + _key] && _key[0] !== '_') {
          res[_key] = value[_key];
        }
      }
    }

    return res;
  }

  return value;
}

var JSONDiff = /*#__PURE__*/function (_Component) {
  _inherits(JSONDiff, _Component);

  var _super = _createSuper(JSONDiff);

  function JSONDiff() {
    var _this;

    _classCallCheck(this, JSONDiff);

    for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
      args[_key2] = arguments[_key2];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      data: {}
    });

    _defineProperty(_assertThisInitialized(_this), "getItemString", function (type, data) {
      return getItemString(_this.props.styling, type, data, _this.props.dataTypeKey, _this.props.isWideLayout, true);
    });

    _defineProperty(_assertThisInitialized(_this), "valueRenderer", function (raw, value) {
      var _this$props = _this.props,
          styling = _this$props.styling,
          isWideLayout = _this$props.isWideLayout;

      function renderSpan(name, body) {
        return /*#__PURE__*/React.createElement("span", _extends({
          key: name
        }, styling(['diff', name])), body);
      }

      if (Array.isArray(value)) {
        switch (value.length) {
          case 1:
            return /*#__PURE__*/React.createElement("span", styling('diffWrap'), renderSpan('diffAdd', stringifyAndShrink(value[0], isWideLayout)));

          case 2:
            return /*#__PURE__*/React.createElement("span", styling('diffWrap'), renderSpan('diffUpdateFrom', stringifyAndShrink(value[0], isWideLayout)), renderSpan('diffUpdateArrow', ' => '), renderSpan('diffUpdateTo', stringifyAndShrink(value[1], isWideLayout)));

          case 3:
            return /*#__PURE__*/React.createElement("span", styling('diffWrap'), renderSpan('diffRemove', stringifyAndShrink(value[0])));
        }
      }

      return raw;
    });

    return _this;
  }

  _createClass(JSONDiff, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.updateData();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.delta !== this.props.delta) {
        this.updateData();
      }
    }
  }, {
    key: "updateData",
    value: function updateData() {
      // this magically fixes weird React error, where it can't find a node in tree
      // if we set `delta` as JSONTree data right away
      // https://github.com/alexkuz/redux-devtools-inspector/issues/17
      this.setState({
        data: this.props.delta
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          styling = _this$props2.styling,
          base16Theme = _this$props2.base16Theme,
          props = _objectWithoutProperties(_this$props2, _excluded);

      if (!this.state.data) {
        return /*#__PURE__*/React.createElement("div", styling('stateDiffEmpty'), "(states are equal)");
      }

      return /*#__PURE__*/React.createElement(JSONTree, _extends({}, props, {
        theme: getJsonTreeTheme(base16Theme),
        data: this.state.data,
        getItemString: this.getItemString,
        valueRenderer: this.valueRenderer,
        postprocessValue: prepareDelta,
        isCustomNode: Array.isArray,
        shouldExpandNode: expandFirstLevel,
        hideRoot: true
      }));
    }
  }]);

  return JSONDiff;
}(Component);

export { JSONDiff as default };