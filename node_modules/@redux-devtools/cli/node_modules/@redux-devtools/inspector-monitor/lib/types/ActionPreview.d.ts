import React, { Component } from 'react';
import { Base16Theme } from 'redux-devtools-themes';
import { Action } from 'redux';
import { StylingFunction } from 'react-base16-styling';
import { PerformAction } from '@redux-devtools/core';
import { Delta } from 'jsondiffpatch';
import { DevtoolsInspectorState } from './redux';
export interface TabComponentProps<S, A extends Action<unknown>> {
    labelRenderer: (keyPath: (string | number)[], nodeType: string, expanded: boolean, expandable: boolean) => React.ReactNode;
    styling: StylingFunction;
    computedStates: {
        state: S;
        error?: string;
    }[];
    actions: {
        [actionId: number]: PerformAction<A>;
    };
    selectedActionId: number | null;
    startActionId: number | null;
    base16Theme: Base16Theme;
    invertTheme: boolean;
    isWideLayout: boolean;
    dataTypeKey: string | symbol | undefined;
    delta: Delta | null | undefined | false;
    action: A;
    nextState: S;
    monitorState: DevtoolsInspectorState;
    updateMonitorState: (monitorState: Partial<DevtoolsInspectorState>) => void;
}
export interface Tab<S, A extends Action<unknown>> {
    name: string;
    component: React.ComponentType<TabComponentProps<S, A>>;
}
interface Props<S, A extends Action<unknown>> {
    base16Theme: Base16Theme;
    invertTheme: boolean;
    isWideLayout: boolean;
    tabs: Tab<S, A>[] | ((tabs: Tab<S, A>[]) => Tab<S, A>[]);
    tabName: string;
    delta: Delta | null | undefined | false;
    error: string | undefined;
    nextState: S;
    computedStates: {
        state: S;
        error?: string;
    }[];
    action: A;
    actions: {
        [actionId: number]: PerformAction<A>;
    };
    selectedActionId: number | null;
    startActionId: number | null;
    dataTypeKey: string | symbol | undefined;
    monitorState: DevtoolsInspectorState;
    updateMonitorState: (monitorState: Partial<DevtoolsInspectorState>) => void;
    styling: StylingFunction;
    onInspectPath: (path: (string | number)[]) => void;
    inspectedPath: (string | number)[];
    onSelectTab: (tabName: string) => void;
}
declare class ActionPreview<S, A extends Action<unknown>> extends Component<Props<S, A>> {
    static defaultProps: {
        tabName: string;
    };
    render(): JSX.Element;
    labelRenderer: ([key, ...rest]: (string | number)[], nodeType: string, expanded: boolean) => JSX.Element;
}
export default ActionPreview;
