import React, { PureComponent, RefCallback } from 'react';
import { Drake } from 'dragula';
import { Action } from 'redux';
import { PerformAction } from '@redux-devtools/core';
import { StylingFunction } from 'react-base16-styling';
interface Props<A extends Action<unknown>> {
    actions: {
        [actionId: number]: PerformAction<A>;
    };
    actionIds: number[];
    isWideLayout: boolean;
    searchValue: string | undefined;
    selectedActionId: number | null;
    startActionId: number | null;
    skippedActionIds: number[];
    draggableActions: boolean;
    hideMainButtons: boolean | undefined;
    hideActionButtons: boolean | undefined;
    styling: StylingFunction;
    onSearch: (value: string) => void;
    onSelect: (e: React.MouseEvent<HTMLDivElement>, actionId: number) => void;
    onToggleAction: (actionId: number) => void;
    onJumpToState: (actionId: number) => void;
    onCommit: () => void;
    onSweep: () => void;
    onReorderAction: (actionId: number, beforeActionId: number) => void;
    currentActionId: number;
    lastActionId: number;
}
export default class ActionList<A extends Action<unknown>> extends PureComponent<Props<A>> {
    node?: HTMLDivElement | null;
    scrollDown?: boolean;
    drake?: Drake;
    UNSAFE_componentWillReceiveProps(nextProps: Props<A>): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(): void;
    scrollToBottom(): void;
    getRef: RefCallback<HTMLDivElement>;
    render(): JSX.Element;
}
export {};
