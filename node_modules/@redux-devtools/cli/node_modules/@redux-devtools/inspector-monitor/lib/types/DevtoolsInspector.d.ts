import React from 'react';
import { Base16Theme } from 'redux-devtools-themes';
import { LiftedAction, LiftedState } from '@redux-devtools/core';
import { Action, Dispatch } from 'redux';
import { DiffContext } from 'jsondiffpatch';
import { base16Themes } from './utils/createStylingFromTheme';
import { Tab } from './ActionPreview';
import { DevtoolsInspectorAction, DevtoolsInspectorState } from './redux';
export interface ExternalProps<S, A extends Action<unknown>> {
    dispatch: Dispatch<DevtoolsInspectorAction | LiftedAction<S, A, DevtoolsInspectorState>>;
    preserveScrollTop?: boolean;
    draggableActions: boolean;
    select: (state: S) => unknown;
    theme: keyof typeof base16Themes | Base16Theme;
    supportImmutable: boolean;
    diffObjectHash?: (item: unknown, index: number) => string;
    diffPropertyFilter?: (name: string, context: DiffContext) => boolean;
    hideMainButtons?: boolean;
    hideActionButtons?: boolean;
    invertTheme: boolean;
    dataTypeKey?: string | symbol;
    tabs: Tab<S, A>[] | ((tabs: Tab<S, A>[]) => Tab<S, A>[]);
}
interface DefaultProps {
    select: (state: unknown) => unknown;
    supportImmutable: boolean;
    draggableActions: boolean;
    theme: keyof typeof base16Themes;
    invertTheme: boolean;
}
export interface DevtoolsInspectorProps<S, A extends Action<unknown>> extends LiftedState<S, A, DevtoolsInspectorState> {
    dispatch: Dispatch<DevtoolsInspectorAction | LiftedAction<S, A, DevtoolsInspectorState>>;
    preserveScrollTop?: boolean;
    draggableActions: boolean;
    select: (state: S) => unknown;
    theme: keyof typeof base16Themes | Base16Theme;
    supportImmutable: boolean;
    diffObjectHash?: (item: unknown, index: number) => string;
    diffPropertyFilter?: (name: string, context: DiffContext) => boolean;
    hideMainButtons?: boolean;
    hideActionButtons?: boolean;
    invertTheme: boolean;
    dataTypeKey?: string | symbol;
    tabs: Tab<S, A>[] | ((tabs: Tab<S, A>[]) => Tab<S, A>[]);
}
declare const _default: React.ComponentType<ExternalProps<unknown, Action<unknown>>> & {
    update(monitorProps: ExternalProps<unknown, Action<unknown>>, state: DevtoolsInspectorState | undefined, action: DevtoolsInspectorAction): DevtoolsInspectorState;
    defaultProps: DefaultProps;
};
export default _default;
