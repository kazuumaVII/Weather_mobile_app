import { MouseEvent, MouseEventHandler, PureComponent } from 'react';
import PropTypes from 'prop-types';
import { StylingFunction } from 'react-base16-styling';
import { Action } from 'redux';
declare const BUTTON_SKIP = "Skip";
declare const BUTTON_JUMP = "Jump";
declare type Button = typeof BUTTON_SKIP | typeof BUTTON_JUMP;
interface Props<A extends Action<unknown>> {
    styling: StylingFunction;
    actionId: number;
    isInitAction: boolean;
    isSelected: boolean;
    isInFuture: boolean;
    onSelect: MouseEventHandler<HTMLDivElement>;
    timestamps: {
        current: number;
        previous: number;
    };
    action: A;
    onToggleClick: () => void;
    onJumpClick: () => void;
    onCommitClick: () => void;
    hideActionButtons: boolean | undefined;
    isSkipped: boolean;
}
interface State {
    hover: boolean;
}
export default class ActionListRow<A extends Action<unknown>> extends PureComponent<Props<A>, State> {
    state: State;
    static propTypes: {
        styling: PropTypes.Validator<(...args: any[]) => any>;
        isSelected: PropTypes.Validator<boolean>;
        action: PropTypes.Validator<object>;
        isInFuture: PropTypes.Validator<boolean>;
        isInitAction: PropTypes.Validator<boolean>;
        onSelect: PropTypes.Validator<(...args: any[]) => any>;
        timestamps: PropTypes.Validator<PropTypes.InferProps<{
            current: PropTypes.Validator<number>;
            previous: PropTypes.Validator<number>;
        }>>;
        isSkipped: PropTypes.Validator<boolean>;
    };
    render(): JSX.Element;
    handleButtonClick(btn: Button, e: MouseEvent<HTMLDivElement>): void;
    handleMouseEnter: (e: MouseEvent<HTMLDivElement>) => void;
    handleMouseEnterDebounced: import("lodash").DebouncedFunc<(buttons: any) => void>;
    handleMouseLeave: import("lodash").DebouncedFunc<() => void>;
    handleMouseDown: (e: MouseEvent<HTMLDivElement>) => void;
}
export {};
