"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _react = _interopRequireDefault(require("react"));

var _immutable = require("immutable");

var _isIterable = _interopRequireDefault(require("../utils/isIterable"));

var IS_IMMUTABLE_KEY = '@@__IS_IMMUTABLE__@@';

function isImmutable(value) {
  return (0, _immutable.isKeyed)(value) || (0, _immutable.isIndexed)(value) || (0, _immutable.isCollection)(value);
}

function getShortTypeString(val, diff) {
  if (diff && Array.isArray(val)) {
    val = val[val.length === 2 ? 1 : 0];
  }

  if ((0, _isIterable.default)(val) && !isImmutable(val)) {
    return '(…)';
  } else if (Array.isArray(val)) {
    return val.length > 0 ? '[…]' : '[]';
  } else if (val === null) {
    return 'null';
  } else if (val === undefined) {
    return 'undef';
  } else if ((0, _typeof2.default)(val) === 'object') {
    // eslint-disable-next-line @typescript-eslint/ban-types
    return Object.keys(val).length > 0 ? '{…}' : '{}';
  } else if (typeof val === 'function') {
    return 'fn';
  } else if (typeof val === 'string') {
    return "\"".concat(val.substr(0, 10) + (val.length > 10 ? '…' : ''), "\"");
  } else if ((0, _typeof2.default)(val) === 'symbol') {
    return 'symbol';
  } else {
    return val;
  }
}

function getText(type, data, isWideLayout, isDiff) {
  if (type === 'Object') {
    // eslint-disable-next-line @typescript-eslint/ban-types
    var keys = Object.keys(data);
    if (!isWideLayout) return keys.length ? '{…}' : '{}';
    var str = keys.slice(0, 3).map(function (key) {
      return "".concat(key, ": ").concat(getShortTypeString(data[key], isDiff));
    }).concat(keys.length > 3 ? ['…'] : []).join(', ');
    return "{ ".concat(str, " }");
  } else if (type === 'Array') {
    if (!isWideLayout) return data.length ? '[…]' : '[]';

    var _str = data.slice(0, 4).map(function (val) {
      return getShortTypeString(val, isDiff);
    }).concat(data.length > 4 ? ['…'] : []).join(', ');

    return "[".concat(_str, "]");
  } else {
    return type;
  }
}

var getItemString = function getItemString(styling, type, data, dataTypeKey, isWideLayout, isDiff) {
  return /*#__PURE__*/_react.default.createElement("span", styling('treeItemHint'), data[IS_IMMUTABLE_KEY] ? 'Immutable' : '', dataTypeKey && data[dataTypeKey] ? "".concat(data[dataTypeKey], " ") : '', getText(type, data, isWideLayout, isDiff));
};

var _default = getItemString;
exports.default = _default;