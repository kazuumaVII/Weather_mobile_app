"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_STATE = void 0;
exports.reducer = reducer;
exports.updateMonitorState = updateMonitorState;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var UPDATE_MONITOR_STATE = '@@redux-devtools-inspector-monitor/UPDATE_MONITOR_STATE';

function updateMonitorState(monitorState) {
  return {
    type: UPDATE_MONITOR_STATE,
    monitorState: monitorState
  };
}

var DEFAULT_STATE = {
  selectedActionId: null,
  startActionId: null,
  inspectedActionPath: [],
  inspectedStatePath: [],
  tabName: 'Diff'
};
exports.DEFAULT_STATE = DEFAULT_STATE;

function reduceUpdateState(state, action) {
  return action.type === UPDATE_MONITOR_STATE ? _objectSpread(_objectSpread({}, state), action.monitorState) : state;
}

function reducer(props) {
  var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_STATE;
  var action = arguments.length > 2 ? arguments[2] : undefined;
  return _objectSpread({}, reduceUpdateState(state, action));
}