"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactDragula = _interopRequireDefault(require("react-dragula"));

var _ActionListRow = _interopRequireDefault(require("./ActionListRow"));

var _ActionListHeader = _interopRequireDefault(require("./ActionListHeader"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function getTimestamps(actions, actionIds, actionId) {
  var idx = actionIds.indexOf(actionId);
  var prevActionId = actionIds[idx - 1];
  return {
    current: actions[actionId].timestamp,
    previous: idx ? actions[prevActionId].timestamp : 0
  };
}

var ActionList = /*#__PURE__*/function (_PureComponent) {
  (0, _inherits2.default)(ActionList, _PureComponent);

  var _super = _createSuper(ActionList);

  function ActionList() {
    var _this;

    (0, _classCallCheck2.default)(this, ActionList);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getRef", function (node) {
      _this.node = node;
    });
    return _this;
  }

  (0, _createClass2.default)(ActionList, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var node = this.node;

      if (!node) {
        this.scrollDown = true;
      } else if (this.props.lastActionId !== nextProps.lastActionId) {
        var scrollTop = node.scrollTop,
            offsetHeight = node.offsetHeight,
            scrollHeight = node.scrollHeight;
        this.scrollDown = Math.abs(scrollHeight - (scrollTop + offsetHeight)) < 50;
      } else {
        this.scrollDown = false;
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.scrollDown = true;
      this.scrollToBottom();
      if (!this.props.draggableActions) return;
      var container = this.node;
      this.drake = (0, _reactDragula.default)([container], {
        copy: false,
        copySortSource: false,
        mirrorContainer: container,
        accepts: function accepts(el, target, source, sibling) {
          return !sibling || !!parseInt(sibling.getAttribute('data-id'));
        },
        moves: function moves(el, source, handle) {
          return !!parseInt(el.getAttribute('data-id')) && handle.className.indexOf('selectorButton') !== 0;
        }
      }).on('drop', function (el, target, source, sibling) {
        var beforeActionId = _this2.props.actionIds.length;

        if (sibling && sibling.className.indexOf('gu-mirror') === -1) {
          beforeActionId = parseInt(sibling.getAttribute('data-id'));
        }

        var actionId = parseInt(el.getAttribute('data-id'));

        _this2.props.onReorderAction(actionId, beforeActionId);
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.drake) this.drake.destroy();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.scrollToBottom();
    }
  }, {
    key: "scrollToBottom",
    value: function scrollToBottom() {
      if (this.scrollDown && this.node) {
        this.node.scrollTop = this.node.scrollHeight;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          styling = _this$props.styling,
          actions = _this$props.actions,
          actionIds = _this$props.actionIds,
          isWideLayout = _this$props.isWideLayout,
          onToggleAction = _this$props.onToggleAction,
          skippedActionIds = _this$props.skippedActionIds,
          selectedActionId = _this$props.selectedActionId,
          startActionId = _this$props.startActionId,
          _onSelect = _this$props.onSelect,
          onSearch = _this$props.onSearch,
          searchValue = _this$props.searchValue,
          currentActionId = _this$props.currentActionId,
          hideMainButtons = _this$props.hideMainButtons,
          hideActionButtons = _this$props.hideActionButtons,
          onCommit = _this$props.onCommit,
          onSweep = _this$props.onSweep,
          onJumpToState = _this$props.onJumpToState;
      var lowerSearchValue = searchValue && searchValue.toLowerCase();
      var filteredActionIds = searchValue ? actionIds.filter(function (id) {
        return actions[id].action.type.toLowerCase().indexOf(lowerSearchValue) !== -1;
      }) : actionIds;
      return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
        key: "actionList",
        "data-testid": "actionList"
      }, styling(['actionList', isWideLayout && 'actionListWide'], isWideLayout)), /*#__PURE__*/_react.default.createElement(_ActionListHeader.default, {
        styling: styling,
        onSearch: onSearch,
        onCommit: onCommit,
        onSweep: onSweep,
        hideMainButtons: hideMainButtons,
        hasSkippedActions: skippedActionIds.length > 0,
        hasStagedActions: actionIds.length > 1
      }), /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
        "data-testid": "actionListRows"
      }, styling('actionListRows'), {
        ref: this.getRef
      }), filteredActionIds.map(function (actionId) {
        return /*#__PURE__*/_react.default.createElement(_ActionListRow.default, {
          key: actionId,
          styling: styling,
          actionId: actionId,
          isInitAction: !actionId,
          isSelected: startActionId !== null && actionId >= startActionId && actionId <= selectedActionId || actionId === selectedActionId,
          isInFuture: actionIds.indexOf(actionId) > actionIds.indexOf(currentActionId),
          onSelect: function onSelect(e) {
            return _onSelect(e, actionId);
          },
          timestamps: getTimestamps(actions, actionIds, actionId),
          action: actions[actionId].action,
          onToggleClick: function onToggleClick() {
            return onToggleAction(actionId);
          },
          onJumpClick: function onJumpClick() {
            return onJumpToState(actionId);
          },
          onCommitClick: function onCommitClick() {
            return onCommit();
          },
          hideActionButtons: hideActionButtons,
          isSkipped: skippedActionIds.indexOf(actionId) !== -1
        });
      })));
    }
  }]);
  return ActionList;
}(_react.PureComponent);

exports.default = ActionList;