"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTheme = exports.schemes = exports.listThemes = exports.listSchemes = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = require("react");

var themes = _interopRequireWildcard(require("../themes"));

var _reduxDevtoolsThemes = require("redux-devtools-themes");

var baseSchemes = _interopRequireWildcard(require("base16"));

var additionalSchemes = _interopRequireWildcard(require("../colorSchemes"));

var _invertColors = _interopRequireDefault(require("../utils/invertColors"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var schemes = _objectSpread(_objectSpread({}, baseSchemes), additionalSchemes);

exports.schemes = schemes;

var listSchemes = function listSchemes() {
  return Object.keys(schemes).slice(1).sort();
}; // remove `__esModule`


exports.listSchemes = listSchemes;

var listThemes = function listThemes() {
  return Object.keys(themes);
};

exports.listThemes = listThemes;

var getTheme = function getTheme(type, scheme, light) {
  var colors;

  if (scheme === 'default') {
    colors = light ? schemes.default : _reduxDevtoolsThemes.nicinabox;
  } else {
    colors = schemes[scheme];
    if (light) colors = (0, _invertColors.default)(colors);
  }

  var theme = _objectSpread({
    type: type,
    light: light
  }, themes.default(colors));

  if (type !== 'default') {
    theme = _objectSpread(_objectSpread({}, theme), themes[type](colors));
  }

  return theme;
};

var useTheme = function useTheme(_ref) {
  var type = _ref.theme,
      scheme = _ref.scheme,
      colorPreference = _ref.colorPreference;

  var _useState = (0, _react.useState)(window.matchMedia('(prefers-color-scheme: dark)').matches),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      prefersDarkColorScheme = _useState2[0],
      setPrefersDarkColorScheme = _useState2[1];

  (0, _react.useEffect)(function () {
    var mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');

    var handleChange = function handleChange(_ref2) {
      var matches = _ref2.matches;
      setPrefersDarkColorScheme(matches);
    };

    mediaQuery.addEventListener('change', handleChange);
    return function () {
      return mediaQuery.removeEventListener('change', handleChange);
    };
  }, []);
  var light = (0, _react.useMemo)(function () {
    return colorPreference === 'auto' ? !prefersDarkColorScheme : colorPreference === 'light';
  }, [colorPreference, prefersDarkColorScheme]);
  return getTheme(type, scheme, light);
};

exports.useTheme = useTheme;