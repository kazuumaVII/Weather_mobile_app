"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _codemirror = _interopRequireDefault(require("codemirror"));

var _styles = require("./styles");

require("codemirror/mode/javascript/javascript");

require("codemirror/addon/fold/foldgutter");

require("codemirror/addon/fold/foldcode");

require("codemirror/addon/fold/brace-fold");

require("../../fonts/index.css");

require("codemirror/lib/codemirror.css");

require("codemirror/addon/fold/foldgutter.css");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var EditorContainer = _styledComponents.default.div('', function (_ref) {
  var theme = _ref.theme;
  return theme.scheme === 'default' && theme.light ? _styles.defaultStyle : (0, _styles.themedStyle)(theme);
});

/**
 * Based on [CodeMirror](http://codemirror.net/).
 */
var Editor = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(Editor, _Component);

  var _super = _createSuper(Editor);

  function Editor() {
    var _this;

    (0, _classCallCheck2.default)(this, Editor);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getRef", function (node) {
      _this.node = node;
    });
    return _this;
  }

  (0, _createClass2.default)(Editor, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.cm = (0, _codemirror.default)(this.node, {
        value: this.props.value,
        mode: this.props.mode,
        lineNumbers: this.props.lineNumbers,
        lineWrapping: this.props.lineWrapping,
        readOnly: this.props.readOnly,
        autofocus: this.props.autofocus,
        foldGutter: this.props.foldGutter,
        gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter']
      });

      if (this.props.onChange) {
        this.cm.on('change', function (doc, change) {
          _this2.props.onChange(doc.getValue(), change);
        });
      }
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (nextProps.value !== this.cm.getValue()) {
        this.cm.setValue(nextProps.value);
      }

      if (nextProps.readOnly !== this.props.readOnly) {
        this.cm.setOption('readOnly', nextProps.readOnly);
      }

      if (nextProps.lineNumbers !== this.props.lineNumbers) {
        this.cm.setOption('lineNumbers', nextProps.lineNumbers);
      }

      if (nextProps.lineWrapping !== this.props.lineWrapping) {
        this.cm.setOption('lineWrapping', nextProps.lineWrapping);
      }

      if (nextProps.foldGutter !== this.props.foldGutter) {
        this.cm.setOption('foldGutter', nextProps.foldGutter);
      }
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate() {
      return false;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var node = this.node;
      node.removeChild(node.children[0]);
      this.cm = null;
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/_react.default.createElement(EditorContainer, {
        ref: this.getRef,
        theme: this.props.theme
      });
    }
  }]);
  return Editor;
}(_react.Component);

exports.default = Editor;
(0, _defineProperty2.default)(Editor, "propTypes", {
  value: _propTypes.default.string,
  mode: _propTypes.default.string,
  lineNumbers: _propTypes.default.bool,
  lineWrapping: _propTypes.default.bool,
  readOnly: _propTypes.default.bool,
  theme: _propTypes.default.object,
  foldGutter: _propTypes.default.bool,
  autofocus: _propTypes.default.bool,
  onChange: _propTypes.default.func
});
(0, _defineProperty2.default)(Editor, "defaultProps", {
  value: '',
  mode: 'javascript',
  lineNumbers: true,
  lineWrapping: false,
  readOnly: false,
  foldGutter: true,
  autofocus: false
});