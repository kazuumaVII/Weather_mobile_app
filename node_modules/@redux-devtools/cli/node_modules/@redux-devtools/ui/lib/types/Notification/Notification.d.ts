import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Base16Theme } from 'base16';
export declare type Type = 'info' | 'success' | 'warning' | 'error';
export interface NotificationProps {
    children?: React.ReactNode;
    type: Type;
    onClose?: React.MouseEventHandler<HTMLButtonElement>;
    theme?: Base16Theme;
}
export default class Notification extends Component<NotificationProps> {
    shouldComponentUpdate(nextProps: NotificationProps): boolean;
    getIcon: () => JSX.Element | null;
    render(): JSX.Element;
    static propTypes: {
        children: PropTypes.Validator<any>;
        type: PropTypes.Requireable<string>;
        onClose: PropTypes.Requireable<(...args: any[]) => any>;
        theme: PropTypes.Requireable<object>;
    };
    static defaultProps: {
        type: string;
    };
}
