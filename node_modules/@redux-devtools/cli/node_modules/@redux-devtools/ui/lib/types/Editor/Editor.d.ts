import React, { Component } from 'react';
import PropTypes from 'prop-types';
import CodeMirror, { EditorChange } from 'codemirror';
import { Base16Theme } from 'base16';
import 'codemirror/mode/javascript/javascript';
import 'codemirror/addon/fold/foldgutter';
import 'codemirror/addon/fold/foldcode';
import 'codemirror/addon/fold/brace-fold';
import '../../fonts/index.css';
import 'codemirror/lib/codemirror.css';
import 'codemirror/addon/fold/foldgutter.css';
export interface EditorProps {
    value: string;
    mode: string;
    lineNumbers: boolean;
    lineWrapping: boolean;
    readOnly: boolean;
    theme?: Base16Theme;
    foldGutter: boolean;
    autofocus: boolean;
    onChange?: (value: string, change: EditorChange) => void;
}
/**
 * Based on [CodeMirror](http://codemirror.net/).
 */
export default class Editor extends Component<EditorProps> {
    cm?: CodeMirror.Editor | null;
    node?: HTMLDivElement | null;
    componentDidMount(): void;
    UNSAFE_componentWillReceiveProps(nextProps: EditorProps): void;
    shouldComponentUpdate(): boolean;
    componentWillUnmount(): void;
    getRef: React.RefCallback<HTMLDivElement>;
    render(): JSX.Element;
    static propTypes: {
        value: PropTypes.Requireable<string>;
        mode: PropTypes.Requireable<string>;
        lineNumbers: PropTypes.Requireable<boolean>;
        lineWrapping: PropTypes.Requireable<boolean>;
        readOnly: PropTypes.Requireable<boolean>;
        theme: PropTypes.Requireable<object>;
        foldGutter: PropTypes.Requireable<boolean>;
        autofocus: PropTypes.Requireable<boolean>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
    };
    static defaultProps: {
        value: string;
        mode: string;
        lineNumbers: boolean;
        lineWrapping: boolean;
        readOnly: boolean;
        foldGutter: boolean;
        autofocus: boolean;
    };
}
