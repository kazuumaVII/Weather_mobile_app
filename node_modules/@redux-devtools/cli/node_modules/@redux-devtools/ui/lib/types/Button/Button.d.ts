import React, { Component, ReactNode } from 'react';
import PropTypes from 'prop-types';
import { Base16Theme } from 'base16';
export declare type TooltipPosition = 'top' | 'bottom' | 'left' | 'right' | 'bottom-left' | 'bottom-right' | 'top-left' | 'top-right';
export declare type Size = 'big' | 'normal' | 'small';
export declare type Mark = 'base08' | 'base09' | 'base0A' | 'base0B' | 'base0C' | 'base0D' | 'base0E' | 'base0F';
export interface ButtonProps {
    children: ReactNode;
    title?: string;
    tooltipPosition: TooltipPosition;
    onClick?: React.MouseEventHandler<HTMLButtonElement>;
    type?: 'button' | 'reset' | 'submit';
    disabled?: boolean;
    primary?: boolean;
    size?: Size;
    mark?: Mark | false;
    theme?: Base16Theme;
}
export default class Button extends Component<ButtonProps> {
    shouldComponentUpdate(nextProps: ButtonProps): boolean;
    onMouseUp: React.MouseEventHandler<HTMLButtonElement>;
    render(): JSX.Element;
    static propTypes: {
        children: PropTypes.Validator<any>;
        title: PropTypes.Requireable<string>;
        tooltipPosition: PropTypes.Requireable<string>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        type: PropTypes.Requireable<string>;
        disabled: PropTypes.Requireable<boolean>;
        primary: PropTypes.Requireable<boolean>;
        size: PropTypes.Requireable<string>;
        mark: PropTypes.Requireable<string | boolean>;
        theme: PropTypes.Requireable<object>;
    };
    static defaultProps: {
        tooltipPosition: string;
    };
}
