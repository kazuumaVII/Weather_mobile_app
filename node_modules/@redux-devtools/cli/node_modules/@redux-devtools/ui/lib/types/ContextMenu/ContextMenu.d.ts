import React, { Component } from 'react';
import PropTypes from 'prop-types';
declare type ReactButtonElement = React.ReactElement<JSX.IntrinsicElements['button'], 'button'>;
declare type Item = {
    name: string;
    value?: string;
} | ReactButtonElement;
export interface ContextMenuProps {
    items: Item[];
    onClick: (value: string) => void;
    x: number;
    y: number;
    visible?: boolean;
}
export default class ContextMenu extends Component<ContextMenuProps> {
    menu?: HTMLDivElement | null;
    componentDidMount(): void;
    componentDidUpdate(prevProps: ContextMenuProps): void;
    onMouseUp: React.MouseEventHandler<HTMLButtonElement>;
    onClick: React.MouseEventHandler<HTMLButtonElement>;
    amendPosition(): void;
    renderItems(): JSX.Element[];
    menuRef: React.RefCallback<HTMLDivElement>;
    render(): JSX.Element;
    static propTypes: {
        items: PropTypes.Validator<any[]>;
        onClick: PropTypes.Validator<(...args: any[]) => any>;
        x: PropTypes.Validator<number>;
        y: PropTypes.Validator<number>;
        visible: PropTypes.Requireable<boolean>;
    };
}
export {};
