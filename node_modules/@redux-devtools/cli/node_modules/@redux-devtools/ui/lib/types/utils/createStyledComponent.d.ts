import React from 'react';
import { InterpolationFunction, StyledComponent, StyledComponentPropsWithRef, ThemedStyledProps } from 'styled-components';
import { Theme } from '../themes/default';
import { Base16Theme } from 'base16';
declare type StyleFunction<C extends keyof JSX.IntrinsicElements | React.ComponentType<any>, O extends object = {}> = InterpolationFunction<ThemedStyledProps<StyledComponentPropsWithRef<C> & O, Theme>>;
interface StylesObject<C extends keyof JSX.IntrinsicElements | React.ComponentType<any>, O extends object = {}> {
    [type: string]: StyleFunction<C, O>;
}
declare type Styles<C extends keyof JSX.IntrinsicElements | React.ComponentType<any>, O extends object = {}> = StylesObject<C, O> | StyleFunction<C, O>;
export default function createStyledComponent<C extends keyof JSX.IntrinsicElements | React.ComponentType<any>, O extends object = {}>(styles: Styles<C, O>, component?: C): StyledComponent<C, Theme | Base16Theme, O>;
export {};
