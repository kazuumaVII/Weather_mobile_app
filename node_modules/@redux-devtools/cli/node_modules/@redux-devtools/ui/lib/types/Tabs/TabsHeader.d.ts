import React, { Component } from 'react';
import PropTypes from 'prop-types';
export declare type ReactButtonElement = React.ReactElement<JSX.IntrinsicElements['button'], 'button'>;
export interface Tab<P> {
    name: string;
    value?: string;
    component?: React.ComponentType<P>;
    selector?: (tab: this) => P;
}
interface Props<P> {
    tabs: ReactButtonElement[];
    items: Tab<P>[];
    main: boolean | undefined;
    onClick: (value: string) => void;
    position: 'left' | 'right' | 'center';
    collapsible: boolean | undefined;
    selected: string | undefined;
}
interface State {
    visibleTabs: ReactButtonElement[];
    hiddenTabs: ReactButtonElement[];
    subMenuOpened: boolean;
    contextMenu: {
        top: number;
        left: number;
    } | undefined;
}
export default class TabsHeader<P> extends Component<Props<P>, State> {
    state: State;
    iconWidth: number;
    hiddenTabsWidth: number[];
    tabsWrapperRef?: HTMLDivElement | null;
    tabsRef?: HTMLDivElement | null;
    resizeDetector?: HTMLIFrameElement;
    UNSAFE_componentWillReceiveProps(nextProps: Props<P>): void;
    componentDidMount(): void;
    componentDidUpdate(prevProps: Props<P>): void;
    componentWillUnmount(): void;
    enableResizeEvents(): void;
    disableResizeEvents(): void;
    collapse: () => void;
    hideSubmenu: () => void;
    getTabsWrapperRef: React.RefCallback<HTMLDivElement>;
    getTabsRef: React.RefCallback<HTMLDivElement>;
    expandMenu: React.MouseEventHandler;
    render(): JSX.Element;
    static propTypes: {
        tabs: PropTypes.Validator<any[]>;
        items: PropTypes.Validator<any[]>;
        main: PropTypes.Requireable<boolean>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        position: PropTypes.Requireable<string>;
        collapsible: PropTypes.Requireable<boolean>;
        selected: PropTypes.Requireable<string>;
    };
}
export {};
