import React, { ReactNode } from 'react';
import { Story } from '@storybook/react';
import { BorderPosition } from './styles/Toolbar';
import { TooltipPosition } from '../Button/Button';
import { Position } from '../Tabs/Tabs';
declare const _default: {
    title: string;
    component: import("styled-components").StyledComponent<"div", import("base16").Base16Theme & {
        fontFamily?: import("csstype").Property.FontFamily | undefined;
    }, import("./styles/Toolbar").Props, never>;
};
export default _default;
interface TemplateArgs {
    borderPosition: BorderPosition;
    title?: string;
    tooltipPosition: TooltipPosition;
    disabled?: boolean;
    onClick?: React.MouseEventHandler<HTMLButtonElement>;
    label: ReactNode;
}
export declare const Default: Story<TemplateArgs>;
interface TabsTemplateArgs {
    title?: string;
    tooltipPosition: TooltipPosition;
    disabled?: boolean;
    buttonOnClick?: React.MouseEventHandler<HTMLButtonElement>;
    label: ReactNode;
    selected?: string;
    main?: boolean;
    tabsOnClick: (value: string) => void;
    collapsible?: boolean;
    position: Position;
}
export declare const Tabs: Story<TabsTemplateArgs>;
interface WithSliderTemplateArgs {
    title?: string;
    tooltipPosition: TooltipPosition;
    playOnClick?: React.MouseEventHandler<HTMLButtonElement>;
    value: number;
    min: number;
    max: number;
    label?: string;
    withValue?: boolean;
    onChange: (value: number) => void;
    previousStateOnClick?: React.MouseEventHandler<HTMLButtonElement>;
    nextStateOnClick?: React.MouseEventHandler<HTMLButtonElement>;
    selected?: string;
    segmentedControlOnClick: (value: string) => void;
}
export declare const WithSlider: Story<WithSliderTemplateArgs>;
