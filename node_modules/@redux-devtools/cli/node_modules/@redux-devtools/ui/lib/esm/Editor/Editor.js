import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import CodeMirror from 'codemirror';
import { defaultStyle, themedStyle } from './styles';
import 'codemirror/mode/javascript/javascript';
import 'codemirror/addon/fold/foldgutter';
import 'codemirror/addon/fold/foldcode';
import 'codemirror/addon/fold/brace-fold';
import '../../fonts/index.css';
import 'codemirror/lib/codemirror.css';
import 'codemirror/addon/fold/foldgutter.css';
var EditorContainer = styled.div('', function (_ref) {
  var theme = _ref.theme;
  return theme.scheme === 'default' && theme.light ? defaultStyle : themedStyle(theme);
});

/**
 * Based on [CodeMirror](http://codemirror.net/).
 */
var Editor = /*#__PURE__*/function (_Component) {
  _inherits(Editor, _Component);

  var _super = _createSuper(Editor);

  function Editor() {
    var _this;

    _classCallCheck(this, Editor);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "getRef", function (node) {
      _this.node = node;
    });

    return _this;
  }

  _createClass(Editor, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.cm = CodeMirror(this.node, {
        value: this.props.value,
        mode: this.props.mode,
        lineNumbers: this.props.lineNumbers,
        lineWrapping: this.props.lineWrapping,
        readOnly: this.props.readOnly,
        autofocus: this.props.autofocus,
        foldGutter: this.props.foldGutter,
        gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter']
      });

      if (this.props.onChange) {
        this.cm.on('change', function (doc, change) {
          _this2.props.onChange(doc.getValue(), change);
        });
      }
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (nextProps.value !== this.cm.getValue()) {
        this.cm.setValue(nextProps.value);
      }

      if (nextProps.readOnly !== this.props.readOnly) {
        this.cm.setOption('readOnly', nextProps.readOnly);
      }

      if (nextProps.lineNumbers !== this.props.lineNumbers) {
        this.cm.setOption('lineNumbers', nextProps.lineNumbers);
      }

      if (nextProps.lineWrapping !== this.props.lineWrapping) {
        this.cm.setOption('lineWrapping', nextProps.lineWrapping);
      }

      if (nextProps.foldGutter !== this.props.foldGutter) {
        this.cm.setOption('foldGutter', nextProps.foldGutter);
      }
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate() {
      return false;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var node = this.node;
      node.removeChild(node.children[0]);
      this.cm = null;
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(EditorContainer, {
        ref: this.getRef,
        theme: this.props.theme
      });
    }
  }]);

  return Editor;
}(Component);

_defineProperty(Editor, "propTypes", {
  value: PropTypes.string,
  mode: PropTypes.string,
  lineNumbers: PropTypes.bool,
  lineWrapping: PropTypes.bool,
  readOnly: PropTypes.bool,
  theme: PropTypes.object,
  foldGutter: PropTypes.bool,
  autofocus: PropTypes.bool,
  onChange: PropTypes.func
});

_defineProperty(Editor, "defaultProps", {
  value: '',
  mode: 'javascript',
  lineNumbers: true,
  lineWrapping: false,
  readOnly: false,
  foldGutter: true,
  autofocus: false
});

export { Editor as default };