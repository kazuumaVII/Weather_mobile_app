import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import createStyledComponent from '../utils/createStyledComponent';
import * as styles from './styles';
import { commonStyle, tooltipStyle } from './styles/common';
var ButtonWrapper = createStyledComponent(styles, 'button');
var TooltipWrapper = createStyledComponent(tooltipStyle);
var CommonWrapper = createStyledComponent(commonStyle);

var Button = /*#__PURE__*/function (_Component) {
  _inherits(Button, _Component);

  var _super = _createSuper(Button);

  function Button() {
    var _this;

    _classCallCheck(this, Button);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "onMouseUp", function (e) {
      e.currentTarget.blur();
    });

    return _this;
  }

  _createClass(Button, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return nextProps.children !== this.props.children || nextProps.disabled !== this.props.disabled || nextProps.mark !== this.props.mark || nextProps.size !== this.props.size || nextProps.primary !== this.props.primary || nextProps.tooltipPosition !== this.props.tooltipPosition || nextProps.title !== this.props.title;
    }
  }, {
    key: "render",
    value: function render() {
      var button = /*#__PURE__*/React.createElement(ButtonWrapper, {
        theme: this.props.theme,
        "aria-label": this.props.title,
        primary: this.props.primary,
        disabled: this.props.disabled,
        onMouseUp: this.onMouseUp,
        onClick: this.props.onClick,
        type: this.props.type
      }, this.props.children);
      var Wrapper = this.props.title ? TooltipWrapper : CommonWrapper;
      return /*#__PURE__*/React.createElement(Wrapper, {
        theme: this.props.theme,
        tooltipTitle: this.props.title,
        tooltipPosition: this.props.tooltipPosition,
        size: this.props.size,
        mark: this.props.mark
      }, button);
    }
  }]);

  return Button;
}(Component);

_defineProperty(Button, "propTypes", {
  children: PropTypes.any.isRequired,
  title: PropTypes.string,
  tooltipPosition: PropTypes.oneOf(['top', 'bottom', 'left', 'right', 'bottom-left', 'bottom-right', 'top-left', 'top-right']),
  onClick: PropTypes.func,
  type: PropTypes.string,
  disabled: PropTypes.bool,
  primary: PropTypes.bool,
  size: PropTypes.oneOf(['big', 'normal', 'small']),
  mark: PropTypes.oneOf([false, 'base08', 'base09', 'base0A', 'base0B', 'base0C', 'base0D', 'base0E', 'base0F']),
  theme: PropTypes.object
});

_defineProperty(Button, "defaultProps", {
  tooltipPosition: 'top'
});

export { Button as default };