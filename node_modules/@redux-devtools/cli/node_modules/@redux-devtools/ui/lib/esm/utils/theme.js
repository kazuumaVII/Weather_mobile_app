import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import { useEffect, useMemo, useState } from 'react';
import * as themes from '../themes';
import { nicinabox as defaultDarkScheme } from 'redux-devtools-themes';
import * as baseSchemes from 'base16';
import * as additionalSchemes from '../colorSchemes';
import invertColors from '../utils/invertColors';
export var schemes = _objectSpread(_objectSpread({}, baseSchemes), additionalSchemes);
export var listSchemes = function listSchemes() {
  return Object.keys(schemes).slice(1).sort();
}; // remove `__esModule`

export var listThemes = function listThemes() {
  return Object.keys(themes);
};

var getTheme = function getTheme(type, scheme, light) {
  var colors;

  if (scheme === 'default') {
    colors = light ? schemes.default : defaultDarkScheme;
  } else {
    colors = schemes[scheme];
    if (light) colors = invertColors(colors);
  }

  var theme = _objectSpread({
    type: type,
    light: light
  }, themes.default(colors));

  if (type !== 'default') {
    theme = _objectSpread(_objectSpread({}, theme), themes[type](colors));
  }

  return theme;
};

export var useTheme = function useTheme(_ref) {
  var type = _ref.theme,
      scheme = _ref.scheme,
      colorPreference = _ref.colorPreference;

  var _useState = useState(window.matchMedia('(prefers-color-scheme: dark)').matches),
      _useState2 = _slicedToArray(_useState, 2),
      prefersDarkColorScheme = _useState2[0],
      setPrefersDarkColorScheme = _useState2[1];

  useEffect(function () {
    var mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');

    var handleChange = function handleChange(_ref2) {
      var matches = _ref2.matches;
      setPrefersDarkColorScheme(matches);
    };

    mediaQuery.addEventListener('change', handleChange);
    return function () {
      return mediaQuery.removeEventListener('change', handleChange);
    };
  }, []);
  var light = useMemo(function () {
    return colorPreference === 'auto' ? !prefersDarkColorScheme : colorPreference === 'light';
  }, [colorPreference, prefersDarkColorScheme]);
  return getTheme(type, scheme, light);
};