import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _excluded = ["label", "sublabel", "withValue", "theme"];

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import createStyledComponent from '../utils/createStyledComponent';
import * as styles from './styles';
import { containerStyle } from './styles/common';
var SliderWrapper = createStyledComponent(styles);
var ContainerWithValue = createStyledComponent(containerStyle);

var Slider = /*#__PURE__*/function (_Component) {
  _inherits(Slider, _Component);

  var _super = _createSuper(Slider);

  function Slider() {
    var _this;

    _classCallCheck(this, Slider);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "onChange", function (e) {
      _this.props.onChange(parseFloat(e.target.value));
    });

    return _this;
  }

  _createClass(Slider, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return nextProps.label !== this.props.label || nextProps.value !== this.props.value || nextProps.max !== this.props.max || nextProps.min !== this.props.min || nextProps.withValue !== this.props.withValue || nextProps.disabled !== this.props.disabled;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          label = _this$props.label,
          sublabel = _this$props.sublabel,
          withValue = _this$props.withValue,
          theme = _this$props.theme,
          rest = _objectWithoutProperties(_this$props, _excluded);

      var value = rest.value,
          max = rest.max,
          min = rest.min,
          disabled = rest.disabled;
      var absMax = max - min;
      var percent = (value - min) / absMax * 100;
      var slider = /*#__PURE__*/React.createElement("input", _extends({}, rest, {
        onChange: this.onChange,
        type: "range"
      }));
      return /*#__PURE__*/React.createElement(SliderWrapper, {
        percent: percent,
        disabled: disabled || absMax === 0,
        withLabel: !!label,
        theme: theme
      }, label && /*#__PURE__*/React.createElement("label", null, label, " ", sublabel && /*#__PURE__*/React.createElement("span", null, sublabel)), !withValue ? slider : /*#__PURE__*/React.createElement(ContainerWithValue, {
        theme: theme
      }, slider, /*#__PURE__*/React.createElement("div", null, value)));
    }
  }]);

  return Slider;
}(Component);

_defineProperty(Slider, "propTypes", {
  value: PropTypes.number,
  min: PropTypes.number,
  max: PropTypes.number,
  label: PropTypes.string,
  sublabel: PropTypes.string,
  withValue: PropTypes.bool,
  disabled: PropTypes.bool,
  onChange: PropTypes.func,
  theme: PropTypes.object
});

_defineProperty(Slider, "defaultProps", {
  value: 0,
  min: 0,
  max: 100
});

export { Slider as default };