import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import observeResize from 'simple-element-resize-detector';
import { FaAngleDoubleRight } from 'react-icons/fa';
import ContextMenu from '../ContextMenu';
import createStyledComponent from '../utils/createStyledComponent';
import * as styles from './styles';
var TabsWrapper = createStyledComponent(styles);

var TabsHeader = /*#__PURE__*/function (_Component) {
  _inherits(TabsHeader, _Component);

  var _super = _createSuper(TabsHeader);

  function TabsHeader() {
    var _this;

    _classCallCheck(this, TabsHeader);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      visibleTabs: _this.props.tabs.slice(),
      hiddenTabs: [],
      subMenuOpened: false,
      contextMenu: undefined
    });

    _defineProperty(_assertThisInitialized(_this), "iconWidth", 0);

    _defineProperty(_assertThisInitialized(_this), "hiddenTabsWidth", []);

    _defineProperty(_assertThisInitialized(_this), "collapse", function () {
      if (_this.state.subMenuOpened) _this.hideSubmenu();
      var _this$props = _this.props,
          selected = _this$props.selected,
          tabs = _this$props.tabs;
      var tabsWrapperRef = _this.tabsWrapperRef;
      var tabsRef = _this.tabsRef;
      var tabButtons = _this.tabsRef.children;
      var visibleTabs = _this.state.visibleTabs;
      var hiddenTabs = _this.state.hiddenTabs;
      var tabsWrapperRight = tabsWrapperRef.getBoundingClientRect().right;
      if (!tabsWrapperRight) return; // tabs are hidden

      var tabsRefRight = tabsRef.getBoundingClientRect().right;
      var i = visibleTabs.length - 1;
      var hiddenTab;

      if (tabsRefRight >= tabsWrapperRight - _this.iconWidth) {
        if (_this.props.position === 'right' && hiddenTabs.length > 0 && tabsRef.getBoundingClientRect().width + _this.hiddenTabsWidth[0] < tabsWrapperRef.getBoundingClientRect().width) {
          while (i < tabs.length - 1 && tabsRef.getBoundingClientRect().width + _this.hiddenTabsWidth[0] < tabsWrapperRef.getBoundingClientRect().width) {
            hiddenTab = hiddenTabs.shift();
            visibleTabs.splice(Number(hiddenTab.key), 0, hiddenTab);
            i++;
          }
        } else {
          while (i > 0 && tabButtons[i] && tabButtons[i].getBoundingClientRect().right >= tabsWrapperRight - _this.iconWidth) {
            if (tabButtons[i].value !== selected) {
              hiddenTabs.unshift.apply(hiddenTabs, _toConsumableArray(visibleTabs.splice(i, 1)));

              _this.hiddenTabsWidth.unshift(tabButtons[i].getBoundingClientRect().width);
            } else {
              tabsWrapperRight -= tabButtons[i].getBoundingClientRect().width;
            }

            i--;
          }
        }
      } else {
        while (i < tabs.length - 1 && tabButtons[i] && tabButtons[i].getBoundingClientRect().right + _this.hiddenTabsWidth[0] < tabsWrapperRight - _this.iconWidth) {
          hiddenTab = hiddenTabs.shift();
          visibleTabs.splice(Number(hiddenTab.key), 0, hiddenTab);

          _this.hiddenTabsWidth.shift();

          i++;
        }
      }

      _this.setState({
        visibleTabs: visibleTabs,
        hiddenTabs: hiddenTabs
      });
    });

    _defineProperty(_assertThisInitialized(_this), "hideSubmenu", function () {
      _this.setState({
        subMenuOpened: false,
        contextMenu: undefined
      });
    });

    _defineProperty(_assertThisInitialized(_this), "getTabsWrapperRef", function (node) {
      _this.tabsWrapperRef = node;
    });

    _defineProperty(_assertThisInitialized(_this), "getTabsRef", function (node) {
      _this.tabsRef = node;
    });

    _defineProperty(_assertThisInitialized(_this), "expandMenu", function (e) {
      var rect = e.currentTarget.children[0].getBoundingClientRect();

      _this.setState({
        contextMenu: {
          top: rect.top + 10,
          left: rect.left
        },
        subMenuOpened: true
      });
    });

    return _this;
  }

  _createClass(TabsHeader, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (nextProps.tabs !== this.props.tabs || nextProps.selected !== this.props.selected || nextProps.collapsible !== this.props.collapsible) {
        this.setState({
          hiddenTabs: [],
          visibleTabs: nextProps.tabs.slice()
        });
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.collapsible) {
        this.collapse();
        this.enableResizeEvents();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var collapsible = this.props.collapsible;

      if (!collapsible) {
        if (prevProps.collapsible !== collapsible) this.disableResizeEvents();
        return;
      }

      var shouldCollapse = false;

      if (this.iconWidth === 0) {
        var tabButtons = this.tabsRef.children;

        if (this.tabsRef.children[tabButtons.length - 1].value === 'expandIcon') {
          this.iconWidth = tabButtons[tabButtons.length - 1].getBoundingClientRect().width;
          shouldCollapse = true;
        }
      } else if (this.state.hiddenTabs.length === 0) {
        this.iconWidth = 0;
      }

      if (prevProps.collapsible !== collapsible) {
        this.enableResizeEvents();
        shouldCollapse = true;
      }

      if (shouldCollapse || this.props.selected !== prevProps.selected) {
        this.collapse();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.props.collapsible) {
        this.disableResizeEvents();
      }
    }
  }, {
    key: "enableResizeEvents",
    value: function enableResizeEvents() {
      this.resizeDetector = observeResize(this.tabsWrapperRef, this.collapse);
      window.addEventListener('mousedown', this.hideSubmenu);
    }
  }, {
    key: "disableResizeEvents",
    value: function disableResizeEvents() {
      this.resizeDetector.remove();
      window.removeEventListener('mousedown', this.hideSubmenu);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
          visibleTabs = _this$state.visibleTabs,
          hiddenTabs = _this$state.hiddenTabs,
          contextMenu = _this$state.contextMenu;
      return /*#__PURE__*/React.createElement(TabsWrapper, {
        ref: this.getTabsWrapperRef,
        main: this.props.main,
        position: this.props.position
      }, /*#__PURE__*/React.createElement("div", {
        ref: this.getTabsRef
      }, visibleTabs, this.props.collapsible && visibleTabs.length < this.props.items.length && /*#__PURE__*/React.createElement("button", {
        onClick: this.expandMenu,
        value: "expandIcon"
      }, /*#__PURE__*/React.createElement(FaAngleDoubleRight, null))), this.props.collapsible && contextMenu && /*#__PURE__*/React.createElement(ContextMenu, {
        items: hiddenTabs,
        onClick: this.props.onClick,
        x: contextMenu.left,
        y: contextMenu.top,
        visible: this.state.subMenuOpened
      }));
    }
  }]);

  return TabsHeader;
}(Component);

_defineProperty(TabsHeader, "propTypes", {
  tabs: PropTypes.array.isRequired,
  items: PropTypes.array.isRequired,
  main: PropTypes.bool,
  onClick: PropTypes.func,
  position: PropTypes.string,
  collapsible: PropTypes.bool,
  selected: PropTypes.string
});

export { TabsHeader as default };