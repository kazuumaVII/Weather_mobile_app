import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import createStyledComponent from '../utils/createStyledComponent';
import styles from './styles';
var SegmentedWrapper = createStyledComponent(styles);

var SegmentedControl = /*#__PURE__*/function (_Component) {
  _inherits(SegmentedControl, _Component);

  var _super = _createSuper(SegmentedControl);

  function SegmentedControl() {
    var _this;

    _classCallCheck(this, SegmentedControl);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "onClick", function (e) {
      _this.props.onClick(e.currentTarget.value);
    });

    _defineProperty(_assertThisInitialized(_this), "onMouseUp", function (e) {
      e.currentTarget.blur();
    });

    return _this;
  }

  _createClass(SegmentedControl, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return nextProps.disabled !== this.props.disabled || nextProps.selected !== this.props.selected;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          values = _this$props.values,
          selected = _this$props.selected;
      return /*#__PURE__*/React.createElement(SegmentedWrapper, {
        disabled: this.props.disabled,
        theme: this.props.theme
      }, values.map(function (button) {
        return /*#__PURE__*/React.createElement("button", {
          key: button,
          value: button,
          "data-selected": button === selected ? true : undefined,
          onMouseUp: _this2.onMouseUp,
          onClick: _this2.onClick
        }, button);
      }));
    }
  }]);

  return SegmentedControl;
}(Component);

_defineProperty(SegmentedControl, "propTypes", {
  values: PropTypes.array.isRequired,
  selected: PropTypes.string,
  onClick: PropTypes.func,
  disabled: PropTypes.bool,
  theme: PropTypes.object
});

export { SegmentedControl as default };