import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2;

import React from 'react';
import styled from 'styled-components';
import { MdPlayArrow } from 'react-icons/md';
import { MdFiberManualRecord } from 'react-icons/md';
import { MdKeyboardArrowLeft } from 'react-icons/md';
import { MdKeyboardArrowRight } from 'react-icons/md';
import { Toolbar, Divider, Spacer, Button, Select, Slider, SegmentedControl, Tabs as TabsComponent } from '../';
import { options } from '../Select/options';
import { simple10Tabs } from '../Tabs/data';
var Container = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  height: 100%;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n"])));
var SliderContainer = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  width: 90%;\n  height: 80px;\n"])));
export default {
  title: 'Toolbar',
  component: Toolbar
};

var Template = function Template(_ref) {
  var borderPosition = _ref.borderPosition,
      title = _ref.title,
      tooltipPosition = _ref.tooltipPosition,
      disabled = _ref.disabled,
      onClick = _ref.onClick,
      label = _ref.label;
  return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Toolbar, {
    borderPosition: borderPosition
  }, /*#__PURE__*/React.createElement(Button, {
    title: title,
    tooltipPosition: tooltipPosition,
    disabled: disabled,
    onClick: onClick
  }, label), /*#__PURE__*/React.createElement(Divider, null), /*#__PURE__*/React.createElement(Button, {
    title: title,
    tooltipPosition: tooltipPosition,
    disabled: disabled,
    onClick: onClick
  }, /*#__PURE__*/React.createElement(MdFiberManualRecord, null)), /*#__PURE__*/React.createElement(Divider, null), /*#__PURE__*/React.createElement(Spacer, null), /*#__PURE__*/React.createElement(Select, {
    options: options
  })));
};

export var Default = Template.bind({});
Default.args = {
  borderPosition: 'top',
  title: 'Hello Tooltip',
  tooltipPosition: 'top',
  disabled: false,
  label: 'Hello Button'
};
Default.argTypes = {
  borderPosition: {
    control: {
      type: 'select',
      options: ['top', 'bottom']
    }
  },
  tooltipPosition: {
    control: {
      type: 'select',
      options: ['top', 'bottom', 'left', 'right', 'bottom-left', 'bottom-right', 'top-left', 'top-right']
    }
  },
  onClick: {
    action: 'button clicked'
  }
};

var TabsTemplate = function TabsTemplate(_ref2) {
  var title = _ref2.title,
      tooltipPosition = _ref2.tooltipPosition,
      disabled = _ref2.disabled,
      buttonOnClick = _ref2.buttonOnClick,
      label = _ref2.label,
      selected = _ref2.selected,
      main = _ref2.main,
      tabsOnClick = _ref2.tabsOnClick,
      collapsible = _ref2.collapsible,
      position = _ref2.position;
  return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Toolbar, null, /*#__PURE__*/React.createElement(Button, {
    title: title,
    tooltipPosition: tooltipPosition,
    disabled: disabled,
    onClick: buttonOnClick
  }, label), /*#__PURE__*/React.createElement(TabsComponent, {
    tabs: simple10Tabs,
    selected: selected,
    main: main,
    onClick: tabsOnClick,
    collapsible: collapsible,
    position: position
  }), /*#__PURE__*/React.createElement(Button, {
    title: title,
    tooltipPosition: tooltipPosition,
    disabled: disabled,
    onClick: buttonOnClick
  }, label)));
};

export var Tabs = TabsTemplate.bind({});
Tabs.args = {
  title: 'Hello Tooltip',
  tooltipPosition: 'top',
  disabled: false,
  label: 'Hello Button',
  selected: '2',
  main: true,
  collapsible: true,
  position: 'center'
};
Tabs.argTypes = {
  tooltipPosition: {
    control: {
      type: 'select',
      options: ['top', 'bottom', 'left', 'right', 'bottom-left', 'bottom-right', 'top-left', 'top-right']
    }
  },
  buttonOnClick: {
    action: 'button clicked'
  },
  tabsOnClick: {
    action: 'tab selected'
  },
  position: {
    control: {
      type: 'select',
      options: ['left', 'right', 'center']
    }
  }
};

var WithSliderTemplate = function WithSliderTemplate(_ref3) {
  var title = _ref3.title,
      tooltipPosition = _ref3.tooltipPosition,
      playOnClick = _ref3.playOnClick,
      value = _ref3.value,
      min = _ref3.min,
      max = _ref3.max,
      label = _ref3.label,
      withValue = _ref3.withValue,
      onChange = _ref3.onChange,
      previousStateOnClick = _ref3.previousStateOnClick,
      nextStateOnClick = _ref3.nextStateOnClick,
      selected = _ref3.selected,
      segmentedControlOnClick = _ref3.segmentedControlOnClick;
  return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(SliderContainer, null, /*#__PURE__*/React.createElement(Toolbar, {
    noBorder: true,
    fullHeight: true,
    compact: true
  }, /*#__PURE__*/React.createElement(Button, {
    title: title,
    tooltipPosition: tooltipPosition,
    onClick: playOnClick
  }, /*#__PURE__*/React.createElement(MdPlayArrow, null)), /*#__PURE__*/React.createElement(Slider, {
    value: value,
    min: min,
    max: max,
    label: label,
    withValue: withValue,
    onChange: onChange
  }), /*#__PURE__*/React.createElement(Button, {
    title: "Previous state",
    tooltipPosition: tooltipPosition,
    disabled: true,
    onClick: previousStateOnClick
  }, /*#__PURE__*/React.createElement(MdKeyboardArrowLeft, null)), /*#__PURE__*/React.createElement(Button, {
    title: "Next state",
    tooltipPosition: tooltipPosition,
    onClick: nextStateOnClick
  }, /*#__PURE__*/React.createElement(MdKeyboardArrowRight, null)), /*#__PURE__*/React.createElement(SegmentedControl, {
    values: ['live', '1x'],
    selected: selected,
    onClick: segmentedControlOnClick
  }))));
};

export var WithSlider = WithSliderTemplate.bind({});
WithSlider.args = {
  title: 'Play',
  tooltipPosition: 'top',
  value: 80,
  min: 0,
  max: 100,
  label: 'Slider label',
  withValue: false,
  selected: 'live'
};
WithSlider.argTypes = {
  tooltipPosition: {
    control: {
      type: 'select',
      options: ['top', 'bottom', 'left', 'right', 'bottom-left', 'bottom-right', 'top-left', 'top-right']
    }
  },
  playOnClick: {
    action: 'button clicked'
  },
  onChange: {
    action: 'slider changed'
  },
  previousStateOnClick: {
    action: 'previous state clicked'
  },
  nextStateOnClick: {
    action: 'next state clicked'
  },
  selected: {
    control: {
      type: 'select',
      options: ['live', '1x']
    }
  },
  segmentedControlOnClick: {
    action: 'button selected'
  }
};