import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent, Component } from 'react';
import PropTypes from 'prop-types';
import ReactSelect from 'react-select';
import createThemedComponent from '../utils/createThemedComponent';

/**
 * Wrapper around [React Select](https://github.com/JedWatson/react-select).
 */
export var Select = /*#__PURE__*/function (_ref) {
  _inherits(Select, _ref);

  var _super = _createSuper(Select);

  function Select() {
    _classCallCheck(this, Select);

    return _super.apply(this, arguments);
  }

  _createClass(Select, [{
    key: "render",
    value: function render() {
      var _this = this;

      return /*#__PURE__*/React.createElement(ReactSelect, _extends({}, this.props, {
        theme: function theme(_theme) {
          return _objectSpread(_objectSpread({}, _theme), {}, {
            borderRadius: 0,
            colors: _objectSpread(_objectSpread({}, _theme.colors), {}, {
              primary: _this.props.theme.base05,
              primary50: _this.props.theme.base03,
              primary25: _this.props.theme.base01,
              dangerLight: _this.props.theme.base03,
              danger: _this.props.theme.base07,
              neutral0: _this.props.theme.base00,
              neutral5: _this.props.theme.base01,
              neutral10: _this.props.theme.base02,
              neutral20: _this.props.theme.base03,
              neutral30: _this.props.theme.base04,
              neutral40: _this.props.theme.base05,
              neutral60: _this.props.theme.base06,
              neutral80: _this.props.theme.base07
            }),
            spacing: _objectSpread(_objectSpread({}, _theme.spacing), {}, {
              baseUnit: 2,
              controlHeight: _this.props.theme.inputHeight
            })
          });
        },
        styles: {
          container: function container(base) {
            return _objectSpread(_objectSpread({}, base), {}, {
              flexGrow: 1
            });
          },
          control: function control(base, props) {
            return _objectSpread(_objectSpread({}, base), {}, {
              backgroundColor: props.isFocused ? props.theme.colors.neutral10 : props.theme.colors.neutral5,
              borderColor: props.theme.colors.neutral10,
              '&:hover': {
                backgroundColor: props.theme.colors.neutral10,
                borderColor: props.theme.colors.neutral10
              }
            });
          },
          menu: function menu(base) {
            return _objectSpread(_objectSpread({}, base), {}, {
              zIndex: 10
            });
          }
        }
      }));
    }
  }]);

  return Select;
}(PureComponent || Component);

_defineProperty(Select, "propTypes", {
  isClearable: PropTypes.bool,
  // should it be possible to reset value
  isDisabled: PropTypes.bool,
  // whether the Select is disabled or not
  isLoading: PropTypes.bool,
  // whether the Select is loading externally or not
  maxMenuHeight: PropTypes.number,
  // maximum css height for the opened menu of options
  isMulti: PropTypes.bool,
  // multi-value input
  isSearchable: PropTypes.bool,
  // whether to enable searching feature or not
  value: PropTypes.any,
  // initial field value
  menuPlacement: PropTypes.oneOf(['auto', 'bottom', 'top']) // value to control the opening direction

});

export default createThemedComponent(Select);