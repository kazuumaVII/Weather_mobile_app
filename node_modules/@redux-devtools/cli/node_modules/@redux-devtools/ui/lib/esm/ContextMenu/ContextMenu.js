import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import createStyledComponent from '../utils/createStyledComponent';
import styles from './styles/index';
var ContextMenuWrapper = createStyledComponent(styles);

function isReactButtonElement(item) {
  return item.type === 'button';
}

var ContextMenu = /*#__PURE__*/function (_Component) {
  _inherits(ContextMenu, _Component);

  var _super = _createSuper(ContextMenu);

  function ContextMenu() {
    var _this;

    _classCallCheck(this, ContextMenu);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "onMouseUp", function (e) {
      e.currentTarget.blur();
    });

    _defineProperty(_assertThisInitialized(_this), "onClick", function (e) {
      _this.props.onClick(e.currentTarget.value);
    });

    _defineProperty(_assertThisInitialized(_this), "menuRef", function (c) {
      _this.menu = c;
    });

    return _this;
  }

  _createClass(ContextMenu, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.amendPosition();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.x !== this.props.x || prevProps.y !== this.props.y) {
        this.amendPosition();
      }
    }
  }, {
    key: "amendPosition",
    value: function amendPosition() {
      var _this$props = this.props,
          x = _this$props.x,
          y = _this$props.y;
      var _document$documentEle = document.documentElement,
          scrollTop = _document$documentEle.scrollTop,
          scrollLeft = _document$documentEle.scrollLeft;
      var _window = window,
          innerWidth = _window.innerWidth,
          innerHeight = _window.innerHeight;
      var rect = this.menu.getBoundingClientRect();
      var left = x + scrollLeft;
      var top = y + scrollTop;

      if (y + rect.height > innerHeight) {
        top = innerHeight - rect.height;
      }

      if (x + rect.width > innerWidth) {
        left = innerWidth - rect.width;
      }

      if (top < 0) {
        top = rect.height < innerHeight ? (innerHeight - rect.height) / 2 : 0;
      }

      if (left < 0) {
        left = rect.width < innerWidth ? (innerWidth - rect.width) / 2 : 0;
      }

      this.menu.style.top = "".concat(top, "px");
      this.menu.style.left = "".concat(left, "px");
    }
  }, {
    key: "renderItems",
    value: function renderItems() {
      var _this2 = this;

      return this.props.items.map(function (item) {
        if (isReactButtonElement(item)) return item;
        var value = item.value || item.name;
        return /*#__PURE__*/React.createElement("button", {
          key: value,
          value: value,
          onMouseUp: _this2.onMouseUp,
          onClick: _this2.onClick
        }, item.name);
      });
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(ContextMenuWrapper, {
        ref: this.menuRef,
        left: this.props.x,
        top: this.props.y,
        visible: this.props.visible
      }, this.renderItems());
    }
  }]);

  return ContextMenu;
}(Component);

_defineProperty(ContextMenu, "propTypes", {
  items: PropTypes.array.isRequired,
  onClick: PropTypes.func.isRequired,
  x: PropTypes.number.isRequired,
  y: PropTypes.number.isRequired,
  visible: PropTypes.bool
});

export { ContextMenu as default };