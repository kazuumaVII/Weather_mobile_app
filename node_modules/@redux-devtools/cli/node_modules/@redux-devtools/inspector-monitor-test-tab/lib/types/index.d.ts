import { Component } from 'react';
import PropTypes from 'prop-types';
import { Action } from 'redux';
import { TabComponentProps } from '@redux-devtools/inspector-monitor';
import { Template } from './types';
export declare const getDefaultTemplates: () => Template[];
interface TestGeneratorMonitorState {
    hideTip?: boolean;
    selected?: number;
    templates?: Template[];
}
interface State {
    dialogStatus: 'Add' | 'Edit' | null;
}
export declare class TestTab<S, A extends Action<unknown>> extends Component<TabComponentProps<S, A>, State> {
    state: State;
    getPersistedState: () => TestGeneratorMonitorState;
    handleSelectTemplate: (selectedTemplate: Template | null | undefined) => void;
    handleCloseTip: () => void;
    handleCloseDialog: () => void;
    handleSubmit: ({ formData: template }: {
        formData: Template;
    }) => void;
    handleRemove: () => void;
    addTemplate: () => void;
    editTemplate: () => void;
    updateState: (newState: TestGeneratorMonitorState) => void;
    render(): JSX.Element;
    static propTypes: {
        monitorState: PropTypes.Validator<PropTypes.InferProps<{
            testGenerator: PropTypes.Requireable<PropTypes.InferProps<{
                templates: PropTypes.Requireable<any[]>;
                selected: PropTypes.Requireable<number>;
                hideTip: PropTypes.Requireable<boolean>;
            }>>;
        }>>;
        updateMonitorState: PropTypes.Validator<(...args: any[]) => any>;
    };
}
export { default as reduxAvaTemplate } from './redux/ava';
export { default as reduxJestTemplate } from './redux/jest';
export { default as reduxMochaTemplate } from './redux/mocha';
export { default as reduxTapeTemplate } from './redux/tape';
export { default as vanillaAvaTemplate } from './vanilla/ava';
export { default as vanillaJestTemplate } from './vanilla/jest';
export { default as vanillaMochaTemplate } from './vanilla/mocha';
export { default as vanillaTapeTemplate } from './vanilla/tape';
