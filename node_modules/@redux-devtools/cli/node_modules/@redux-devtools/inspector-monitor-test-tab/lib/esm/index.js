import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _excluded = ["monitorState", "updateMonitorState"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Toolbar, Container, Button, Select, Notification, Dialog } from '@redux-devtools/ui';
import { MdAdd } from 'react-icons/md';
import { MdEdit } from 'react-icons/md';
import { formSchema, uiSchema, defaultFormData } from './templateForm';
import TestGenerator from './TestGenerator';
import jestTemplate from './redux/jest/template';
import mochaTemplate from './redux/mocha/template';
import tapeTemplate from './redux/tape/template';
import avaTemplate from './redux/ava/template';
export var getDefaultTemplates = function
  /* lib */
getDefaultTemplates() {
  return (
    /*
     if (lib === 'redux') {
     return [mochaTemplate, tapeTemplate, avaTemplate];
     }
     return [mochaVTemplate, tapeVTemplate, avaVTemplate];
     */
    [jestTemplate, mochaTemplate, tapeTemplate, avaTemplate]
  );
};
export var TestTab = /*#__PURE__*/function (_Component) {
  _inherits(TestTab, _Component);

  var _super = _createSuper(TestTab);

  function TestTab() {
    var _this;

    _classCallCheck(this, TestTab);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      dialogStatus: null
    });

    _defineProperty(_assertThisInitialized(_this), "getPersistedState", function () {
      return _this.props.monitorState.testGenerator || {};
    });

    _defineProperty(_assertThisInitialized(_this), "handleSelectTemplate", function (selectedTemplate) {
      var _this$getPersistedSta = _this.getPersistedState(),
          _this$getPersistedSta2 = _this$getPersistedSta.templates,
          templates = _this$getPersistedSta2 === void 0 ? getDefaultTemplates() : _this$getPersistedSta2;

      _this.updateState({
        selected: templates.indexOf(selectedTemplate)
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleCloseTip", function () {
      _this.updateState({
        hideTip: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleCloseDialog", function () {
      _this.setState({
        dialogStatus: null
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleSubmit", function (_ref) {
      var template = _ref.formData;

      var _this$getPersistedSta3 = _this.getPersistedState(),
          _this$getPersistedSta4 = _this$getPersistedSta3.templates,
          templates = _this$getPersistedSta4 === void 0 ? getDefaultTemplates() : _this$getPersistedSta4,
          _this$getPersistedSta5 = _this$getPersistedSta3.selected,
          selected = _this$getPersistedSta5 === void 0 ? 0 : _this$getPersistedSta5;

      if (_this.state.dialogStatus === 'Add') {
        _this.updateState({
          selected: templates.length,
          templates: [].concat(_toConsumableArray(templates), [template])
        });
      } else {
        var editedTemplates = _toConsumableArray(templates);

        editedTemplates[selected] = template;

        _this.updateState({
          templates: editedTemplates
        });
      }

      _this.handleCloseDialog();
    });

    _defineProperty(_assertThisInitialized(_this), "handleRemove", function () {
      var _this$getPersistedSta6 = _this.getPersistedState(),
          _this$getPersistedSta7 = _this$getPersistedSta6.templates,
          templates = _this$getPersistedSta7 === void 0 ? getDefaultTemplates() : _this$getPersistedSta7,
          _this$getPersistedSta8 = _this$getPersistedSta6.selected,
          selected = _this$getPersistedSta8 === void 0 ? 0 : _this$getPersistedSta8;

      _this.updateState({
        selected: 0,
        templates: templates.length === 1 ? undefined : [].concat(_toConsumableArray(templates.slice(0, selected)), _toConsumableArray(templates.slice(selected + 1)))
      });

      _this.handleCloseDialog();
    });

    _defineProperty(_assertThisInitialized(_this), "addTemplate", function () {
      _this.setState({
        dialogStatus: 'Add'
      });
    });

    _defineProperty(_assertThisInitialized(_this), "editTemplate", function () {
      _this.setState({
        dialogStatus: 'Edit'
      });
    });

    _defineProperty(_assertThisInitialized(_this), "updateState", function (newState) {
      _this.props.updateMonitorState({
        testGenerator: _objectSpread(_objectSpread({}, _this.props.monitorState.testGenerator), newState)
      });
    });

    return _this;
  }

  _createClass(TestTab, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          monitorState = _this$props.monitorState,
          updateMonitorState = _this$props.updateMonitorState,
          rest = _objectWithoutProperties(_this$props, _excluded); // eslint-disable-line no-unused-vars, max-len


      var dialogStatus = this.state.dialogStatus;
      var persistedState = this.getPersistedState();
      var _persistedState$selec = persistedState.selected,
          selected = _persistedState$selec === void 0 ? 0 : _persistedState$selec,
          _persistedState$templ = persistedState.templates,
          templates = _persistedState$templ === void 0 ? getDefaultTemplates() : _persistedState$templ;
      var template = templates[selected];
      var name = template.name,
          assertion = template.assertion,
          dispatcher = template.dispatcher,
          wrap = template.wrap;
      return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Toolbar, null, /*#__PURE__*/React.createElement("div", {
        style: {
          flexGrow: 1
        }
      }, /*#__PURE__*/React.createElement(Select, {
        options: templates,
        getOptionValue: function getOptionValue(template) {
          return template.name;
        },
        getOptionLabel: function getOptionLabel(template) {
          return template.name;
        },
        value: templates.find(function (template) {
          return template.name === name;
        }),
        onChange: this.handleSelectTemplate
      })), /*#__PURE__*/React.createElement(Button, {
        onClick: this.editTemplate
      }, /*#__PURE__*/React.createElement(MdEdit, null)), /*#__PURE__*/React.createElement(Button, {
        onClick: this.addTemplate
      }, /*#__PURE__*/React.createElement(MdAdd, null))), !assertion ? /*#__PURE__*/React.createElement(Notification, null, "No template for tests specified.") : /*#__PURE__*/React.createElement(TestGenerator, _extends({
        isVanilla: false,
        assertion: assertion,
        dispatcher: dispatcher,
        wrap: wrap
      }, rest)), !persistedState.hideTip && assertion && rest.startActionId === null && /*#__PURE__*/React.createElement(Notification, {
        onClose: this.handleCloseTip
      }, "Hold ", /*#__PURE__*/React.createElement("b", null, "SHIFT"), " key to select more actions."), dialogStatus && /*#__PURE__*/React.createElement(Dialog, {
        open: true,
        title: "".concat(dialogStatus, " test template"),
        onDismiss: this.handleCloseDialog,
        onSubmit: this.handleSubmit,
        actions: [/*#__PURE__*/React.createElement(Button, {
          key: "cancel",
          onClick: this.handleCloseDialog
        }, "Cancel"), /*#__PURE__*/React.createElement(Button, {
          key: "remove",
          onClick: this.handleRemove
        }, "Remove")],
        submitText: dialogStatus,
        schema: formSchema,
        uiSchema: uiSchema,
        formData: dialogStatus === 'Edit' ? template : defaultFormData
      }));
    }
  }]);

  return TestTab;
}(Component);

_defineProperty(TestTab, "propTypes", {
  monitorState: PropTypes.shape({
    testGenerator: PropTypes.shape({
      templates: PropTypes.array,
      selected: PropTypes.number,
      hideTip: PropTypes.bool
    })
  }).isRequired,

  /*
  options: PropTypes.shape({
    lib: PropTypes.string
  }).isRequired,
  */
  updateMonitorState: PropTypes.func.isRequired
});

export { default as reduxAvaTemplate } from './redux/ava';
export { default as reduxJestTemplate } from './redux/jest';
export { default as reduxMochaTemplate } from './redux/mocha';
export { default as reduxTapeTemplate } from './redux/tape';
export { default as vanillaAvaTemplate } from './vanilla/ava';
export { default as vanillaJestTemplate } from './vanilla/jest';
export { default as vanillaMochaTemplate } from './vanilla/mocha';
export { default as vanillaTapeTemplate } from './vanilla/tape';