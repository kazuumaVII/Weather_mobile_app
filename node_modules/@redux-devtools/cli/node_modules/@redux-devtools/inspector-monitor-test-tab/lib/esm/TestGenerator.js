import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent, Component } from 'react';
import { stringify } from 'javascript-stringify';
import objectPath from 'object-path';
import jsan from 'jsan';
import diff from 'simple-diff';
import es6template from 'es6template';
import { Editor } from '@redux-devtools/ui';
export var fromPath = function fromPath(path) {
  return path.map(function (a) {
    return typeof a === 'string' ? ".".concat(a) : "[".concat(a, "]");
  }).join('');
};

function getState(s, // eslint-disable-next-line @typescript-eslint/ban-types
defaultValue) {
  if (!s) return defaultValue;
  return JSON.parse(jsan.stringify(s.state));
}

export function compare(s1, s2, cb, // eslint-disable-next-line @typescript-eslint/ban-types
defaultValue) {
  var paths = []; // Already processed

  function generate(event) {
    var curState;
    var path = fromPath(event.newPath);

    if (event.type === 'remove-item' || event.type === 'move-item') {
      if (paths.length && paths.indexOf(path) !== -1) return;
      paths.push(path); // eslint-disable-next-line @typescript-eslint/ban-types

      var v = objectPath.get(s2.state, event.newPath);
      curState = v.length;
      path += '.length';
    } else if (event.type === 'add-item') {
      generate({
        type: 'move-item',
        newPath: event.newPath
      });
      path += "[".concat(event.newIndex, "]");
      curState = stringify(event.newValue);
    } else {
      curState = stringify(event.newValue);
    } // console.log(`expect(store${path}).toEqual(${curState});`);


    cb({
      path: path,
      curState: curState
    });
  }

  diff(getState(s1, defaultValue), getState(s2, defaultValue)
  /* , { idProp: '*' } */
  ).forEach(generate);
}

var TestGenerator = /*#__PURE__*/function (_ref) {
  _inherits(TestGenerator, _ref);

  var _super = _createSuper(TestGenerator);

  function TestGenerator() {
    _classCallCheck(this, TestGenerator);

    return _super.apply(this, arguments);
  }

  _createClass(TestGenerator, [{
    key: "getMethod",
    value: function getMethod(action) {
      var type = action.type;
      if (type[0] === '┗') type = type.substr(1).trim();
      var args = action.arguments ? action.arguments.map(function (arg) {
        return stringify(arg);
      }).join(',') : '';
      return "".concat(type, "(").concat(args, ")");
    }
  }, {
    key: "getAction",
    value: function getAction(action) {
      if (action.type === '@@INIT') return '{}';
      return stringify(action);
    }
  }, {
    key: "generateTest",
    value: function generateTest() {
      var _this$props = this.props,
          computedStates = _this$props.computedStates,
          actions = _this$props.actions,
          selectedActionId = _this$props.selectedActionId,
          startActionId = _this$props.startActionId,
          isVanilla = _this$props.isVanilla,
          name = _this$props.name;
      if (!actions || !computedStates || computedStates.length < 1) return '';
      var _this$props2 = this.props,
          wrap = _this$props2.wrap,
          assertion = _this$props2.assertion,
          dispatcher = _this$props2.dispatcher,
          indentation = _this$props2.indentation;
      if (typeof assertion === 'string') assertion = es6template.compile(assertion);

      if (typeof wrap === 'string') {
        var ident = /\n.+\$\{assertions}/.exec(wrap);
        if (ident) indentation = ident[0].length - 13;
        wrap = es6template.compile(wrap);
      }

      if (typeof dispatcher === 'string') dispatcher = es6template.compile(dispatcher);
      var space = '';
      if (indentation) space = Array(indentation).join(' ');
      var r = '';
      var isFirst = true;
      var i;
      if (startActionId !== null) i = startActionId;else if (selectedActionId !== null) i = selectedActionId;else i = computedStates.length - 1;
      var startIdx = i > 0 ? i : 1;

      var addAssertions = function addAssertions(_ref2) {
        var path = _ref2.path,
            curState = _ref2.curState;
        r += "".concat(space).concat(assertion({
          path: path,
          curState: curState
        }), "\n");
      };

      while (actions[i]) {
        if (!isVanilla ||
        /* eslint-disable-next-line no-useless-escape */
        /^┗?\s?[a-zA-Z0-9_@.\[\]-]+?$/.test(actions[i].action.type)) {
          if (isFirst) isFirst = false;else r += space;

          if (!isVanilla || actions[i].action.type[0] !== '@') {
            r += dispatcher({
              action: !isVanilla ? this.getAction(actions[i].action) : this.getMethod(actions[i].action),
              prevState: i > 0 ? stringify(computedStates[i - 1].state) : undefined
            }) + '\n';
          }

          if (!isVanilla) {
            addAssertions({
              path: '',
              curState: stringify(computedStates[i].state)
            });
          } else {
            compare(computedStates[i - 1], computedStates[i], addAssertions, isVanilla && {});
          }
        }

        i++;
        if (i > selectedActionId) break;
      }

      r = r.trim();

      if (wrap) {
        if (!isVanilla) r = wrap({
          name: name,
          assertions: r
        });else {
          r = wrap({
            name: /^[a-zA-Z0-9_-]+?$/.test(name) ? name : 'Store',
            actionName: (selectedActionId === null || selectedActionId > 0) && actions[startIdx] ? actions[startIdx].action.type.replace(/[^a-zA-Z0-9_-]+/, '') : 'should return the initial state',
            initialState: stringify(computedStates[startIdx - 1].state),
            assertions: r
          });
        }
      }

      return r;
    }
  }, {
    key: "render",
    value: function render() {
      var code = this.generateTest();

      if (!this.props.useCodemirror) {
        return /*#__PURE__*/React.createElement("textarea", {
          style: {
            padding: '10px',
            width: '100%',
            height: '100%'
          },
          defaultValue: code
        });
      }

      return /*#__PURE__*/React.createElement(Editor, {
        value: code
      });
    }
  }]);

  return TestGenerator;
}(PureComponent || Component);

_defineProperty(TestGenerator, "defaultProps", {
  useCodemirror: true,
  selectedActionId: null,
  startActionId: null
});

export { TestGenerator as default };